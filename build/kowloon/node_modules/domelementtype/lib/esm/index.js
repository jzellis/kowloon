"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = exports.Tag = exports.Style = exports.Script = exports.Root = exports.ElementType = exports.Doctype = exports.Directive = exports.Comment = exports.CDATA = void 0;
exports.isTag = isTag;
/** Types of elements found in htmlparser2's DOM */
var ElementType;
exports.ElementType = ElementType;
(function (ElementType) {
  /** Type for the root element of a document */
  ElementType["Root"] = "root";
  /** Type for Text */
  ElementType["Text"] = "text";
  /** Type for <? ... ?> */
  ElementType["Directive"] = "directive";
  /** Type for <!-- ... --> */
  ElementType["Comment"] = "comment";
  /** Type for <script> tags */
  ElementType["Script"] = "script";
  /** Type for <style> tags */
  ElementType["Style"] = "style";
  /** Type for Any tag */
  ElementType["Tag"] = "tag";
  /** Type for <![CDATA[ ... ]]> */
  ElementType["CDATA"] = "cdata";
  /** Type for <!doctype ...> */
  ElementType["Doctype"] = "doctype";
})(ElementType || (exports.ElementType = ElementType = {}));
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */
function isTag(elem) {
  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
// Exports for backwards compatibility
/** Type for the root element of a document */
var Root = ElementType.Root;
/** Type for Text */
exports.Root = Root;
var Text = ElementType.Text;
/** Type for <? ... ?> */
exports.Text = Text;
var Directive = ElementType.Directive;
/** Type for <!-- ... --> */
exports.Directive = Directive;
var Comment = ElementType.Comment;
/** Type for <script> tags */
exports.Comment = Comment;
var Script = ElementType.Script;
/** Type for <style> tags */
exports.Script = Script;
var Style = ElementType.Style;
/** Type for Any tag */
exports.Style = Style;
var Tag = ElementType.Tag;
/** Type for <![CDATA[ ... ]]> */
exports.Tag = Tag;
var CDATA = ElementType.CDATA;
/** Type for <!doctype ...> */
exports.CDATA = CDATA;
var Doctype = ElementType.Doctype;
exports.Doctype = Doctype;