"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
var commander_1 = require("./commander");
var errors_1 = require("./errors");
var RedisMultiCommand = /*#__PURE__*/function () {
  function RedisMultiCommand() {
    _classCallCheck(this, RedisMultiCommand);
    Object.defineProperty(this, "queue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "scriptsInUse", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Set()
    });
  }
  _createClass(RedisMultiCommand, [{
    key: "addCommand",
    value: function addCommand(args, transformReply) {
      this.queue.push({
        args: args,
        transformReply: transformReply
      });
    }
  }, {
    key: "addFunction",
    value: function addFunction(name, fn, args) {
      var transformedArguments = (0, commander_1.fCallArguments)(name, fn, fn.transformArguments.apply(fn, _toConsumableArray(args)));
      this.queue.push({
        args: transformedArguments,
        transformReply: fn.transformReply
      });
      return transformedArguments;
    }
  }, {
    key: "addScript",
    value: function addScript(script, args) {
      var transformedArguments = [];
      if (this.scriptsInUse.has(script.SHA1)) {
        transformedArguments.push('EVALSHA', script.SHA1);
      } else {
        this.scriptsInUse.add(script.SHA1);
        transformedArguments.push('EVAL', script.SCRIPT);
      }
      if (script.NUMBER_OF_KEYS !== undefined) {
        transformedArguments.push(script.NUMBER_OF_KEYS.toString());
      }
      var scriptArguments = script.transformArguments.apply(script, _toConsumableArray(args));
      transformedArguments.push.apply(transformedArguments, _toConsumableArray(scriptArguments));
      if (scriptArguments.preserve) {
        transformedArguments.preserve = scriptArguments.preserve;
      }
      this.addCommand(transformedArguments, script.transformReply);
      return transformedArguments;
    }
  }, {
    key: "handleExecReplies",
    value: function handleExecReplies(rawReplies) {
      var execReply = rawReplies[rawReplies.length - 1];
      if (execReply === null) {
        throw new errors_1.WatchError();
      }
      return this.transformReplies(execReply);
    }
  }, {
    key: "transformReplies",
    value: function transformReplies(rawReplies) {
      var _this = this;
      return rawReplies.map(function (reply, i) {
        var _this$queue$i = _this.queue[i],
          transformReply = _this$queue$i.transformReply,
          args = _this$queue$i.args;
        return transformReply ? transformReply(reply, args.preserve) : reply;
      });
    }
  }], [{
    key: "generateChainId",
    value: function generateChainId() {
      return Symbol('RedisMultiCommand Chain Id');
    }
  }]);
  return RedisMultiCommand;
}();
exports["default"] = RedisMultiCommand;