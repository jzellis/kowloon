"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
var commands_1 = require("../cluster/commands");
var ACL_CAT = require("../commands/ACL_CAT");
var ACL_DELUSER = require("../commands/ACL_DELUSER");
var ACL_DRYRUN = require("../commands/ACL_DRYRUN");
var ACL_GENPASS = require("../commands/ACL_GENPASS");
var ACL_GETUSER = require("../commands/ACL_GETUSER");
var ACL_LIST = require("../commands/ACL_LIST");
var ACL_LOAD = require("../commands/ACL_LOAD");
var ACL_LOG_RESET = require("../commands/ACL_LOG_RESET");
var ACL_LOG = require("../commands/ACL_LOG");
var ACL_SAVE = require("../commands/ACL_SAVE");
var ACL_SETUSER = require("../commands/ACL_SETUSER");
var ACL_USERS = require("../commands/ACL_USERS");
var ACL_WHOAMI = require("../commands/ACL_WHOAMI");
var ASKING = require("../commands/ASKING");
var AUTH = require("../commands/AUTH");
var BGREWRITEAOF = require("../commands/BGREWRITEAOF");
var BGSAVE = require("../commands/BGSAVE");
var CLIENT_CACHING = require("../commands/CLIENT_CACHING");
var CLIENT_GETNAME = require("../commands/CLIENT_GETNAME");
var CLIENT_GETREDIR = require("../commands/CLIENT_GETREDIR");
var CLIENT_ID = require("../commands/CLIENT_ID");
var CLIENT_KILL = require("../commands/CLIENT_KILL");
var CLIENT_LIST = require("../commands/CLIENT_LIST");
var CLIENT_NO_EVICT = require("../commands/CLIENT_NO-EVICT");
var CLIENT_PAUSE = require("../commands/CLIENT_PAUSE");
var CLIENT_SETNAME = require("../commands/CLIENT_SETNAME");
var CLIENT_TRACKING = require("../commands/CLIENT_TRACKING");
var CLIENT_TRACKINGINFO = require("../commands/CLIENT_TRACKINGINFO");
var CLIENT_UNPAUSE = require("../commands/CLIENT_UNPAUSE");
var CLIENT_INFO = require("../commands/CLIENT_INFO");
var CLUSTER_ADDSLOTS = require("../commands/CLUSTER_ADDSLOTS");
var CLUSTER_ADDSLOTSRANGE = require("../commands/CLUSTER_ADDSLOTSRANGE");
var CLUSTER_BUMPEPOCH = require("../commands/CLUSTER_BUMPEPOCH");
var CLUSTER_COUNT_FAILURE_REPORTS = require("../commands/CLUSTER_COUNT-FAILURE-REPORTS");
var CLUSTER_COUNTKEYSINSLOT = require("../commands/CLUSTER_COUNTKEYSINSLOT");
var CLUSTER_DELSLOTS = require("../commands/CLUSTER_DELSLOTS");
var CLUSTER_DELSLOTSRANGE = require("../commands/CLUSTER_DELSLOTSRANGE");
var CLUSTER_FAILOVER = require("../commands/CLUSTER_FAILOVER");
var CLUSTER_FLUSHSLOTS = require("../commands/CLUSTER_FLUSHSLOTS");
var CLUSTER_FORGET = require("../commands/CLUSTER_FORGET");
var CLUSTER_GETKEYSINSLOT = require("../commands/CLUSTER_GETKEYSINSLOT");
var CLUSTER_INFO = require("../commands/CLUSTER_INFO");
var CLUSTER_KEYSLOT = require("../commands/CLUSTER_KEYSLOT");
var CLUSTER_LINKS = require("../commands/CLUSTER_LINKS");
var CLUSTER_MEET = require("../commands/CLUSTER_MEET");
var CLUSTER_MYID = require("../commands/CLUSTER_MYID");
var CLUSTER_NODES = require("../commands/CLUSTER_NODES");
var CLUSTER_REPLICAS = require("../commands/CLUSTER_REPLICAS");
var CLUSTER_REPLICATE = require("../commands/CLUSTER_REPLICATE");
var CLUSTER_RESET = require("../commands/CLUSTER_RESET");
var CLUSTER_SAVECONFIG = require("../commands/CLUSTER_SAVECONFIG");
var CLUSTER_SET_CONFIG_EPOCH = require("../commands/CLUSTER_SET-CONFIG-EPOCH");
var CLUSTER_SETSLOT = require("../commands/CLUSTER_SETSLOT");
var CLUSTER_SLOTS = require("../commands/CLUSTER_SLOTS");
var COMMAND_COUNT = require("../commands/COMMAND_COUNT");
var COMMAND_GETKEYS = require("../commands/COMMAND_GETKEYS");
var COMMAND_GETKEYSANDFLAGS = require("../commands/COMMAND_GETKEYSANDFLAGS");
var COMMAND_INFO = require("../commands/COMMAND_INFO");
var COMMAND_LIST = require("../commands/COMMAND_LIST");
var COMMAND = require("../commands/COMMAND");
var CONFIG_GET = require("../commands/CONFIG_GET");
var CONFIG_RESETASTAT = require("../commands/CONFIG_RESETSTAT");
var CONFIG_REWRITE = require("../commands/CONFIG_REWRITE");
var CONFIG_SET = require("../commands/CONFIG_SET");
var DBSIZE = require("../commands/DBSIZE");
var DISCARD = require("../commands/DISCARD");
var ECHO = require("../commands/ECHO");
var FAILOVER = require("../commands/FAILOVER");
var FLUSHALL = require("../commands/FLUSHALL");
var FLUSHDB = require("../commands/FLUSHDB");
var FUNCTION_DELETE = require("../commands/FUNCTION_DELETE");
var FUNCTION_DUMP = require("../commands/FUNCTION_DUMP");
var FUNCTION_FLUSH = require("../commands/FUNCTION_FLUSH");
var FUNCTION_KILL = require("../commands/FUNCTION_KILL");
var FUNCTION_LIST_WITHCODE = require("../commands/FUNCTION_LIST_WITHCODE");
var FUNCTION_LIST = require("../commands/FUNCTION_LIST");
var FUNCTION_LOAD = require("../commands/FUNCTION_LOAD");
var FUNCTION_RESTORE = require("../commands/FUNCTION_RESTORE");
var FUNCTION_STATS = require("../commands/FUNCTION_STATS");
var HELLO = require("../commands/HELLO");
var INFO = require("../commands/INFO");
var KEYS = require("../commands/KEYS");
var LASTSAVE = require("../commands/LASTSAVE");
var LATENCY_DOCTOR = require("../commands/LATENCY_DOCTOR");
var LATENCY_GRAPH = require("../commands/LATENCY_GRAPH");
var LATENCY_LATEST = require("../commands/LATENCY_LATEST");
var LOLWUT = require("../commands/LOLWUT");
var MEMORY_DOCTOR = require("../commands/MEMORY_DOCTOR");
var MEMORY_MALLOC_STATS = require("../commands/MEMORY_MALLOC-STATS");
var MEMORY_PURGE = require("../commands/MEMORY_PURGE");
var MEMORY_STATS = require("../commands/MEMORY_STATS");
var MEMORY_USAGE = require("../commands/MEMORY_USAGE");
var MODULE_LIST = require("../commands/MODULE_LIST");
var MODULE_LOAD = require("../commands/MODULE_LOAD");
var MODULE_UNLOAD = require("../commands/MODULE_UNLOAD");
var MOVE = require("../commands/MOVE");
var PING = require("../commands/PING");
var PUBSUB_CHANNELS = require("../commands/PUBSUB_CHANNELS");
var PUBSUB_NUMPAT = require("../commands/PUBSUB_NUMPAT");
var PUBSUB_NUMSUB = require("../commands/PUBSUB_NUMSUB");
var PUBSUB_SHARDCHANNELS = require("../commands/PUBSUB_SHARDCHANNELS");
var RANDOMKEY = require("../commands/RANDOMKEY");
var READONLY = require("../commands/READONLY");
var READWRITE = require("../commands/READWRITE");
var REPLICAOF = require("../commands/REPLICAOF");
var RESTORE_ASKING = require("../commands/RESTORE-ASKING");
var ROLE = require("../commands/ROLE");
var SAVE = require("../commands/SAVE");
var SCAN = require("../commands/SCAN");
var SCRIPT_DEBUG = require("../commands/SCRIPT_DEBUG");
var SCRIPT_EXISTS = require("../commands/SCRIPT_EXISTS");
var SCRIPT_FLUSH = require("../commands/SCRIPT_FLUSH");
var SCRIPT_KILL = require("../commands/SCRIPT_KILL");
var SCRIPT_LOAD = require("../commands/SCRIPT_LOAD");
var SHUTDOWN = require("../commands/SHUTDOWN");
var SWAPDB = require("../commands/SWAPDB");
var TIME = require("../commands/TIME");
var UNWATCH = require("../commands/UNWATCH");
var WAIT = require("../commands/WAIT");
exports["default"] = _objectSpread(_objectSpread({}, commands_1["default"]), {}, {
  ACL_CAT: ACL_CAT,
  aclCat: ACL_CAT,
  ACL_DELUSER: ACL_DELUSER,
  aclDelUser: ACL_DELUSER,
  ACL_DRYRUN: ACL_DRYRUN,
  aclDryRun: ACL_DRYRUN,
  ACL_GENPASS: ACL_GENPASS,
  aclGenPass: ACL_GENPASS,
  ACL_GETUSER: ACL_GETUSER,
  aclGetUser: ACL_GETUSER,
  ACL_LIST: ACL_LIST,
  aclList: ACL_LIST,
  ACL_LOAD: ACL_LOAD,
  aclLoad: ACL_LOAD,
  ACL_LOG_RESET: ACL_LOG_RESET,
  aclLogReset: ACL_LOG_RESET,
  ACL_LOG: ACL_LOG,
  aclLog: ACL_LOG,
  ACL_SAVE: ACL_SAVE,
  aclSave: ACL_SAVE,
  ACL_SETUSER: ACL_SETUSER,
  aclSetUser: ACL_SETUSER,
  ACL_USERS: ACL_USERS,
  aclUsers: ACL_USERS,
  ACL_WHOAMI: ACL_WHOAMI,
  aclWhoAmI: ACL_WHOAMI,
  ASKING: ASKING,
  asking: ASKING,
  AUTH: AUTH,
  auth: AUTH,
  BGREWRITEAOF: BGREWRITEAOF,
  bgRewriteAof: BGREWRITEAOF,
  BGSAVE: BGSAVE,
  bgSave: BGSAVE,
  CLIENT_CACHING: CLIENT_CACHING,
  clientCaching: CLIENT_CACHING,
  CLIENT_GETNAME: CLIENT_GETNAME,
  clientGetName: CLIENT_GETNAME,
  CLIENT_GETREDIR: CLIENT_GETREDIR,
  clientGetRedir: CLIENT_GETREDIR,
  CLIENT_ID: CLIENT_ID,
  clientId: CLIENT_ID,
  CLIENT_KILL: CLIENT_KILL,
  clientKill: CLIENT_KILL,
  'CLIENT_NO-EVICT': CLIENT_NO_EVICT,
  clientNoEvict: CLIENT_NO_EVICT,
  CLIENT_LIST: CLIENT_LIST,
  clientList: CLIENT_LIST,
  CLIENT_PAUSE: CLIENT_PAUSE,
  clientPause: CLIENT_PAUSE,
  CLIENT_SETNAME: CLIENT_SETNAME,
  clientSetName: CLIENT_SETNAME,
  CLIENT_TRACKING: CLIENT_TRACKING,
  clientTracking: CLIENT_TRACKING,
  CLIENT_TRACKINGINFO: CLIENT_TRACKINGINFO,
  clientTrackingInfo: CLIENT_TRACKINGINFO,
  CLIENT_UNPAUSE: CLIENT_UNPAUSE,
  clientUnpause: CLIENT_UNPAUSE,
  CLIENT_INFO: CLIENT_INFO,
  clientInfo: CLIENT_INFO,
  CLUSTER_ADDSLOTS: CLUSTER_ADDSLOTS,
  clusterAddSlots: CLUSTER_ADDSLOTS,
  CLUSTER_ADDSLOTSRANGE: CLUSTER_ADDSLOTSRANGE,
  clusterAddSlotsRange: CLUSTER_ADDSLOTSRANGE,
  CLUSTER_BUMPEPOCH: CLUSTER_BUMPEPOCH,
  clusterBumpEpoch: CLUSTER_BUMPEPOCH,
  CLUSTER_COUNT_FAILURE_REPORTS: CLUSTER_COUNT_FAILURE_REPORTS,
  clusterCountFailureReports: CLUSTER_COUNT_FAILURE_REPORTS,
  CLUSTER_COUNTKEYSINSLOT: CLUSTER_COUNTKEYSINSLOT,
  clusterCountKeysInSlot: CLUSTER_COUNTKEYSINSLOT,
  CLUSTER_DELSLOTS: CLUSTER_DELSLOTS,
  clusterDelSlots: CLUSTER_DELSLOTS,
  CLUSTER_DELSLOTSRANGE: CLUSTER_DELSLOTSRANGE,
  clusterDelSlotsRange: CLUSTER_DELSLOTSRANGE,
  CLUSTER_FAILOVER: CLUSTER_FAILOVER,
  clusterFailover: CLUSTER_FAILOVER,
  CLUSTER_FLUSHSLOTS: CLUSTER_FLUSHSLOTS,
  clusterFlushSlots: CLUSTER_FLUSHSLOTS,
  CLUSTER_FORGET: CLUSTER_FORGET,
  clusterForget: CLUSTER_FORGET,
  CLUSTER_GETKEYSINSLOT: CLUSTER_GETKEYSINSLOT,
  clusterGetKeysInSlot: CLUSTER_GETKEYSINSLOT,
  CLUSTER_INFO: CLUSTER_INFO,
  clusterInfo: CLUSTER_INFO,
  CLUSTER_KEYSLOT: CLUSTER_KEYSLOT,
  clusterKeySlot: CLUSTER_KEYSLOT,
  CLUSTER_LINKS: CLUSTER_LINKS,
  clusterLinks: CLUSTER_LINKS,
  CLUSTER_MEET: CLUSTER_MEET,
  clusterMeet: CLUSTER_MEET,
  CLUSTER_MYID: CLUSTER_MYID,
  clusterMyId: CLUSTER_MYID,
  CLUSTER_NODES: CLUSTER_NODES,
  clusterNodes: CLUSTER_NODES,
  CLUSTER_REPLICAS: CLUSTER_REPLICAS,
  clusterReplicas: CLUSTER_REPLICAS,
  CLUSTER_REPLICATE: CLUSTER_REPLICATE,
  clusterReplicate: CLUSTER_REPLICATE,
  CLUSTER_RESET: CLUSTER_RESET,
  clusterReset: CLUSTER_RESET,
  CLUSTER_SAVECONFIG: CLUSTER_SAVECONFIG,
  clusterSaveConfig: CLUSTER_SAVECONFIG,
  CLUSTER_SET_CONFIG_EPOCH: CLUSTER_SET_CONFIG_EPOCH,
  clusterSetConfigEpoch: CLUSTER_SET_CONFIG_EPOCH,
  CLUSTER_SETSLOT: CLUSTER_SETSLOT,
  clusterSetSlot: CLUSTER_SETSLOT,
  CLUSTER_SLOTS: CLUSTER_SLOTS,
  clusterSlots: CLUSTER_SLOTS,
  COMMAND_COUNT: COMMAND_COUNT,
  commandCount: COMMAND_COUNT,
  COMMAND_GETKEYS: COMMAND_GETKEYS,
  commandGetKeys: COMMAND_GETKEYS,
  COMMAND_GETKEYSANDFLAGS: COMMAND_GETKEYSANDFLAGS,
  commandGetKeysAndFlags: COMMAND_GETKEYSANDFLAGS,
  COMMAND_INFO: COMMAND_INFO,
  commandInfo: COMMAND_INFO,
  COMMAND_LIST: COMMAND_LIST,
  commandList: COMMAND_LIST,
  COMMAND: COMMAND,
  command: COMMAND,
  CONFIG_GET: CONFIG_GET,
  configGet: CONFIG_GET,
  CONFIG_RESETASTAT: CONFIG_RESETASTAT,
  configResetStat: CONFIG_RESETASTAT,
  CONFIG_REWRITE: CONFIG_REWRITE,
  configRewrite: CONFIG_REWRITE,
  CONFIG_SET: CONFIG_SET,
  configSet: CONFIG_SET,
  DBSIZE: DBSIZE,
  dbSize: DBSIZE,
  DISCARD: DISCARD,
  discard: DISCARD,
  ECHO: ECHO,
  echo: ECHO,
  FAILOVER: FAILOVER,
  failover: FAILOVER,
  FLUSHALL: FLUSHALL,
  flushAll: FLUSHALL,
  FLUSHDB: FLUSHDB,
  flushDb: FLUSHDB,
  FUNCTION_DELETE: FUNCTION_DELETE,
  functionDelete: FUNCTION_DELETE,
  FUNCTION_DUMP: FUNCTION_DUMP,
  functionDump: FUNCTION_DUMP,
  FUNCTION_FLUSH: FUNCTION_FLUSH,
  functionFlush: FUNCTION_FLUSH,
  FUNCTION_KILL: FUNCTION_KILL,
  functionKill: FUNCTION_KILL,
  FUNCTION_LIST_WITHCODE: FUNCTION_LIST_WITHCODE,
  functionListWithCode: FUNCTION_LIST_WITHCODE,
  FUNCTION_LIST: FUNCTION_LIST,
  functionList: FUNCTION_LIST,
  FUNCTION_LOAD: FUNCTION_LOAD,
  functionLoad: FUNCTION_LOAD,
  FUNCTION_RESTORE: FUNCTION_RESTORE,
  functionRestore: FUNCTION_RESTORE,
  FUNCTION_STATS: FUNCTION_STATS,
  functionStats: FUNCTION_STATS,
  HELLO: HELLO,
  hello: HELLO,
  INFO: INFO,
  info: INFO,
  KEYS: KEYS,
  keys: KEYS,
  LASTSAVE: LASTSAVE,
  lastSave: LASTSAVE,
  LATENCY_DOCTOR: LATENCY_DOCTOR,
  latencyDoctor: LATENCY_DOCTOR,
  LATENCY_GRAPH: LATENCY_GRAPH,
  latencyGraph: LATENCY_GRAPH,
  LATENCY_LATEST: LATENCY_LATEST,
  latencyLatest: LATENCY_LATEST,
  LOLWUT: LOLWUT,
  lolwut: LOLWUT,
  MEMORY_DOCTOR: MEMORY_DOCTOR,
  memoryDoctor: MEMORY_DOCTOR,
  'MEMORY_MALLOC-STATS': MEMORY_MALLOC_STATS,
  memoryMallocStats: MEMORY_MALLOC_STATS,
  MEMORY_PURGE: MEMORY_PURGE,
  memoryPurge: MEMORY_PURGE,
  MEMORY_STATS: MEMORY_STATS,
  memoryStats: MEMORY_STATS,
  MEMORY_USAGE: MEMORY_USAGE,
  memoryUsage: MEMORY_USAGE,
  MODULE_LIST: MODULE_LIST,
  moduleList: MODULE_LIST,
  MODULE_LOAD: MODULE_LOAD,
  moduleLoad: MODULE_LOAD,
  MODULE_UNLOAD: MODULE_UNLOAD,
  moduleUnload: MODULE_UNLOAD,
  MOVE: MOVE,
  move: MOVE,
  PING: PING,
  ping: PING,
  PUBSUB_CHANNELS: PUBSUB_CHANNELS,
  pubSubChannels: PUBSUB_CHANNELS,
  PUBSUB_NUMPAT: PUBSUB_NUMPAT,
  pubSubNumPat: PUBSUB_NUMPAT,
  PUBSUB_NUMSUB: PUBSUB_NUMSUB,
  pubSubNumSub: PUBSUB_NUMSUB,
  PUBSUB_SHARDCHANNELS: PUBSUB_SHARDCHANNELS,
  pubSubShardChannels: PUBSUB_SHARDCHANNELS,
  RANDOMKEY: RANDOMKEY,
  randomKey: RANDOMKEY,
  READONLY: READONLY,
  readonly: READONLY,
  READWRITE: READWRITE,
  readwrite: READWRITE,
  REPLICAOF: REPLICAOF,
  replicaOf: REPLICAOF,
  'RESTORE-ASKING': RESTORE_ASKING,
  restoreAsking: RESTORE_ASKING,
  ROLE: ROLE,
  role: ROLE,
  SAVE: SAVE,
  save: SAVE,
  SCAN: SCAN,
  scan: SCAN,
  SCRIPT_DEBUG: SCRIPT_DEBUG,
  scriptDebug: SCRIPT_DEBUG,
  SCRIPT_EXISTS: SCRIPT_EXISTS,
  scriptExists: SCRIPT_EXISTS,
  SCRIPT_FLUSH: SCRIPT_FLUSH,
  scriptFlush: SCRIPT_FLUSH,
  SCRIPT_KILL: SCRIPT_KILL,
  scriptKill: SCRIPT_KILL,
  SCRIPT_LOAD: SCRIPT_LOAD,
  scriptLoad: SCRIPT_LOAD,
  SHUTDOWN: SHUTDOWN,
  shutdown: SHUTDOWN,
  SWAPDB: SWAPDB,
  swapDb: SWAPDB,
  TIME: TIME,
  time: TIME,
  UNWATCH: UNWATCH,
  unwatch: UNWATCH,
  WAIT: WAIT,
  wait: WAIT
});