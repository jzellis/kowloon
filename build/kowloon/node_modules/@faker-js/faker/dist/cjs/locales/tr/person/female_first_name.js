"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var i = Object.defineProperty;
var y = Object.getOwnPropertyDescriptor;
var m = Object.getOwnPropertyNames;
var d = Object.prototype.hasOwnProperty;
var s = function s(a, e) {
    for (var n in e) i(a, n, {
      get: e[n],
      enumerable: !0
    });
  },
  u = function u(a, e, n, r) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(m(e)),
        _step;
      try {
        var _loop = function _loop() {
          var l = _step.value;
          !d.call(a, l) && l !== n && i(a, l, {
            get: function get() {
              return e[l];
            },
            enumerable: !(r = y(e, l)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var z = function z(a) {
  return u(i({}, "__esModule", {
    value: !0
  }), a);
};
var G = {};
s(G, {
  "default": function _default() {
    return k;
  }
});
module.exports = z(G);
var k = ["Abendam", "A\xE7ela", "A\xE7elya", "A\xE7\u0131lay", "Adel", "Adelya", "Adile", "Afitap", "Afra", "A\u011F\xE7a", "Ahenk", "Ahlem", "Alisa", "Almila", "Alvina", "Amelya", "Amara", "Anda\xE7", "Anar", "Anise", "Anita", "Anka", "Alpike", "Alt\u0131n", "Ar\u0131n", "Arya", "Asuela", "Asl\u0131m", "Ayren", "Aykal", "Aysar", "Ay\u015F\u0131l", "Bade", "Ba\u011Fdag\xFCl", "Bal\u0131n", "Bediz", "Bedran", "Behrem", "Bel\xE7im", "Belma", "Beltun", "Belemir", "Benice", "Benli", "Berceste", "Ber\xE7in", "Berinay", "Berran", "Berre", "Berva", "Besra", "\xC7a\u011F\u0131l", "Cang\xFCl", "Cannur", "Cansel", "Cans\u0131n", "Canel", "Ceren", "Ceyda", "Cilvenaz", "Ceylinaz", "Ceylin", "Ceyla", "Ceylan", "\xC7a\u011Fla", "\xC7e\u015Fminaz", "\xC7\u0131g\u0131l", "\xC7i\xE7ek", "\xC7ilay", "\xC7iler", "\xC7imen", "\xC7ise", "\xC7i\u015Fem", "\xC7isil", "Damla", "Defne", "Demet", "Deniz", "Derya", "Destan", "Deste", "Didem", "Dilan", "Dilara", "Dilay", "Diler", "Dilhan", "Dilek", "Dilruba", "D\xF6nd\xFC", "Duygu", "D\xFCnya", "D\xFCrdane", "D\xFCrriye", "Dicle", "Dolunay", "Derin", "Diclehan", "Dilberay", "Ebru", "Ece", "Eda", "Ekin", "Ela", "El\xE7in", "Elif", "Elmas", "Elvan", "Emel", "Emine", "Enise", "Esen", "Eser", "Esin", "Esmeray", "Eyl\xFCl", "Ev\u015Fen", "Eftalya", "Ecem", "Ey\u015Fan", "Fadime", "Fahriye", "Fahr\xFCnissa", "Fatma", "Fato\u015F", "Fazilet", "Fehime", "Ferah", "Feray", "Ferda", "Feride", "Feriha", "Feyza", "Fidan", "Figen", "Fikriye", "Filiz", "Firdevs", "Fulya", "Fuldem", "Fulden", "Funda", "F\xFCruzan", "F\xFCsun", "F\xFCreyya", "Gamze", "Gaye", "Gizem", "Gonca", "G\xF6kben", "G\xF6k\xE7e", "G\xF6k\u015Fin", "G\xF6n\xFCl", "G\xF6zde", "G\xFCher", "G\xFCl", "G\xFClbahar", "G\xFClben", "G\xFCl\xE7in", "G\xFCldem", "G\xFClden", "G\xFCldeste", "G\xFClen", "G\xFCl\u015Fen", "G\xFClg\xFCn", "G\xFClnaz", "G\xFClpembe", "G\xFClriz", "G\xFClsen", "G\xFCnay", "G\xFCne\u015F", "G\xFCner", "G\xFCng\xF6r", "G\xFCniz", "G\xFCnsel", "G\xFCnseli", "G\xFCrcan", "G\xFCven", "G\xF6knur", "G\xFCnnur", "Hale", "Handan", "Hande", "Hayal", "Hayat", "Hazan", "Hilal", "H\xFClya", "H\xFCmeyra", "H\xFCner", "Ilg\u0131n", "I\u015F\u0131k", "I\u015F\u0131l", "I\u015F\u0131lay", "I\u015F\u0131n", "It\u0131r", "\u0130clal", "\u0130dil", "\u0130ffet", "\u0130kbal", "\u0130layda", "\u0130lkben", "\u0130lke", "\u0130lknur", "\u0130lksen", "\u0130lkyaz", "\u0130mge", "\u0130mran", "\u0130nci", "\u0130pek", "\u0130rem", "\u0130zel", "Yaprak", "Yasemin", "Ya\u011Fmur", "Yelda", "Yeliz", "Ye\u015Fim", "Y\u0131ld\u0131z", "Yonca", "Yosun", "Jale", "Julide", "Kader", "Kadriye", "Kamelya", "Kamile", "Kamuran", "Kevser", "Kumru", "K\u0131smet", "K\u0131ymet", "Kiraz", "Lale", "Lamia", "Latife", "Leman", "Lemide", "Lerzan", "Leyla", "Lida", "Mehtap", "Melda", "Melek", "Melike", "Melis", "Melisa", "Melodi", "Meltem", "Meral", "Meri\xE7", "Merih", "Merve", "Meryem", "Mihriban", "Mine", "Miray", "M\xFCesser", "M\xFCnevver", "M\xFCge", "M\xFCjde", "M\xFCjgan", "Mukaddes", "M\u0131sra", "Nalan", "Naz", "Nazan", "Nazl\u0131", "Necla", "Nehir", "Nergis", "Nesli\u015Fah", "Nesrin", "Nevin", "Nevra", "Nida", "Nigar", "Nihal", "Nihan", "Nil", "Nilg\xFCn", "Nisa", "Nisan", "N\xFCkhet", "Nur", "Nural", "Nuran", "Nurg\xFCl", "Nursel", "Nurseli", "Ok\u015Fan", "Olcay", "Oya", "\xD6yk\xFC", "\xD6zden", "\xD6zge", "\xD6zlem", "\xD6zlen", "\xD6znur", "Parla", "Pakize", "Pelin", "Pelinsu", "Pembe", "Peri", "Perihan", "Perran", "Pervin", "Petek", "P\u0131nar", "Piraye", "Rabia", "Rahime", "Rah\u015Fan", "Rana", "Rengin", "Reyhan", "Rezzan", "R\xFCya", "Ruhsar", "Sanem", "Se\xE7il", "Seda", "Sedef", "Seden", "Seher", "Selda", "Selen", "Selin", "Selma", "Selvi", "Sema", "Semra", "Senay", "Serap", "Sertap", "Seren", "Serin", "Serpil", "Sevda", "Sevgi", "Sevil", "Sevim", "Sevin\xE7", "Sevtap", "Seval", "S\u0131la", "Sibel", "Simge", "Sinem", "Song\xFCl", "Su", "Sunay", "Suzan", "\u015Eebnem", "\u015Eehrazat", "\u015Eelale", "\u015Eenay", "\u015Eeng\xFCl", "\u015Eennur", "\u015Eermin", "\u015Eeyda", "\u015Eeyma", "\u015Eevval", "\u015Eiir", "\u015Eule", "Tanyeli", "Tezer", "Tu\u011Fba", "Turna", "Tutku", "T\xFClay", "T\xFClin", "T\xFCrkan", "Tunay", "Utku", "Ulus", "Uhra", "Uygu", "Ulviye", "\xDClfet", "\xDClker", "\xDClk\xFC", "\xDCmmiye", "\xDCmran", "\xDCnsel", "\xDCnseli", "Vahide", "Verda", "Vesile", "Vicdan", "Vildan", "Vuslat", "Zahide", "Zehra", "Zekiye", "Zerrin", "Zeynep", "Z\xFCbeyde", "Z\xFChal", "Z\xFClal", "Z\xFCleyha", "Zeliha", "Z\xFCmr\xFCt"];