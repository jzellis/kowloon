"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var P = Object.create;
var R = Object.defineProperty;
var _ = Object.getOwnPropertyDescriptor;
var $ = Object.getOwnPropertyNames;
var j = Object.getPrototypeOf,
  M = Object.prototype.hasOwnProperty;
var q = function q(u, e) {
    for (var t in e) R(u, t, {
      get: e[t],
      enumerable: !0
    });
  },
  C = function C(u, e, t, i) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper($(e)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !M.call(u, n) && n !== t && R(u, n, {
            get: function get() {
              return e[n];
            },
            enumerable: !(i = _(e, n)) || i.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return u;
  };
var O = function O(u, e, t) {
    return t = u != null ? P(j(u)) : {}, C(e || !u || !u.__esModule ? R(t, "default", {
      value: u,
      enumerable: !0
    }) : t, u);
  },
  L = function L(u) {
    return C(R({}, "__esModule", {
      value: !0
    }), u);
  };
var D = {};
q(D, {
  HelpersModule: function HelpersModule() {
    return A;
  }
});
module.exports = L(D);
var f = require("../../errors/faker-error"),
  S = require("../../internal/deprecated"),
  I = require("./luhn-check"),
  F = O(require("./unique"));
function N(u, e, t, i) {
  var n = 1;
  if (e) switch (e) {
    case "?":
      {
        n = u.datatype["boolean"]() ? 0 : 1;
        break;
      }
    case "*":
      {
        var r = 1;
        for (; u.datatype["boolean"]();) r *= 2;
        n = u.number["int"]({
          min: 0,
          max: r
        });
        break;
      }
    case "+":
      {
        var _r = 1;
        for (; u.datatype["boolean"]();) _r *= 2;
        n = u.number["int"]({
          min: 1,
          max: _r
        });
        break;
      }
    default:
      throw new f.FakerError("Unknown quantifier symbol provided.");
  } else t != null && i != null ? n = u.number["int"]({
    min: parseInt(t),
    max: parseInt(i)
  }) : t != null && i == null && (n = parseInt(t));
  return n;
}
var A = /*#__PURE__*/function () {
  function A(e) {
    _classCallCheck(this, A);
    this.faker = e;
    this.uniqueStore = {};
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(A.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var t = _step2.value;
        t === "constructor" || typeof this[t] != "function" || (this[t] = this[t].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(A, [{
    key: "slugify",
    value: function slugify() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return e.normalize("NFKD").replace(/[\u0300-\u036f]/g, "").replace(/ /g, "-").replace(/[^\w\.\-]+/g, "");
    }
  }, {
    key: "replaceSymbolWithNumber",
    value: function replaceSymbolWithNumber() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
      var i = "";
      for (var n = 0; n < e.length; n++) e.charAt(n) === t ? i += this.faker.number["int"](9) : e.charAt(n) === "!" ? i += this.faker.number["int"]({
        min: 2,
        max: 9
      }) : i += e.charAt(n);
      return i;
    }
  }, {
    key: "replaceSymbols",
    value: function replaceSymbols() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var t = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
      var i = "";
      for (var n = 0; n < e.length; n++) e.charAt(n) === "#" ? i += this.faker.number["int"](9) : e.charAt(n) === "?" ? i += this.arrayElement(t) : e.charAt(n) === "*" ? i += this.faker.datatype["boolean"]() ? this.arrayElement(t) : this.faker.number["int"](9) : i += e.charAt(n);
      return i;
    }
  }, {
    key: "replaceCreditCardSymbols",
    value: function replaceCreditCardSymbols() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "6453-####-####-####-###L";
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
      e = this.regexpStyleStringParse(e), e = this.replaceSymbolWithNumber(e, t);
      var i = (0, I.luhnCheckValue)(e);
      return e.replace("L", String(i));
    }
  }, {
    key: "regexpStyleStringParse",
    value: function regexpStyleStringParse() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var t = /(.)\{(\d+)\,(\d+)\}/,
        i = /(.)\{(\d+)\}/,
        n = /\[(\d+)\-(\d+)\]/;
      var r,
        l,
        s,
        m,
        o = t.exec(e);
      for (; o != null;) r = parseInt(o[2]), l = parseInt(o[3]), r > l && (s = l, l = r, r = s), m = this.faker.number["int"]({
        min: r,
        max: l
      }), e = e.slice(0, o.index) + o[1].repeat(m) + e.slice(o.index + o[0].length), o = t.exec(e);
      for (o = i.exec(e); o != null;) m = parseInt(o[2]), e = e.slice(0, o.index) + o[1].repeat(m) + e.slice(o.index + o[0].length), o = i.exec(e);
      for (o = n.exec(e); o != null;) r = parseInt(o[1]), l = parseInt(o[2]), r > l && (s = l, l = r, r = s), e = e.slice(0, o.index) + this.faker.number["int"]({
        min: r,
        max: l
      }).toString() + e.slice(o.index + o[0].length), o = n.exec(e);
      return e;
    }
  }, {
    key: "fromRegExp",
    value: function fromRegExp(e) {
      var _this = this;
      var g, k;
      var t = !1;
      e instanceof RegExp && (t = e.flags.includes("i"), e = e.toString(), e = (k = (g = e.match(/\/(.+?)\//)) == null ? void 0 : g[1]) != null ? k : "");
      var i, n, r;
      var l = /([.A-Za-z0-9])(?:\{(\d+)(?:\,(\d+)|)\}|(\?|\*|\+))(?![^[]*]|[^{]*})/;
      var s = e.match(l);
      for (; s != null;) {
        var w = s[2],
          T = s[3],
          b = s[4];
        r = N(this.faker, b, w, T), e = e.slice(0, s.index) + s[1].repeat(r) + e.slice(s.index + s[0].length), s = e.match(l);
      }
      var m = /(\d-\d|\w-\w|\d|\w|[-!@#$&()`.+,/"])/,
        o = /\[(\^|)(-|)(.+?)\](?:\{(\d+)(?:\,(\d+)|)\}|(\?|\*|\+)|)/;
      var _loop2 = function _loop2() {
        var w = s[1] === "^",
          T = s[2] === "-",
          b = s[4],
          K = s[5],
          G = s[6],
          c = [];
        var x = s[3],
          y = x.match(m);
        for (T && c.push(45); y != null;) {
          if (y[0].indexOf("-") === -1) t && isNaN(Number(y[0])) ? (c.push(y[0].toUpperCase().charCodeAt(0)), c.push(y[0].toLowerCase().charCodeAt(0))) : c.push(y[0].charCodeAt(0));else {
            var h = y[0].split("-").map(function (a) {
              return a.charCodeAt(0);
            });
            if (i = h[0], n = h[1], i > n) throw new f.FakerError("Character range provided is out of order.");
            for (var a = i; a <= n; a++) if (t && isNaN(Number(String.fromCharCode(a)))) {
              var E = String.fromCharCode(a);
              c.push(E.toUpperCase().charCodeAt(0)), c.push(E.toLowerCase().charCodeAt(0));
            } else c.push(a);
          }
          x = x.substring(y[0].length), y = x.match(m);
        }
        if (r = N(_this.faker, G, b, K), w) {
          var _h = -1;
          for (var _a = 48; _a <= 57; _a++) {
            if (_h = c.indexOf(_a), _h > -1) {
              c.splice(_h, 1);
              continue;
            }
            c.push(_a);
          }
          for (var _a2 = 65; _a2 <= 90; _a2++) {
            if (_h = c.indexOf(_a2), _h > -1) {
              c.splice(_h, 1);
              continue;
            }
            c.push(_a2);
          }
          for (var _a3 = 97; _a3 <= 122; _a3++) {
            if (_h = c.indexOf(_a3), _h > -1) {
              c.splice(_h, 1);
              continue;
            }
            c.push(_a3);
          }
        }
        var v = _this.multiple(function () {
          return String.fromCharCode(_this.arrayElement(c));
        }, {
          count: r
        }).join("");
        e = e.slice(0, s.index) + v + e.slice(s.index + s[0].length), s = e.match(o);
      };
      for (s = e.match(o); s != null;) {
        _loop2();
      }
      var d = /(.)\{(\d+)\,(\d+)\}/;
      for (s = e.match(d); s != null;) {
        if (i = parseInt(s[2]), n = parseInt(s[3]), i > n) throw new f.FakerError("Numbers out of order in {} quantifier.");
        r = this.faker.number["int"]({
          min: i,
          max: n
        }), e = e.slice(0, s.index) + s[1].repeat(r) + e.slice(s.index + s[0].length), s = e.match(d);
      }
      var p = /(.)\{(\d+)\}/;
      for (s = e.match(p); s != null;) r = parseInt(s[2]), e = e.slice(0, s.index) + s[1].repeat(r) + e.slice(s.index + s[0].length), s = e.match(p);
      return e;
    }
  }, {
    key: "shuffle",
    value: function shuffle(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _t$inplace = t.inplace,
        i = _t$inplace === void 0 ? !1 : _t$inplace;
      i || (e = _toConsumableArray(e));
      for (var n = e.length - 1; n > 0; --n) {
        var r = this.faker.number["int"](n);
        var _ref = [e[r], e[n]];
        e[n] = _ref[0];
        e[r] = _ref[1];
      }
      return e;
    }
  }, {
    key: "uniqueArray",
    value: function uniqueArray(e, t) {
      if (Array.isArray(e)) {
        var n = new Set(e),
          r = Array.from(n);
        return this.shuffle(r).splice(0, t);
      }
      var i = new Set();
      try {
        if (typeof e == "function") for (; i.size < t;) i.add(e());
      } catch (_unused) {}
      return Array.from(i);
    }
  }, {
    key: "mustache",
    value: function mustache(e, t) {
      if (e == null) return "";
      for (var i in t) {
        var n = new RegExp("{{".concat(i, "}}"), "g");
        var r = t[i];
        typeof r == "string" && (r = r.replace(/\$/g, "$$$$")), e = e.replace(n, r);
      }
      return e;
    }
  }, {
    key: "maybe",
    value: function maybe(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.faker.datatype["boolean"](t)) return e();
    }
  }, {
    key: "objectKey",
    value: function objectKey(e) {
      var t = Object.keys(e);
      return this.arrayElement(t);
    }
  }, {
    key: "objectValue",
    value: function objectValue(e) {
      var t = this.faker.helpers.objectKey(e);
      return e[t];
    }
  }, {
    key: "objectEntry",
    value: function objectEntry(e) {
      var t = this.faker.helpers.objectKey(e);
      return [t, e[t]];
    }
  }, {
    key: "arrayElement",
    value: function arrayElement(e) {
      if (e == null) throw new f.FakerError("Calling `faker.helpers.arrayElement()` without arguments is no longer supported.");
      if (e.length === 0) throw new f.FakerError("Cannot get value from empty dataset.");
      var t = e.length > 1 ? this.faker.number["int"]({
        max: e.length - 1
      }) : 0;
      return e[t];
    }
  }, {
    key: "weightedArrayElement",
    value: function weightedArrayElement(e) {
      if (e.length === 0) throw new f.FakerError("weightedArrayElement expects an array with at least one element");
      if (!e.every(function (r) {
        return r.weight > 0;
      })) throw new f.FakerError("weightedArrayElement expects an array of { weight, value } objects where weight is a positive number");
      var t = e.reduce(function (r, _ref2) {
          var l = _ref2.weight;
          return r + l;
        }, 0),
        i = this.faker.number["float"]({
          min: 0,
          max: t,
          precision: 1e-9
        });
      var n = 0;
      var _iterator3 = _createForOfIteratorHelper(e),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _step3.value,
            r = _step3$value.weight,
            l = _step3$value.value;
          if (n += r, i < n) return l;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return e[e.length - 1].value;
    }
  }, {
    key: "arrayElements",
    value: function arrayElements(e, t) {
      if (e == null) throw new f.FakerError("Calling `faker.helpers.arrayElements()` without arguments is no longer supported.");
      if (e.length === 0) return [];
      var i = this.rangeToNumber(t != null ? t : {
        min: 1,
        max: e.length
      });
      if (i >= e.length) return this.shuffle(e);
      if (i <= 0) return [];
      var n = e.slice(0);
      var r = e.length;
      var l = r - i;
      var s, m;
      for (; r-- > l;) m = this.faker.number["int"](r), s = n[m], n[m] = n[r], n[r] = s;
      return n.slice(l);
    }
  }, {
    key: "enumValue",
    value: function enumValue(e) {
      var t = Object.keys(e).filter(function (n) {
          return isNaN(Number(n));
        }),
        i = this.arrayElement(t);
      return e[i];
    }
  }, {
    key: "fake",
    value: function fake(e) {
      var _this2 = this;
      e = typeof e == "string" ? e : this.arrayElement(e);
      var t = e.search(/{{[a-z]/),
        i = e.indexOf("}}", t);
      if (t === -1 || i === -1) return e;
      var r = e.substring(t + 2, i + 2).replace("}}", "").replace("{{", "");
      var l = /\(([^)]*)\)/,
        s = l.exec(r);
      var m = "";
      s && (r = r.replace(l, ""), m = s[1]);
      var o = r.split(".");
      var d = this.faker,
        p = this.faker.rawDefinitions;
      var _iterator4 = _createForOfIteratorHelper(o),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var b = _step4.value;
          d = d == null ? void 0 : d[b], p = p == null ? void 0 : p[b];
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      var g;
      if (typeof d == "function") g = d;else if (Array.isArray(p)) g = function g() {
        return _this2.faker.helpers.arrayElement(p);
      };else throw new f.FakerError("Invalid module method or definition: ".concat(r, "\n- faker.").concat(r, " is not a function\n- faker.definitions.").concat(r, " is not an array"));
      g = g.bind(this);
      var k;
      try {
        k = JSON.parse("[".concat(m, "]"));
      } catch (_unused2) {
        k = [m];
      }
      var w = String(g.apply(void 0, _toConsumableArray(k))),
        T = e.substring(0, t) + w + e.substring(i + 2);
      return this.fake(T);
    }
  }, {
    key: "rangeToNumber",
    value: function rangeToNumber(e) {
      return typeof e == "number" ? e : this.faker.number["int"](e);
    }
  }, {
    key: "unique",
    value: function unique(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      (0, S.deprecated)({
        deprecated: "faker.helpers.unique",
        proposed: "https://github.com/faker-js/faker/issues/1785#issuecomment-1407773744",
        since: "8.0",
        until: "9.0"
      });
      var _i$maxTime = i.maxTime,
        n = _i$maxTime === void 0 ? 50 : _i$maxTime,
        _i$maxRetries = i.maxRetries,
        r = _i$maxRetries === void 0 ? 50 : _i$maxRetries,
        _i$exclude = i.exclude,
        l = _i$exclude === void 0 ? [] : _i$exclude,
        _i$store = i.store,
        s = _i$store === void 0 ? this.uniqueStore : _i$store;
      return F.exec(e, t, _objectSpread(_objectSpread({}, i), {}, {
        startTime: new Date().getTime(),
        maxTime: n,
        maxRetries: r,
        currentIterations: 0,
        exclude: l,
        store: s
      }));
    }
  }, {
    key: "multiple",
    value: function multiple(e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var n;
      var i = this.rangeToNumber((n = t.count) != null ? n : 3);
      return i <= 0 ? [] : Array.from({
        length: i
      }, e);
    }
  }]);
  return A;
}();
0 && (module.exports = {
  HelpersModule: HelpersModule
});