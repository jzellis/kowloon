"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var t = Object.defineProperty;
var h = Object.getOwnPropertyDescriptor;
var l = Object.getOwnPropertyNames;
var c = Object.prototype.hasOwnProperty;
var S = function S(r, e) {
    for (var i in e) t(r, i, {
      get: e[i],
      enumerable: !0
    });
  },
  s = function s(r, e, i, a) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(l(e)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !c.call(r, n) && n !== i && t(r, n, {
            get: function get() {
              return e[n];
            },
            enumerable: !(a = h(e, n)) || a.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return r;
  };
var g = function g(r) {
  return s(t({}, "__esModule", {
    value: !0
  }), r);
};
var o = {};
S(o, {
  "default": function _default() {
    return u;
  }
});
module.exports = g(o);
var u = ["Ackermann", "Aebi", "Albrecht", "Ammann", "Amrein", "Arnold", "Bachmann", "Bader", "B\xE4r", "B\xE4ttig", "Bauer", "Baumann", "Baumgartner", "Baur", "Beck", "Benz", "Berger", "Bernasconi", "Betschart", "Bianchi", "Bieri", "Blaser", "Blum", "Bolliger", "Bosshard", "Braun", "Brun", "Brunner", "Bucher", "B\xFChler", "B\xFChlmann", "Burri", "Christen", "Egger", "Egli", "Eichenberger", "Erni", "Ernst", "Eugster", "Fankhauser", "Favre", "Fehr", "Felber", "Felder", "Ferrari", "Fischer", "Fl\xFCckiger", "Forster", "Frei", "Frey", "Frick", "Friedli", "Fuchs", "Furrer", "Gasser", "Geiger", "Gerber", "Gfeller", "Giger", "Gloor", "Graf", "Grob", "Gross", "Gut", "Haas", "H\xE4fliger", "Hafner", "Hartmann", "Hasler", "Hauser", "Hermann", "Herzog", "Hess", "Hirt", "Hodel", "Hofer", "Hoffmann", "Hofmann", "Hofstetter", "Hotz", "Huber", "Hug", "Hunziker", "H\xFCrlimann", "Imhof", "Isler", "Iten", "J\xE4ggi", "Jenni", "Jost", "K\xE4gi", "Kaiser", "K\xE4lin", "K\xE4ser", "Kaufmann", "Keller", "Kern", "Kessler", "Knecht", "Koch", "Kohler", "Kuhn", "K\xFCng", "Kunz", "Lang", "Lanz", "Lehmann", "Leu", "Leunberger", "L\xFCscher", "Lustenberger", "L\xFCthi", "Lutz", "M\xE4der", "Maier", "Marti", "Martin", "Maurer", "Mayer", "Meier", "Meili", "Meister", "Merz", "Mettler", "Meyer", "Michel", "Moser", "M\xFCller", "N\xE4f", "Ott", "Peter", "Pfister", "Portmann", "Probst", "Rey", "Ritter", "Roos", "Roth", "R\xFCegg", "Sch\xE4fer", "Schaller", "Sch\xE4r", "Sch\xE4rer", "Schaub", "Scheidegger", "Schenk", "Scherrer", "Schlatter", "Schmid", "Schmidt", "Schneider", "Schnyder", "Schoch", "Schuler", "Schumacher", "Sch\xFCrch", "Schwab", "Schwarz", "Schweizer", "Seiler", "Senn", "Sidler", "Siegrist", "Sigrist", "Sp\xF6rri", "Stadelmann", "Stalder", "Staub", "Stauffer", "Steffen", "Steiger", "Steiner", "Steinmann", "Stettler", "Stocker", "St\xF6ckli", "Stucki", "Studer", "Stutz", "Suter", "Sutter", "Tanner", "Thommen", "Tobler", "Vogel", "Vogt", "Wagner", "Walder", "Walter", "Weber", "Wegmann", "Wehrli", "Weibel", "Wenger", "Wettstein", "Widmer", "Winkler", "Wirth", "Wirz", "Wolf", "W\xFCthrich", "Wyss", "Zbinden", "Zehnder", "Ziegler", "Zimmermann", "Zingg", "Zollinger", "Z\xFCrcher"];