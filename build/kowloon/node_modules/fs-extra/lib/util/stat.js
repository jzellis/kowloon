'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var fs = require('../fs');
var path = require('path');
var util = require('util');
var atLeastNode = require('at-least-node');
var nodeSupportsBigInt = atLeastNode('10.5.0');
var stat = function stat(file) {
  return nodeSupportsBigInt ? fs.stat(file, {
    bigint: true
  }) : fs.stat(file);
};
var statSync = function statSync(file) {
  return nodeSupportsBigInt ? fs.statSync(file, {
    bigint: true
  }) : fs.statSync(file);
};
function getStats(src, dest) {
  return Promise.all([stat(src), stat(dest)["catch"](function (err) {
    if (err.code === 'ENOENT') return null;
    throw err;
  })]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      srcStat = _ref2[0],
      destStat = _ref2[1];
    return {
      srcStat: srcStat,
      destStat: destStat
    };
  });
}
function getStatsSync(src, dest) {
  var destStat;
  var srcStat = statSync(src);
  try {
    destStat = statSync(dest);
  } catch (err) {
    if (err.code === 'ENOENT') return {
      srcStat: srcStat,
      destStat: null
    };
    throw err;
  }
  return {
    srcStat: srcStat,
    destStat: destStat
  };
}
function checkPaths(src, dest, funcName, cb) {
  util.callbackify(getStats)(src, dest, function (err, stats) {
    if (err) return cb(err);
    var srcStat = stats.srcStat,
      destStat = stats.destStat;
    if (destStat && areIdentical(srcStat, destStat)) {
      return cb(new Error('Source and destination must not be the same.'));
    }
    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
      return cb(new Error(errMsg(src, dest, funcName)));
    }
    return cb(null, {
      srcStat: srcStat,
      destStat: destStat
    });
  });
}
function checkPathsSync(src, dest, funcName) {
  var _getStatsSync = getStatsSync(src, dest),
    srcStat = _getStatsSync.srcStat,
    destStat = _getStatsSync.destStat;
  if (destStat && areIdentical(srcStat, destStat)) {
    throw new Error('Source and destination must not be the same.');
  }
  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
    throw new Error(errMsg(src, dest, funcName));
  }
  return {
    srcStat: srcStat,
    destStat: destStat
  };
}

// recursively check if dest parent is a subdirectory of src.
// It works for all file types including symlinks since it
// checks the src and dest inodes. It starts from the deepest
// parent and stops once it reaches the src parent or the root path.
function checkParentPaths(src, srcStat, dest, funcName, cb) {
  var srcParent = path.resolve(path.dirname(src));
  var destParent = path.resolve(path.dirname(dest));
  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();
  var callback = function callback(err, destStat) {
    if (err) {
      if (err.code === 'ENOENT') return cb();
      return cb(err);
    }
    if (areIdentical(srcStat, destStat)) {
      return cb(new Error(errMsg(src, dest, funcName)));
    }
    return checkParentPaths(src, srcStat, destParent, funcName, cb);
  };
  if (nodeSupportsBigInt) fs.stat(destParent, {
    bigint: true
  }, callback);else fs.stat(destParent, callback);
}
function checkParentPathsSync(src, srcStat, dest, funcName) {
  var srcParent = path.resolve(path.dirname(src));
  var destParent = path.resolve(path.dirname(dest));
  if (destParent === srcParent || destParent === path.parse(destParent).root) return;
  var destStat;
  try {
    destStat = statSync(destParent);
  } catch (err) {
    if (err.code === 'ENOENT') return;
    throw err;
  }
  if (areIdentical(srcStat, destStat)) {
    throw new Error(errMsg(src, dest, funcName));
  }
  return checkParentPathsSync(src, srcStat, destParent, funcName);
}
function areIdentical(srcStat, destStat) {
  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
    if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {
      // definitive answer
      return true;
    }
    // Use additional heuristics if we can't use 'bigint'.
    // Different 'ino' could be represented the same if they are >= Number.MAX_SAFE_INTEGER
    // See issue 657
    if (destStat.size === srcStat.size && destStat.mode === srcStat.mode && destStat.nlink === srcStat.nlink && destStat.atimeMs === srcStat.atimeMs && destStat.mtimeMs === srcStat.mtimeMs && destStat.ctimeMs === srcStat.ctimeMs && destStat.birthtimeMs === srcStat.birthtimeMs) {
      // heuristic answer
      return true;
    }
  }
  return false;
}

// return true if dest is a subdir of src, otherwise false.
// It only checks the path strings.
function isSrcSubdir(src, dest) {
  var srcArr = path.resolve(src).split(path.sep).filter(function (i) {
    return i;
  });
  var destArr = path.resolve(dest).split(path.sep).filter(function (i) {
    return i;
  });
  return srcArr.reduce(function (acc, cur, i) {
    return acc && destArr[i] === cur;
  }, true);
}
function errMsg(src, dest, funcName) {
  return "Cannot ".concat(funcName, " '").concat(src, "' to a subdirectory of itself, '").concat(dest, "'.");
}
module.exports = {
  checkPaths: checkPaths,
  checkPathsSync: checkPathsSync,
  checkParentPaths: checkParentPaths,
  checkParentPathsSync: checkParentPathsSync,
  isSrcSubdir: isSrcSubdir
};