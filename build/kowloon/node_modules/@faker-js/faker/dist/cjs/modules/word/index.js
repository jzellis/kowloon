"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var h = Object.getOwnPropertyDescriptor;
var l = Object.getOwnPropertyNames;
var u = Object.prototype.hasOwnProperty;
var f = function f(n, e) {
    for (var t in e) o(n, t, {
      get: e[t],
      enumerable: !0
    });
  },
  b = function b(n, e, t, i) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(l(e)),
        _step;
      try {
        var _loop = function _loop() {
          var s = _step.value;
          !u.call(n, s) && s !== t && o(n, s, {
            get: function get() {
              return e[s];
            },
            enumerable: !(i = h(e, s)) || i.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return n;
  };
var g = function g(n) {
  return b(o({}, "__esModule", {
    value: !0
  }), n);
};
var c = {};
f(c, {
  WordModule: function WordModule() {
    return a;
  }
});
module.exports = g(c);
var m = require("../../errors/faker-error"),
  r = require("./filterWordListByLength");
var a = /*#__PURE__*/function () {
  function a(e) {
    _classCallCheck(this, a);
    this.faker = e;
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(a.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var t = _step2.value;
        t === "constructor" || typeof this[t] != "function" || (this[t] = this[t].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(a, [{
    key: "adjective",
    value: function adjective() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.adjective
      })));
    }
  }, {
    key: "adverb",
    value: function adverb() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.adverb
      })));
    }
  }, {
    key: "conjunction",
    value: function conjunction() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.conjunction
      })));
    }
  }, {
    key: "interjection",
    value: function interjection() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.interjection
      })));
    }
  }, {
    key: "noun",
    value: function noun() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.noun
      })));
    }
  }, {
    key: "preposition",
    value: function preposition() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.preposition
      })));
    }
  }, {
    key: "verb",
    value: function verb() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = typeof e == "number" ? {
        length: e
      } : e;
      return this.faker.helpers.arrayElement((0, r.filterWordListByLength)(_objectSpread(_objectSpread({}, t), {}, {
        wordList: this.faker.definitions.word.verb
      })));
    }
  }, {
    key: "sample",
    value: function sample() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = this.faker.helpers.shuffle([this.adjective, this.adverb, this.conjunction, this.interjection, this.noun, this.preposition, this.verb]);
      var _iterator3 = _createForOfIteratorHelper(t),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var i = _step3.value;
          try {
            return i(e);
          } catch (_unused) {
            continue;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      throw new m.FakerError("No matching word data available for the current locale");
    }
  }, {
    key: "words",
    value: function words() {
      var _this = this;
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        count: e
      });
      var _e = e,
        _e$count = _e.count,
        t = _e$count === void 0 ? {
          min: 1,
          max: 3
        } : _e$count;
      return this.faker.helpers.multiple(function () {
        return _this.sample();
      }, {
        count: t
      }).join(" ");
    }
  }]);
  return a;
}();
0 && (module.exports = {
  WordModule: WordModule
});