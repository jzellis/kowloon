"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var i = Object.getOwnPropertyDescriptor;
var d = Object.getOwnPropertyNames;
var t = Object.prototype.hasOwnProperty;
var l = function l(e, a) {
    for (var n in a) o(e, n, {
      get: a[n],
      enumerable: !0
    });
  },
  s = function s(e, a, n, c) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(d(a)),
        _step;
      try {
        var _loop = function _loop() {
          var r = _step.value;
          !t.call(e, r) && r !== n && o(e, r, {
            get: function get() {
              return a[r];
            },
            enumerable: !(c = i(a, r)) || c.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return e;
  };
var g = function g(e) {
  return s(o({}, "__esModule", {
    value: !0
  }), e);
};
var m = {};
l(m, {
  "default": function _default() {
    return b;
  }
});
module.exports = g(m);
var b = ["Abacalero", "Abacer\xEDa", "Abacero", "Abacial", "Abaco", "Abacora", "Abacorar", "Abad", "Abada", "Abadejo", "Abadengo", "Abadernar", "Abadesa", "Abad\xED", "Abad\xEDa", "Abadiado", "Abadiato", "Abajadero", "Abajamiento", "Abajar", "Abaje\xF1o", "Abajera", "Abajo", "Abalada", "Abalanzar", "Abalar", "Abalaustrado", "Abaldonadamente", "Abaldonamiento", "Bastonada", "Bastonazo", "Bastoncillo", "Bastonear", "Bastonero", "B\xE1stulo", "Basura", "Basural", "Basurear", "Basurero", "Bata", "Batacazo", "Batahola", "Batal\xE1n", "Batalla", "Batallador", "Batallar", "Batallaroso", "Batallola", "Batall\xF3n", "Batallona", "Batalloso", "Bat\xE1n", "Batanar", "Batanear", "Batanero", "Batanga", "Bataola", "Batata", "Batatazo", "Batato", "Batavia", "B\xE1tavo", "Batayola", "Batazo", "Bate", "Batea", "Bateador", "Bateaguas", "Cenagar", "Cenagoso", "Cenal", "Cenaoscuras", "Ce\xF1ar", "Cenata", "Cenca", "Cencapa", "Cencellada", "Cence\xF1ada", "Cence\xF1o", "Cencero", "Cencerra", "Cencerrada", "Cencerrado", "Cencerrear", "Cencerreo", "Cencerril", "Cencerrillas", "Cencerro", "Cencerr\xF3n", "Cencha", "Cencido", "Cenc\xEDo", "Cencivera", "Cenco", "Cencuate", "Cendal", "Cendal\xED", "C\xE9ndea", "Cendolilla", "Cendra", "Cendrada", "Cendradilla", "Cendrado", "Cendrar", "Cendrazo", "Cenefa", "Cenegar", "Ceneque", "Cenero", "Cenestesia", "Desce\xF1ir", "Descensi\xF3n", "Descenso", "Descentrado", "Descentralizaci\xF3n", "Descentralizador", "Descentralizar", "Descentrar", "Descepar", "Descerar", "Descercado", "Descercador", "Descercar", "Descerco", "Descerebraci\xF3n", "Descerebrado", "Descerebrar", "Descerezar", "Descerrajado", "Descerrajadura", "Descerrajar", "Descerrar", "Descerrumarse", "Descervigamiento", "Descervigar", "Deschapar", "Descharchar", "Deschavetado", "Deschavetarse", "Deschuponar", "Descifrable", "Descifrador", "Desciframiento", "Descifrar", "Descifre", "Descimbramiento", "Descimbrar", "Engarbarse", "Engarberar", "Engarbullar", "Engarce", "Engarfiar", "Engargantadura", "Engargantar", "Engargante", "Engargolado", "Engargolar", "Engaritar", "Engarmarse", "Engarnio", "Engarrafador", "Engarrafar", "Engarrar", "Engarro", "Engarronar", "Engarrotar", "Engarzador", "Engarzadura", "Engarzar", "Engasgarse", "Engastador", "Engastadura", "Engastar", "Engaste", "Ficci\xF3n", "Fice", "Ficha", "Fichaje", "Fichar", "Fichero", "Ficoideo", "Ficticio", "Fidalgo", "Fidecomiso", "Fidedigno", "Fideero", "Fideicomisario", "Fideicomiso", "Fideicomitente", "Fide\xEDsmo", "Fidelidad", "Fidel\xEDsimo", "Fideo", "Fido", "Fiducia", "Geminaci\xF3n", "Geminado", "Geminar", "G\xE9minis", "G\xE9mino", "Gem\xEDparo", "Gemiquear", "Gemiqueo", "Gemir", "Gemolog\xEDa", "Gemol\xF3gico", "Gem\xF3logo", "Gemonias", "Gemoso", "Gemoterapia", "Gen", "Genciana", "Gencian\xE1ceo", "Gencianeo", "Gendarme", "Gendarmer\xEDa", "Genealog\xEDa", "Geneal\xF3gico", "Genealogista", "Genearca", "Gene\xE1tico", "Generable", "Generaci\xF3n", "Generacional", "Generador", "General", "Generala", "Generalato", "Generalidad", "General\xEDsimo", "Incordio", "Incorporaci\xF3n", "Incorporal", "Incorporalmente", "Incorporar", "Incorporeidad", "Incorp\xF3reo", "Incorporo", "Incorrecci\xF3n", "Incorrectamente", "Incorrecto", "Incorregibilidad", "Incorregible", "Incorregiblemente", "Incorrupci\xF3n", "Incorruptamente", "Incorruptibilidad", "Incorruptible", "Incorrupto", "Incrasar", "Increado", "Incredibilidad", "Incr\xE9dulamente", "Incredulidad", "Incr\xE9dulo", "Incre\xEDble", "Incre\xEDblemente", "Incrementar", "Incremento", "Increpaci\xF3n", "Increpador", "Increpar", "Incriminaci\xF3n", "Incriminar", "Incristalizable", "Incruentamente", "Incruento", "Incrustaci\xF3n"];