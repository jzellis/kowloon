"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var a = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var B = Object.getOwnPropertyNames;
var N = Object.prototype.hasOwnProperty;
var H = function H(h, n) {
    for (var g in n) a(h, g, {
      get: n[g],
      enumerable: !0
    });
  },
  L = function L(h, n, g, T) {
    if (n && _typeof(n) == "object" || typeof n == "function") {
      var _iterator = _createForOfIteratorHelper(B(n)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !N.call(h, i) && i !== g && a(h, i, {
            get: function get() {
              return n[i];
            },
            enumerable: !(T = u(n, i)) || T.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return h;
  };
var o = function o(h) {
  return L(a({}, "__esModule", {
    value: !0
  }), h);
};
var G = {};
H(G, {
  "default": function _default() {
    return c;
  }
});
module.exports = o(G);
var c = ["An Giang", "B\xE0 R\u1ECBa-V\u0169ng T\xE0u", "B\u1EA1c Li\xEAu", "B\u1EAFc K\u1EA1n", "B\u1EAFc Giang", "B\u1EAFc Ninh", "B\u1EBFn Tre", "B\xECnh D\u01B0\u01A1ng", "B\xECnh \u0110\u1ECBnh", "B\xECnh Ph\u01B0\u1EDBc", "B\xECnh Thu\u1EADn", "C\xE0 Mau", "Cao B\u1EB1ng", "C\u1EA7n Th\u01A1", "\u0110\xE0 N\u1EB5ng", "\u0110\u1EAFk L\u1EAFk", "\u0110\u1EAFk N\xF4ng", "\u0110i\u1EC7n Bi\xEAn", "\u0110\u1ED3ng Nai", "\u0110\u1ED3ng Th\xE1p", "Gia Lai", "H\xE0 Giang", "H\xE0 Nam", "H\xE0 N\u1ED9i", "H\xE0 T\u0129nh", "H\u1EA3i D\u01B0\u01A1ng", "H\u1EA3i Ph\xF2ng", "H\u1EADu Giang", "H\xF2a B\xECnh", "TP. H\u1ED3 Ch\xED Minh", "H\u01B0ng Y\xEAn", "Kh\xE1nh Ho\xE0", "Ki\xEAn Giang", "Kon Tum", "Lai Ch\xE2u", "L\u1EA1ng S\u01A1n", "L\xE0o Cai", "L\xE2m \u0110\u1ED3ng", "Long An", "Nam \u0110\u1ECBnh", "Ngh\u1EC7 An", "Ninh B\xECnh", "Ninh Thu\u1EADn", "Ph\xFA Th\u1ECD", "Ph\xFA Y\xEAn", "Qu\u1EA3ng B\xECnh", "Qu\u1EA3ng Nam", "Qu\u1EA3ng Ng\xE3i", "Qu\u1EA3ng Ninh", "Qu\u1EA3ng Tr\u1ECB", "S\xF3c Tr\u0103ng", "S\u01A1n La", "T\xE2y Ninh", "Th\xE1i B\xECnh", "Th\xE1i Nguy\xEAn", "Thanh Ho\xE1", "Th\u1EEBa Thi\xEAn-Hu\u1EBF", "Ti\u1EC1n Giang", "Tr\xE0 Vinh", "Tuy\xEAn Quang", "V\u0129nh Long", "V\u0129nh Ph\xFAc", "Y\xEAn B\xE1i"];