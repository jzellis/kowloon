"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _awaitAsyncGenerator(value) { return new _OverloadYield(value, 0); }
function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }
function _AsyncGenerator(gen) { var front, back; function resume(key, arg) { try { var result = gen[key](arg), value = result.value, overloaded = value instanceof _OverloadYield; Promise.resolve(overloaded ? value.v : value).then(function (arg) { if (overloaded) { var nextKey = "return" === key ? "return" : "next"; if (!value.k || arg.done) return resume(nextKey, arg); arg = gen[nextKey](arg).value; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: !0 }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: !1 }); } (front = front.next) ? resume(front.key, front.arg) : back = null; } this._invoke = function (key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; back ? back = back.next = request : (front = back = request, resume(key, arg)); }); }, "function" != typeof gen["return"] && (this["return"] = void 0); }
_AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; }, _AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); }, _AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); }, _AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };
function _OverloadYield(value, kind) { this.v = value, this.k = kind; }
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _RedisClient_instances, _RedisClient_options, _RedisClient_socket, _RedisClient_queue, _RedisClient_isolationPool, _RedisClient_v4, _RedisClient_selectedDB, _RedisClient_initiateOptions, _RedisClient_initiateQueue, _RedisClient_initiateSocket, _RedisClient_initiateIsolationPool, _RedisClient_legacyMode, _RedisClient_legacySendCommand, _RedisClient_defineLegacyCommand, _RedisClient_pingTimer, _RedisClient_setPingTimer, _RedisClient_sendCommand, _RedisClient_pubSubCommand, _RedisClient_tick, _RedisClient_addMultiCommands, _RedisClient_destroyIsolationPool;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var commands_1 = require("./commands");
var socket_1 = require("./socket");
var commands_queue_1 = require("./commands-queue");
var multi_command_1 = require("./multi-command");
var events_1 = require("events");
var command_options_1 = require("../command-options");
var commander_1 = require("../commander");
var generic_pool_1 = require("generic-pool");
var errors_1 = require("../errors");
var url_1 = require("url");
var pub_sub_1 = require("./pub-sub");
var RedisClient = /*#__PURE__*/function (_events_1$EventEmitte) {
  _inherits(RedisClient, _events_1$EventEmitte);
  var _super = _createSuper(RedisClient);
  function RedisClient(options) {
    var _this5;
    _classCallCheck(this, RedisClient);
    _this5 = _super.call(this);
    _RedisClient_instances.add(_assertThisInitialized(_this5));
    Object.defineProperty(_assertThisInitialized(_this5), "commandOptions", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: RedisClient.commandOptions
    });
    _RedisClient_options.set(_assertThisInitialized(_this5), void 0);
    _RedisClient_socket.set(_assertThisInitialized(_this5), void 0);
    _RedisClient_queue.set(_assertThisInitialized(_this5), void 0);
    _RedisClient_isolationPool.set(_assertThisInitialized(_this5), void 0);
    _RedisClient_v4.set(_assertThisInitialized(_this5), {});
    _RedisClient_selectedDB.set(_assertThisInitialized(_this5), 0);
    _RedisClient_pingTimer.set(_assertThisInitialized(_this5), void 0);
    Object.defineProperty(_assertThisInitialized(_this5), "select", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.SELECT
    });
    Object.defineProperty(_assertThisInitialized(_this5), "subscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.SUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this5), "unsubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.UNSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this5), "pSubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.PSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this5), "pUnsubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.PUNSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this5), "sSubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.SSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this5), "sUnsubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.SUNSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this5), "quit", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.QUIT
    });
    Object.defineProperty(_assertThisInitialized(_this5), "multi", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this5.MULTI
    });
    __classPrivateFieldSet(_assertThisInitialized(_this5), _RedisClient_options, __classPrivateFieldGet(_assertThisInitialized(_this5), _RedisClient_instances, "m", _RedisClient_initiateOptions).call(_assertThisInitialized(_this5), options), "f");
    __classPrivateFieldSet(_assertThisInitialized(_this5), _RedisClient_queue, __classPrivateFieldGet(_assertThisInitialized(_this5), _RedisClient_instances, "m", _RedisClient_initiateQueue).call(_assertThisInitialized(_this5)), "f");
    __classPrivateFieldSet(_assertThisInitialized(_this5), _RedisClient_socket, __classPrivateFieldGet(_assertThisInitialized(_this5), _RedisClient_instances, "m", _RedisClient_initiateSocket).call(_assertThisInitialized(_this5)), "f");
    // should be initiated in connect, not here
    // TODO: consider breaking in v5
    __classPrivateFieldSet(_assertThisInitialized(_this5), _RedisClient_isolationPool, __classPrivateFieldGet(_assertThisInitialized(_this5), _RedisClient_instances, "m", _RedisClient_initiateIsolationPool).call(_assertThisInitialized(_this5)), "f");
    __classPrivateFieldGet(_assertThisInitialized(_this5), _RedisClient_instances, "m", _RedisClient_legacyMode).call(_assertThisInitialized(_this5));
    return _this5;
  }
  _createClass(RedisClient, [{
    key: "options",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisClient_options, "f");
    }
  }, {
    key: "isOpen",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen;
    }
  }, {
    key: "isReady",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisClient_socket, "f").isReady;
    }
  }, {
    key: "isPubSubActive",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisClient_queue, "f").isPubSubActive;
    }
  }, {
    key: "v4",
    get: function get() {
      var _classPrivateFieldGe;
      if (!((_classPrivateFieldGe = __classPrivateFieldGet(this, _RedisClient_options, "f")) !== null && _classPrivateFieldGe !== void 0 && _classPrivateFieldGe.legacyMode)) {
        throw new Error('the client is not in "legacy mode"');
      }
      return __classPrivateFieldGet(this, _RedisClient_v4, "f");
    }
  }, {
    key: "duplicate",
    value: function duplicate(overrides) {
      return new (Object.getPrototypeOf(this).constructor)(_objectSpread(_objectSpread({}, __classPrivateFieldGet(this, _RedisClient_options, "f")), overrides));
    }
  }, {
    key: "connect",
    value: function connect() {
      var _classPrivateFieldGe2;
      // see comment in constructor
      __classPrivateFieldSet(this, _RedisClient_isolationPool, (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _RedisClient_isolationPool, "f")) !== null && _classPrivateFieldGe2 !== void 0 ? _classPrivateFieldGe2 : __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateIsolationPool).call(this), "f");
      return __classPrivateFieldGet(this, _RedisClient_socket, "f").connect();
    }
  }, {
    key: "commandsExecutor",
    value: function () {
      var _commandsExecutor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(command, args) {
        var _ref, redisArgs, options;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref = (0, commander_1.transformCommandArguments)(command, args), redisArgs = _ref.args, options = _ref.options;
              _context.t0 = (0, commander_1.transformCommandReply);
              _context.t1 = command;
              _context.next = 5;
              return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options);
            case 5:
              _context.t2 = _context.sent;
              _context.t3 = redisArgs.preserve;
              return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2, _context.t3));
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function commandsExecutor(_x, _x2) {
        return _commandsExecutor.apply(this, arguments);
      }
      return commandsExecutor;
    }()
  }, {
    key: "sendCommand",
    value: function sendCommand(args, options) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, args, options);
    }
  }, {
    key: "functionsExecuter",
    value: function () {
      var _functionsExecuter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fn, args, name) {
        var _ref2, redisArgs, options;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _ref2 = (0, commander_1.transformCommandArguments)(fn, args), redisArgs = _ref2.args, options = _ref2.options;
              _context2.t0 = (0, commander_1.transformCommandReply);
              _context2.t1 = fn;
              _context2.next = 5;
              return this.executeFunction(name, fn, redisArgs, options);
            case 5:
              _context2.t2 = _context2.sent;
              _context2.t3 = redisArgs.preserve;
              return _context2.abrupt("return", (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3));
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function functionsExecuter(_x3, _x4, _x5) {
        return _functionsExecuter.apply(this, arguments);
      }
      return functionsExecuter;
    }()
  }, {
    key: "executeFunction",
    value: function executeFunction(name, fn, args, options) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, (0, commander_1.fCallArguments)(name, fn, args), options);
    }
  }, {
    key: "scriptsExecuter",
    value: function () {
      var _scriptsExecuter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(script, args) {
        var _ref3, redisArgs, options;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _ref3 = (0, commander_1.transformCommandArguments)(script, args), redisArgs = _ref3.args, options = _ref3.options;
              _context3.t0 = (0, commander_1.transformCommandReply);
              _context3.t1 = script;
              _context3.next = 5;
              return this.executeScript(script, redisArgs, options);
            case 5:
              _context3.t2 = _context3.sent;
              _context3.t3 = redisArgs.preserve;
              return _context3.abrupt("return", (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t3));
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function scriptsExecuter(_x6, _x7) {
        return _scriptsExecuter.apply(this, arguments);
      }
      return scriptsExecuter;
    }()
  }, {
    key: "executeScript",
    value: function () {
      var _executeScript = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(script, args, options) {
        var redisArgs, _err$message, _err$message$startsWi;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              redisArgs = ['EVALSHA', script.SHA1];
              if (script.NUMBER_OF_KEYS !== undefined) {
                redisArgs.push(script.NUMBER_OF_KEYS.toString());
              }
              redisArgs.push.apply(redisArgs, _toConsumableArray(args));
              _context4.prev = 3;
              _context4.next = 6;
              return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options);
            case 6:
              return _context4.abrupt("return", _context4.sent);
            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](3);
              if (_context4.t0 !== null && _context4.t0 !== void 0 && (_err$message = _context4.t0.message) !== null && _err$message !== void 0 && (_err$message$startsWi = _err$message.startsWith) !== null && _err$message$startsWi !== void 0 && _err$message$startsWi.call(_err$message, 'NOSCRIPT')) {
                _context4.next = 13;
                break;
              }
              throw _context4.t0;
            case 13:
              redisArgs[0] = 'EVAL';
              redisArgs[1] = script.SCRIPT;
              return _context4.abrupt("return", __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options));
            case 16:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[3, 9]]);
      }));
      function executeScript(_x8, _x9, _x10) {
        return _executeScript.apply(this, arguments);
      }
      return executeScript;
    }()
  }, {
    key: "SELECT",
    value: function () {
      var _SELECT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(options, db) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(0, command_options_1.isCommandOptions)(options)) {
                db = options;
                options = null;
              }
              _context5.next = 3;
              return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, ['SELECT', db.toString()], options);
            case 3:
              __classPrivateFieldSet(this, _RedisClient_selectedDB, db, "f");
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function SELECT(_x11, _x12) {
        return _SELECT.apply(this, arguments);
      }
      return SELECT;
    }()
  }, {
    key: "SUBSCRIBE",
    value: function SUBSCRIBE(channels, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(pub_sub_1.PubSubType.CHANNELS, channels, listener, bufferMode));
    }
  }, {
    key: "UNSUBSCRIBE",
    value: function UNSUBSCRIBE(channels, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(pub_sub_1.PubSubType.CHANNELS, channels, listener, bufferMode));
    }
  }, {
    key: "PSUBSCRIBE",
    value: function PSUBSCRIBE(patterns, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(pub_sub_1.PubSubType.PATTERNS, patterns, listener, bufferMode));
    }
  }, {
    key: "PUNSUBSCRIBE",
    value: function PUNSUBSCRIBE(patterns, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(pub_sub_1.PubSubType.PATTERNS, patterns, listener, bufferMode));
    }
  }, {
    key: "SSUBSCRIBE",
    value: function SSUBSCRIBE(channels, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(pub_sub_1.PubSubType.SHARDED, channels, listener, bufferMode));
    }
  }, {
    key: "SUNSUBSCRIBE",
    value: function SUNSUBSCRIBE(channels, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(pub_sub_1.PubSubType.SHARDED, channels, listener, bufferMode));
    }
  }, {
    key: "getPubSubListeners",
    value: function getPubSubListeners(type) {
      return __classPrivateFieldGet(this, _RedisClient_queue, "f").getPubSubListeners(type);
    }
  }, {
    key: "extendPubSubChannelListeners",
    value: function extendPubSubChannelListeners(type, channel, listeners) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").extendPubSubChannelListeners(type, channel, listeners));
    }
  }, {
    key: "extendPubSubListeners",
    value: function extendPubSubListeners(type, listeners) {
      return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").extendPubSubListeners(type, listeners));
    }
  }, {
    key: "QUIT",
    value: function QUIT() {
      var _this6 = this;
      return __classPrivateFieldGet(this, _RedisClient_socket, "f").quit( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var quitPromise, _yield$Promise$all, _yield$Promise$all2, reply;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              quitPromise = __classPrivateFieldGet(_this6, _RedisClient_queue, "f").addCommand(['QUIT']);
              __classPrivateFieldGet(_this6, _RedisClient_instances, "m", _RedisClient_tick).call(_this6);
              _context6.next = 4;
              return Promise.all([quitPromise, __classPrivateFieldGet(_this6, _RedisClient_instances, "m", _RedisClient_destroyIsolationPool).call(_this6)]);
            case 4:
              _yield$Promise$all = _context6.sent;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);
              reply = _yield$Promise$all2[0];
              return _context6.abrupt("return", reply);
            case 8:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      })));
    }
  }, {
    key: "executeIsolated",
    value: function executeIsolated(fn) {
      if (!__classPrivateFieldGet(this, _RedisClient_isolationPool, "f")) return Promise.reject(new errors_1.ClientClosedError());
      return __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").use(fn);
    }
  }, {
    key: "MULTI",
    value: function MULTI() {
      var _classPrivateFieldGe3;
      return new this.Multi(this.multiExecutor.bind(this), (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _classPrivateFieldGe3 === void 0 ? void 0 : _classPrivateFieldGe3.legacyMode);
    }
  }, {
    key: "multiExecutor",
    value: function () {
      var _multiExecutor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(commands, selectedDB, chainId) {
        var promise, results;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              if (__classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen) {
                _context7.next = 2;
                break;
              }
              return _context7.abrupt("return", Promise.reject(new errors_1.ClientClosedError()));
            case 2:
              promise = chainId ?
              // if `chainId` has a value, it's a `MULTI` (and not "pipeline") - need to add the `MULTI` and `EXEC` commands
              Promise.all([__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(['MULTI'], {
                chainId: chainId
              }), __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_addMultiCommands).call(this, commands, chainId), __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(['EXEC'], {
                chainId: chainId
              })]) : __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_addMultiCommands).call(this, commands);
              __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
              _context7.next = 6;
              return promise;
            case 6:
              results = _context7.sent;
              if (selectedDB !== undefined) {
                __classPrivateFieldSet(this, _RedisClient_selectedDB, selectedDB, "f");
              }
              return _context7.abrupt("return", results);
            case 9:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function multiExecutor(_x13, _x14, _x15) {
        return _multiExecutor.apply(this, arguments);
      }
      return multiExecutor;
    }()
  }, {
    key: "scanIterator",
    value: function scanIterator(options) {
      var _this = this;
      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var cursor, reply, _iterator, _step, key;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              cursor = 0;
            case 1:
              _context8.next = 3;
              return _awaitAsyncGenerator(_this.scan(cursor, options));
            case 3:
              reply = _context8.sent;
              cursor = reply.cursor;
              _iterator = _createForOfIteratorHelper(reply.keys);
              _context8.prev = 6;
              _iterator.s();
            case 8:
              if ((_step = _iterator.n()).done) {
                _context8.next = 14;
                break;
              }
              key = _step.value;
              _context8.next = 12;
              return key;
            case 12:
              _context8.next = 8;
              break;
            case 14:
              _context8.next = 19;
              break;
            case 16:
              _context8.prev = 16;
              _context8.t0 = _context8["catch"](6);
              _iterator.e(_context8.t0);
            case 19:
              _context8.prev = 19;
              _iterator.f();
              return _context8.finish(19);
            case 22:
              if (cursor !== 0) {
                _context8.next = 1;
                break;
              }
            case 23:
            case "end":
              return _context8.stop();
          }
        }, _callee8, null, [[6, 16, 19, 22]]);
      }))();
    }
  }, {
    key: "hScanIterator",
    value: function hScanIterator(key, options) {
      var _this2 = this;
      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var cursor, reply, _iterator2, _step2, tuple;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              cursor = 0;
            case 1:
              _context9.next = 3;
              return _awaitAsyncGenerator(_this2.hScan(key, cursor, options));
            case 3:
              reply = _context9.sent;
              cursor = reply.cursor;
              _iterator2 = _createForOfIteratorHelper(reply.tuples);
              _context9.prev = 6;
              _iterator2.s();
            case 8:
              if ((_step2 = _iterator2.n()).done) {
                _context9.next = 14;
                break;
              }
              tuple = _step2.value;
              _context9.next = 12;
              return tuple;
            case 12:
              _context9.next = 8;
              break;
            case 14:
              _context9.next = 19;
              break;
            case 16:
              _context9.prev = 16;
              _context9.t0 = _context9["catch"](6);
              _iterator2.e(_context9.t0);
            case 19:
              _context9.prev = 19;
              _iterator2.f();
              return _context9.finish(19);
            case 22:
              if (cursor !== 0) {
                _context9.next = 1;
                break;
              }
            case 23:
            case "end":
              return _context9.stop();
          }
        }, _callee9, null, [[6, 16, 19, 22]]);
      }))();
    }
  }, {
    key: "sScanIterator",
    value: function sScanIterator(key, options) {
      var _this3 = this;
      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var cursor, reply, _iterator3, _step3, member;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              cursor = 0;
            case 1:
              _context10.next = 3;
              return _awaitAsyncGenerator(_this3.sScan(key, cursor, options));
            case 3:
              reply = _context10.sent;
              cursor = reply.cursor;
              _iterator3 = _createForOfIteratorHelper(reply.members);
              _context10.prev = 6;
              _iterator3.s();
            case 8:
              if ((_step3 = _iterator3.n()).done) {
                _context10.next = 14;
                break;
              }
              member = _step3.value;
              _context10.next = 12;
              return member;
            case 12:
              _context10.next = 8;
              break;
            case 14:
              _context10.next = 19;
              break;
            case 16:
              _context10.prev = 16;
              _context10.t0 = _context10["catch"](6);
              _iterator3.e(_context10.t0);
            case 19:
              _context10.prev = 19;
              _iterator3.f();
              return _context10.finish(19);
            case 22:
              if (cursor !== 0) {
                _context10.next = 1;
                break;
              }
            case 23:
            case "end":
              return _context10.stop();
          }
        }, _callee10, null, [[6, 16, 19, 22]]);
      }))();
    }
  }, {
    key: "zScanIterator",
    value: function zScanIterator(key, options) {
      var _this4 = this;
      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var cursor, reply, _iterator4, _step4, member;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              cursor = 0;
            case 1:
              _context11.next = 3;
              return _awaitAsyncGenerator(_this4.zScan(key, cursor, options));
            case 3:
              reply = _context11.sent;
              cursor = reply.cursor;
              _iterator4 = _createForOfIteratorHelper(reply.members);
              _context11.prev = 6;
              _iterator4.s();
            case 8:
              if ((_step4 = _iterator4.n()).done) {
                _context11.next = 14;
                break;
              }
              member = _step4.value;
              _context11.next = 12;
              return member;
            case 12:
              _context11.next = 8;
              break;
            case 14:
              _context11.next = 19;
              break;
            case 16:
              _context11.prev = 16;
              _context11.t0 = _context11["catch"](6);
              _iterator4.e(_context11.t0);
            case 19:
              _context11.prev = 19;
              _iterator4.f();
              return _context11.finish(19);
            case 22:
              if (cursor !== 0) {
                _context11.next = 1;
                break;
              }
            case 23:
            case "end":
              return _context11.stop();
          }
        }, _callee11, null, [[6, 16, 19, 22]]);
      }))();
    }
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              __classPrivateFieldGet(this, _RedisClient_queue, "f").flushAll(new errors_1.DisconnectsClientError());
              __classPrivateFieldGet(this, _RedisClient_socket, "f").disconnect();
              _context12.next = 4;
              return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_destroyIsolationPool).call(this);
            case 4:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function disconnect() {
        return _disconnect.apply(this, arguments);
      }
      return disconnect;
    }()
  }, {
    key: "ref",
    value: function ref() {
      __classPrivateFieldGet(this, _RedisClient_socket, "f").ref();
    }
  }, {
    key: "unref",
    value: function unref() {
      __classPrivateFieldGet(this, _RedisClient_socket, "f").unref();
    }
  }], [{
    key: "commandOptions",
    value: function commandOptions(options) {
      return (0, command_options_1.commandOptions)(options);
    }
  }, {
    key: "extend",
    value: function extend(extensions) {
      var Client = (0, commander_1.attachExtensions)({
        BaseClass: RedisClient,
        modulesExecutor: RedisClient.prototype.commandsExecutor,
        modules: extensions === null || extensions === void 0 ? void 0 : extensions.modules,
        functionsExecutor: RedisClient.prototype.functionsExecuter,
        functions: extensions === null || extensions === void 0 ? void 0 : extensions.functions,
        scriptsExecutor: RedisClient.prototype.scriptsExecuter,
        scripts: extensions === null || extensions === void 0 ? void 0 : extensions.scripts
      });
      if (Client !== RedisClient) {
        Client.prototype.Multi = multi_command_1["default"].extend(extensions);
      }
      return Client;
    }
  }, {
    key: "create",
    value: function create(options) {
      return new (RedisClient.extend(options))(options);
    }
  }, {
    key: "parseURL",
    value: function parseURL(url) {
      // https://www.iana.org/assignments/uri-schemes/prov/redis
      var _url_1$URL = new url_1.URL(url),
        hostname = _url_1$URL.hostname,
        port = _url_1$URL.port,
        protocol = _url_1$URL.protocol,
        username = _url_1$URL.username,
        password = _url_1$URL.password,
        pathname = _url_1$URL.pathname,
        parsed = {
          socket: {
            host: hostname
          }
        };
      if (protocol === 'rediss:') {
        parsed.socket.tls = true;
      } else if (protocol !== 'redis:') {
        throw new TypeError('Invalid protocol');
      }
      if (port) {
        parsed.socket.port = Number(port);
      }
      if (username) {
        parsed.username = decodeURIComponent(username);
      }
      if (password) {
        parsed.password = decodeURIComponent(password);
      }
      if (pathname.length > 1) {
        var database = Number(pathname.substring(1));
        if (isNaN(database)) {
          throw new TypeError('Invalid pathname');
        }
        parsed.database = database;
      }
      return parsed;
    }
  }]);
  return RedisClient;
}(events_1.EventEmitter);
exports["default"] = RedisClient;
_RedisClient_options = new WeakMap(), _RedisClient_socket = new WeakMap(), _RedisClient_queue = new WeakMap(), _RedisClient_isolationPool = new WeakMap(), _RedisClient_v4 = new WeakMap(), _RedisClient_selectedDB = new WeakMap(), _RedisClient_pingTimer = new WeakMap(), _RedisClient_instances = new WeakSet(), _RedisClient_initiateOptions = function _RedisClient_initiateOptions(options) {
  if (options !== null && options !== void 0 && options.url) {
    var parsed = RedisClient.parseURL(options.url);
    if (options.socket) {
      parsed.socket = Object.assign(options.socket, parsed.socket);
    }
    Object.assign(options, parsed);
  }
  if (options !== null && options !== void 0 && options.database) {
    __classPrivateFieldSet(this, _RedisClient_selectedDB, options.database, "f");
  }
  return options;
}, _RedisClient_initiateQueue = function _RedisClient_initiateQueue() {
  var _classPrivateFieldGe4,
    _this7 = this;
  return new commands_queue_1["default"]((_classPrivateFieldGe4 = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _classPrivateFieldGe4 === void 0 ? void 0 : _classPrivateFieldGe4.commandsQueueMaxLength, function (channel, listeners) {
    return _this7.emit('sharded-channel-moved', channel, listeners);
  });
}, _RedisClient_initiateSocket = function _RedisClient_initiateSocket() {
  var _this8 = this,
    _classPrivateFieldGe10;
  var socketInitiator = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      var _classPrivateFieldGe5, _classPrivateFieldGe6, _classPrivateFieldGe7, _classPrivateFieldGe8;
      var promises, _classPrivateFieldGe9, resubscribePromise;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            promises = [];
            if (__classPrivateFieldGet(_this8, _RedisClient_selectedDB, "f") !== 0) {
              promises.push(__classPrivateFieldGet(_this8, _RedisClient_queue, "f").addCommand(['SELECT', __classPrivateFieldGet(_this8, _RedisClient_selectedDB, "f").toString()], {
                asap: true
              }));
            }
            if ((_classPrivateFieldGe5 = __classPrivateFieldGet(_this8, _RedisClient_options, "f")) !== null && _classPrivateFieldGe5 !== void 0 && _classPrivateFieldGe5.readonly) {
              promises.push(__classPrivateFieldGet(_this8, _RedisClient_queue, "f").addCommand(commands_1["default"].READONLY.transformArguments(), {
                asap: true
              }));
            }
            if ((_classPrivateFieldGe6 = __classPrivateFieldGet(_this8, _RedisClient_options, "f")) !== null && _classPrivateFieldGe6 !== void 0 && _classPrivateFieldGe6.name) {
              promises.push(__classPrivateFieldGet(_this8, _RedisClient_queue, "f").addCommand(commands_1["default"].CLIENT_SETNAME.transformArguments(__classPrivateFieldGet(_this8, _RedisClient_options, "f").name), {
                asap: true
              }));
            }
            if ((_classPrivateFieldGe7 = __classPrivateFieldGet(_this8, _RedisClient_options, "f")) !== null && _classPrivateFieldGe7 !== void 0 && _classPrivateFieldGe7.username || (_classPrivateFieldGe8 = __classPrivateFieldGet(_this8, _RedisClient_options, "f")) !== null && _classPrivateFieldGe8 !== void 0 && _classPrivateFieldGe8.password) {
              promises.push(__classPrivateFieldGet(_this8, _RedisClient_queue, "f").addCommand(commands_1["default"].AUTH.transformArguments({
                username: __classPrivateFieldGet(_this8, _RedisClient_options, "f").username,
                password: (_classPrivateFieldGe9 = __classPrivateFieldGet(_this8, _RedisClient_options, "f").password) !== null && _classPrivateFieldGe9 !== void 0 ? _classPrivateFieldGe9 : ''
              }), {
                asap: true
              }));
            }
            resubscribePromise = __classPrivateFieldGet(_this8, _RedisClient_queue, "f").resubscribe();
            if (resubscribePromise) {
              promises.push(resubscribePromise);
            }
            if (!promises.length) {
              _context13.next = 11;
              break;
            }
            __classPrivateFieldGet(_this8, _RedisClient_instances, "m", _RedisClient_tick).call(_this8, true);
            _context13.next = 11;
            return Promise.all(promises);
          case 11:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    }));
    return function socketInitiator() {
      return _ref5.apply(this, arguments);
    };
  }();
  return new socket_1["default"](socketInitiator, (_classPrivateFieldGe10 = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _classPrivateFieldGe10 === void 0 ? void 0 : _classPrivateFieldGe10.socket).on('data', function (chunk) {
    return __classPrivateFieldGet(_this8, _RedisClient_queue, "f").onReplyChunk(chunk);
  }).on('error', function (err) {
    var _classPrivateFieldGe11;
    _this8.emit('error', err);
    if (__classPrivateFieldGet(_this8, _RedisClient_socket, "f").isOpen && !((_classPrivateFieldGe11 = __classPrivateFieldGet(_this8, _RedisClient_options, "f")) !== null && _classPrivateFieldGe11 !== void 0 && _classPrivateFieldGe11.disableOfflineQueue)) {
      __classPrivateFieldGet(_this8, _RedisClient_queue, "f").flushWaitingForReply(err);
    } else {
      __classPrivateFieldGet(_this8, _RedisClient_queue, "f").flushAll(err);
    }
  }).on('connect', function () {
    _this8.emit('connect');
  }).on('ready', function () {
    _this8.emit('ready');
    __classPrivateFieldGet(_this8, _RedisClient_instances, "m", _RedisClient_setPingTimer).call(_this8);
    __classPrivateFieldGet(_this8, _RedisClient_instances, "m", _RedisClient_tick).call(_this8);
  }).on('reconnecting', function () {
    return _this8.emit('reconnecting');
  }).on('drain', function () {
    return __classPrivateFieldGet(_this8, _RedisClient_instances, "m", _RedisClient_tick).call(_this8);
  }).on('end', function () {
    return _this8.emit('end');
  });
}, _RedisClient_initiateIsolationPool = function _RedisClient_initiateIsolationPool() {
  var _this9 = this,
    _classPrivateFieldGe12;
  return (0, generic_pool_1.createPool)({
    create: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
        var duplicate;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              duplicate = _this9.duplicate({
                isolationPoolOptions: undefined
              }).on('error', function (err) {
                return _this9.emit('error', err);
              });
              _context14.next = 3;
              return duplicate.connect();
            case 3:
              return _context14.abrupt("return", duplicate);
            case 4:
            case "end":
              return _context14.stop();
          }
        }, _callee14);
      }));
      function create() {
        return _create.apply(this, arguments);
      }
      return create;
    }(),
    destroy: function destroy(client) {
      return client.disconnect();
    }
  }, (_classPrivateFieldGe12 = __classPrivateFieldGet(this, _RedisClient_options, "f")) === null || _classPrivateFieldGe12 === void 0 ? void 0 : _classPrivateFieldGe12.isolationPoolOptions);
}, _RedisClient_legacyMode = function _RedisClient_legacyMode() {
  var _classPrivateFieldGe13,
    _this10 = this;
  var _a, _b;
  if (!((_classPrivateFieldGe13 = __classPrivateFieldGet(this, _RedisClient_options, "f")) !== null && _classPrivateFieldGe13 !== void 0 && _classPrivateFieldGe13.legacyMode)) return;
  __classPrivateFieldGet(this, _RedisClient_v4, "f").sendCommand = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).bind(this);
  this.sendCommand = function () {
    var _classPrivateFieldGe14;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var result = (_classPrivateFieldGe14 = __classPrivateFieldGet(_this10, _RedisClient_instances, "m", _RedisClient_legacySendCommand)).call.apply(_classPrivateFieldGe14, [_this10].concat(args));
    if (result) {
      result.promise.then(function (reply) {
        return result.callback(null, reply);
      })["catch"](function (err) {
        return result.callback(err);
      });
    }
  };
  for (var _i2 = 0, _Object$entries = Object.entries(commands_1["default"]); _i2 < _Object$entries.length; _i2++) {
    var _a$_b;
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
      name = _Object$entries$_i[0],
      command = _Object$entries$_i[1];
    __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, name, command);
    (_a$_b = (_a = this)[_b = name.toLowerCase()]) !== null && _a$_b !== void 0 ? _a$_b : _a[_b] = this[name];
  }
  // hard coded commands
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'SELECT');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'select');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'SUBSCRIBE');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'subscribe');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'PSUBSCRIBE');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'pSubscribe');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'UNSUBSCRIBE');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'unsubscribe');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'PUNSUBSCRIBE');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'pUnsubscribe');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'QUIT');
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, 'quit');
}, _RedisClient_legacySendCommand = function _RedisClient_legacySendCommand() {
  var _this11 = this;
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  var callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
  var promise = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, (0, commander_1.transformLegacyCommandArguments)(args));
  if (callback) return {
    promise: promise,
    callback: callback
  };
  promise["catch"](function (err) {
    return _this11.emit('error', err);
  });
}, _RedisClient_defineLegacyCommand = function _RedisClient_defineLegacyCommand(name, command) {
  var _this12 = this;
  __classPrivateFieldGet(this, _RedisClient_v4, "f")[name] = this[name].bind(this);
  this[name] = command && command.TRANSFORM_LEGACY_REPLY && command.transformReply ? function () {
    var _classPrivateFieldGe15;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    var result = (_classPrivateFieldGe15 = __classPrivateFieldGet(_this12, _RedisClient_instances, "m", _RedisClient_legacySendCommand)).call.apply(_classPrivateFieldGe15, [_this12, name].concat(args));
    if (result) {
      result.promise.then(function (reply) {
        return result.callback(null, command.transformReply(reply));
      })["catch"](function (err) {
        return result.callback(err);
      });
    }
  } : function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return _this12.sendCommand.apply(_this12, [name].concat(args));
  };
}, _RedisClient_setPingTimer = function _RedisClient_setPingTimer() {
  var _classPrivateFieldGe16,
    _this13 = this;
  if (!((_classPrivateFieldGe16 = __classPrivateFieldGet(this, _RedisClient_options, "f")) !== null && _classPrivateFieldGe16 !== void 0 && _classPrivateFieldGe16.pingInterval) || !__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady) return;
  clearTimeout(__classPrivateFieldGet(this, _RedisClient_pingTimer, "f"));
  __classPrivateFieldSet(this, _RedisClient_pingTimer, setTimeout(function () {
    if (!__classPrivateFieldGet(_this13, _RedisClient_socket, "f").isReady) return;
    // using #sendCommand to support legacy mode
    __classPrivateFieldGet(_this13, _RedisClient_instances, "m", _RedisClient_sendCommand).call(_this13, ['PING']).then(function (reply) {
      return _this13.emit('ping-interval', reply);
    })["catch"](function (err) {
      return _this13.emit('error', err);
    })["finally"](function () {
      return __classPrivateFieldGet(_this13, _RedisClient_instances, "m", _RedisClient_setPingTimer).call(_this13);
    });
  }, __classPrivateFieldGet(this, _RedisClient_options, "f").pingInterval), "f");
}, _RedisClient_sendCommand = function _RedisClient_sendCommand(args, options) {
  var _classPrivateFieldGe17;
  if (!__classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen) {
    return Promise.reject(new errors_1.ClientClosedError());
  } else if (options !== null && options !== void 0 && options.isolated) {
    return this.executeIsolated(function (isolatedClient) {
      return isolatedClient.sendCommand(args, _objectSpread(_objectSpread({}, options), {}, {
        isolated: false
      }));
    });
  } else if (!__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady && (_classPrivateFieldGe17 = __classPrivateFieldGet(this, _RedisClient_options, "f")) !== null && _classPrivateFieldGe17 !== void 0 && _classPrivateFieldGe17.disableOfflineQueue) {
    return Promise.reject(new errors_1.ClientOfflineError());
  }
  var promise = __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(args, options);
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
  return promise;
}, _RedisClient_pubSubCommand = function _RedisClient_pubSubCommand(promise) {
  if (promise === undefined) return Promise.resolve();
  __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
  return promise;
}, _RedisClient_tick = function _RedisClient_tick() {
  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (__classPrivateFieldGet(this, _RedisClient_socket, "f").writableNeedDrain || !force && !__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady) {
    return;
  }
  __classPrivateFieldGet(this, _RedisClient_socket, "f").cork();
  while (!__classPrivateFieldGet(this, _RedisClient_socket, "f").writableNeedDrain) {
    var args = __classPrivateFieldGet(this, _RedisClient_queue, "f").getCommandToSend();
    if (args === undefined) break;
    __classPrivateFieldGet(this, _RedisClient_socket, "f").writeCommand(args);
  }
}, _RedisClient_addMultiCommands = function _RedisClient_addMultiCommands(commands, chainId) {
  var _this14 = this;
  return Promise.all(commands.map(function (_ref6) {
    var args = _ref6.args;
    return __classPrivateFieldGet(_this14, _RedisClient_queue, "f").addCommand(args, {
      chainId: chainId
    });
  }));
}, _RedisClient_destroyIsolationPool = /*#__PURE__*/function () {
  var _RedisClient_destroyIsolationPool2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
    return _regeneratorRuntime().wrap(function _callee15$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          _context15.next = 2;
          return __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").drain();
        case 2:
          _context15.next = 4;
          return __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").clear();
        case 4:
          __classPrivateFieldSet(this, _RedisClient_isolationPool, undefined, "f");
        case 5:
        case "end":
          return _context15.stop();
      }
    }, _callee15, this);
  }));
  function _RedisClient_destroyIsolationPool() {
    return _RedisClient_destroyIsolationPool2.apply(this, arguments);
  }
  return _RedisClient_destroyIsolationPool;
}();
(0, commander_1.attachCommands)({
  BaseClass: RedisClient,
  commands: commands_1["default"],
  executor: RedisClient.prototype.commandsExecutor
});
RedisClient.prototype.Multi = multi_command_1["default"];