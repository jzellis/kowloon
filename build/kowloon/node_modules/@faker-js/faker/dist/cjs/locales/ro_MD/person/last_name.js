"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var c = Object.getOwnPropertyDescriptor;
var t = Object.getOwnPropertyNames;
var e = Object.prototype.hasOwnProperty;
var l = function l(i, a) {
    for (var u in a) o(i, u, {
      get: a[u],
      enumerable: !0
    });
  },
  s = function s(i, a, u, n) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(t(a)),
        _step;
      try {
        var _loop = function _loop() {
          var r = _step.value;
          !e.call(i, r) && r !== u && o(i, r, {
            get: function get() {
              return a[r];
            },
            enumerable: !(n = c(a, r)) || n.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var C = function C(i) {
  return s(o({}, "__esModule", {
    value: !0
  }), i);
};
var v = {};
l(v, {
  "default": function _default() {
    return B;
  }
});
module.exports = C(v);
var B = ["Ababii", "Abu", "Adam", "Albu", "Alexandru", "Andrei", "Andries", "Andronic", "Anghel", "Antoci", "Apostol", "Arnaut", "Babin", "Baciu", "Balaban", "Balan", "Baltag", "Bargan", "Bejan", "Bejenari", "Bejenaru", "Birca", "Bitca", "Bivol", "Boboc", "Bodrug", "Bogdan", "Boico", "Bondarenco", "Bordian", "Bors", "Borta", "Bostan", "Botan", "Botezatu", "Botnari", "Botnaru", "Braga", "Brinza", "Buga", "Bujor", "Bulat", "Bunescu", "Burduja", "Burlacu", "Buruiana", "Busuioc", "Butnaru", "Capatina", "Cara", "Caraman", "Caraus", "Carp", "Casian", "Catana", "Cazac", "Cazacu", "Ceban", "Cebanu", "Cebotari", "Cecan", "Cernei", "Chicu", "Chihai", "Chiriac", "Chirilov", "Chirita", "Cibotari", "Cioban", "Ciobanu", "Ciorba", "Ciornii", "Ciubotaru", "Ciumac", "Codreanu", "Cojocari", "Cojocaru", "Cojuhari", "Colesnic", "Condrea", "Constantinov", "Costin", "Cotorobai", "Cotruta", "Covalciuc", "Covalenco", "Covali", "Craciun", "Creciun", "Cretu", "Cristea", "Croitor", "Croitoru", "Crudu", "Cucos", "Cucu", "Cujba", "Cusnir", "Dabija", "Damian", "Darii", "David", "Diaconu", "Dodon", "Donica", "Dragan", "Duca", "Enachi", "Eni", "Erhan", "Esanu", "Filip", "Florea", "Focsa", "Frunza", "Frunze", "Furtuna", "Gaina", "Gangan", "Gavrilita", "Gavriliuc", "Gheorghita", "Gherman", "Gilca", "Girbu", "Gisca", "Golban", "Goncear", "Gonta", "Gorea", "Graur", "Grecu", "Grigoras", "Grosu", "Groza", "Gusan", "Gutu", "Guzun", "Hincu", "Iatco", "Ignat", "Iovu", "Isac", "Istrati", "Ivanov", "Ivanova", "Jardan", "Josan", "Lazari", "Leahu", "Lisnic", "Luca", "Luchian", "Lungu", "Lupasco", "Lupascu", "Lupu", "Macari", "Macovei", "Madan", "Malai", "Mamaliga", "Manole", "Marcu", "Mardari", "Marian", "Marin", "Matei", "Mazur", "Melnic", "Mereuta", "Mihailov", "Mihalachi", "Mindru", "Miron", "Mirza", "Mitu", "Mocan", "Mocanu", "Moisei", "Moldovan", "Moldovanu", "Morari", "Moraru", "Moroz", "Muntean", "Munteanu", "Musteata", "Nastas", "Neagu", "Negara", "Negru", "Negruta", "Nicolaev", "Nistor", "Novac", "Olari", "Olaru", "Oleinic", "Oprea", "Paladi", "Palii", "Pasat", "Pascal", "Pascari", "Pascaru", "Pavlov", "Petrov", "Pintea", "Pinzari", "Pinzaru", "Placinta", "Plamadeala", "Platon", "Plesca", "Popa", "Popescu", "Popov", "Popova", "Popovici", "Popusoi", "Postica", "Postolachi", "Prepelita", "Prisacari", "Prisacaru", "Prodan", "Pruteanu", "Puscas", "Racu", "Radu", "Railean", "Raileanu", "Rata", "Revenco", "Robu", "Roman", "Romanciuc", "Rosca", "Rotari", "Rotaru", "Rusnac", "Russu", "Rusu", "Sandu", "Sava", "Savciuc", "Savin", "Schiopu", "Scripnic", "Scurtu", "Scutaru", "Secrieru", "Seremet", "Serghei", "Sevcenco", "Sirbu", "Sirghi", "Sochirca", "Socolov", "Soltan", "Spataru", "Spinu", "Stavila", "Stirbu", "Stoian", "Stratan", "Stratulat", "Svet", "Talpa", "Taran", "Tataru", "Tatiana", "Tcacenco", "Tcaci", "Terzi", "Tofan", "Toma", "Topal", "Triboi", "Trifan", "Turcan", "Turcanu", "Ungureanu", "Untila", "Ursachi", "Ursu", "Uzun", "Vacarciuc", "Vartic", "Verdes", "Vicol", "Vieru", "Virlan", "Vizitiu", "Vlas", "Vrabie", "Zaharia", "Zaporojan"];