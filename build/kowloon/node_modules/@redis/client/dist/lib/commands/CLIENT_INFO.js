"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformReply = exports.transformArguments = exports.IS_READ_ONLY = void 0;
exports.IS_READ_ONLY = true;
function transformArguments() {
  return ['CLIENT', 'INFO'];
}
exports.transformArguments = transformArguments;
var CLIENT_INFO_REGEX = /([^\s=]+)=([^\s]*)/g;
function transformReply(rawReply) {
  var map = {};
  var _iterator = _createForOfIteratorHelper(rawReply.matchAll(CLIENT_INFO_REGEX)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      map[item[1]] = item[2];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var reply = {
    id: Number(map.id),
    addr: map.addr,
    fd: Number(map.fd),
    name: map.name,
    age: Number(map.age),
    idle: Number(map.idle),
    flags: map.flags,
    db: Number(map.db),
    sub: Number(map.sub),
    psub: Number(map.psub),
    multi: Number(map.multi),
    qbuf: Number(map.qbuf),
    qbufFree: Number(map['qbuf-free']),
    argvMem: Number(map['argv-mem']),
    obl: Number(map.obl),
    oll: Number(map.oll),
    omem: Number(map.omem),
    totMem: Number(map['tot-mem']),
    events: map.events,
    cmd: map.cmd,
    user: map.user
  };
  if (map.laddr !== undefined) {
    reply.laddr = map.laddr;
  }
  if (map.redir !== undefined) {
    reply.redir = Number(map.redir);
  }
  if (map.ssub !== undefined) {
    reply.ssub = Number(map.ssub);
  }
  if (map['multi-mem'] !== undefined) {
    reply.multiMem = Number(map['multi-mem']);
  }
  if (map.resp !== undefined) {
    reply.resp = Number(map.resp);
  }
  return reply;
}
exports.transformReply = transformReply;