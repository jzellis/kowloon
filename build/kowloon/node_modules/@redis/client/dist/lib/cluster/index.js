"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _RedisCluster_instances, _RedisCluster_options, _RedisCluster_slots, _RedisCluster_Multi, _RedisCluster_execute;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var commands_1 = require("./commands");
var cluster_slots_1 = require("./cluster-slots");
var commander_1 = require("../commander");
var events_1 = require("events");
var multi_command_1 = require("./multi-command");
var errors_1 = require("../errors");
var RedisCluster = /*#__PURE__*/function (_events_1$EventEmitte) {
  _inherits(RedisCluster, _events_1$EventEmitte);
  var _super = _createSuper(RedisCluster);
  function RedisCluster(options) {
    var _this;
    _classCallCheck(this, RedisCluster);
    _this = _super.call(this);
    _RedisCluster_instances.add(_assertThisInitialized(_this));
    _RedisCluster_options.set(_assertThisInitialized(_this), void 0);
    _RedisCluster_slots.set(_assertThisInitialized(_this), void 0);
    _RedisCluster_Multi.set(_assertThisInitialized(_this), void 0);
    Object.defineProperty(_assertThisInitialized(_this), "multi", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.MULTI
    });
    Object.defineProperty(_assertThisInitialized(_this), "subscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.SUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this), "unsubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.UNSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this), "pSubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.PSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this), "pUnsubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.PUNSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this), "sSubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.SSUBSCRIBE
    });
    Object.defineProperty(_assertThisInitialized(_this), "sUnsubscribe", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.SUNSUBSCRIBE
    });
    __classPrivateFieldSet(_assertThisInitialized(_this), _RedisCluster_options, options, "f");
    __classPrivateFieldSet(_assertThisInitialized(_this), _RedisCluster_slots, new cluster_slots_1["default"](options, _this.emit.bind(_assertThisInitialized(_this))), "f");
    __classPrivateFieldSet(_assertThisInitialized(_this), _RedisCluster_Multi, multi_command_1["default"].extend(options), "f");
    return _this;
  }
  _createClass(RedisCluster, [{
    key: "slots",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").slots;
    }
  }, {
    key: "shards",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").shards;
    }
  }, {
    key: "masters",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").masters;
    }
  }, {
    key: "replicas",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").replicas;
    }
  }, {
    key: "nodeByAddress",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").nodeByAddress;
    }
  }, {
    key: "pubSubNode",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").pubSubNode;
    }
  }, {
    key: "isOpen",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").isOpen;
    }
  }, {
    key: "duplicate",
    value: function duplicate(overrides) {
      return new (Object.getPrototypeOf(this).constructor)(_objectSpread(_objectSpread({}, __classPrivateFieldGet(this, _RedisCluster_options, "f")), overrides));
    }
  }, {
    key: "connect",
    value: function connect() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").connect();
    }
  }, {
    key: "commandsExecutor",
    value: function () {
      var _commandsExecutor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(command, args) {
        var _ref, jsArgs, redisArgs, options;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref = (0, commander_1.transformCommandArguments)(command, args), jsArgs = _ref.jsArgs, redisArgs = _ref.args, options = _ref.options;
              _context.t0 = (0, commander_1.transformCommandReply);
              _context.t1 = command;
              _context.next = 5;
              return this.sendCommand(RedisCluster.extractFirstKey(command, jsArgs, redisArgs), command.IS_READ_ONLY, redisArgs, options);
            case 5:
              _context.t2 = _context.sent;
              _context.t3 = redisArgs.preserve;
              return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2, _context.t3));
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function commandsExecutor(_x, _x2) {
        return _commandsExecutor.apply(this, arguments);
      }
      return commandsExecutor;
    }()
  }, {
    key: "sendCommand",
    value: function () {
      var _sendCommand = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(firstKey, isReadonly, args, options) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, firstKey, isReadonly, function (client) {
                return client.sendCommand(args, options);
              }));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function sendCommand(_x3, _x4, _x5, _x6) {
        return _sendCommand.apply(this, arguments);
      }
      return sendCommand;
    }()
  }, {
    key: "functionsExecutor",
    value: function () {
      var _functionsExecutor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(fn, args, name) {
        var _ref2, redisArgs, options;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _ref2 = (0, commander_1.transformCommandArguments)(fn, args), redisArgs = _ref2.args, options = _ref2.options;
              _context3.t0 = (0, commander_1.transformCommandReply);
              _context3.t1 = fn;
              _context3.next = 5;
              return this.executeFunction(name, fn, args, redisArgs, options);
            case 5:
              _context3.t2 = _context3.sent;
              _context3.t3 = redisArgs.preserve;
              return _context3.abrupt("return", (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t3));
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function functionsExecutor(_x7, _x8, _x9) {
        return _functionsExecutor.apply(this, arguments);
      }
      return functionsExecutor;
    }()
  }, {
    key: "executeFunction",
    value: function () {
      var _executeFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name, fn, originalArgs, redisArgs, options) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, RedisCluster.extractFirstKey(fn, originalArgs, redisArgs), fn.IS_READ_ONLY, function (client) {
                return client.executeFunction(name, fn, redisArgs, options);
              }));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function executeFunction(_x10, _x11, _x12, _x13, _x14) {
        return _executeFunction.apply(this, arguments);
      }
      return executeFunction;
    }()
  }, {
    key: "scriptsExecutor",
    value: function () {
      var _scriptsExecutor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(script, args) {
        var _ref3, redisArgs, options;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _ref3 = (0, commander_1.transformCommandArguments)(script, args), redisArgs = _ref3.args, options = _ref3.options;
              _context5.t0 = (0, commander_1.transformCommandReply);
              _context5.t1 = script;
              _context5.next = 5;
              return this.executeScript(script, args, redisArgs, options);
            case 5:
              _context5.t2 = _context5.sent;
              _context5.t3 = redisArgs.preserve;
              return _context5.abrupt("return", (0, _context5.t0)(_context5.t1, _context5.t2, _context5.t3));
            case 8:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function scriptsExecutor(_x15, _x16) {
        return _scriptsExecutor.apply(this, arguments);
      }
      return scriptsExecutor;
    }()
  }, {
    key: "executeScript",
    value: function () {
      var _executeScript = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(script, originalArgs, redisArgs, options) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, RedisCluster.extractFirstKey(script, originalArgs, redisArgs), script.IS_READ_ONLY, function (client) {
                return client.executeScript(script, redisArgs, options);
              }));
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function executeScript(_x17, _x18, _x19, _x20) {
        return _executeScript.apply(this, arguments);
      }
      return executeScript;
    }()
  }, {
    key: "MULTI",
    value: function MULTI(routing) {
      var _this2 = this;
      return new (__classPrivateFieldGet(this, _RedisCluster_Multi, "f"))(function (commands, firstKey, chainId) {
        return __classPrivateFieldGet(_this2, _RedisCluster_instances, "m", _RedisCluster_execute).call(_this2, firstKey, false, function (client) {
          return client.multiExecutor(commands, undefined, chainId);
        });
      }, routing);
    }
  }, {
    key: "SUBSCRIBE",
    value: function () {
      var _SUBSCRIBE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(channels, listener, bufferMode) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getPubSubClient();
            case 2:
              return _context7.abrupt("return", _context7.sent.SUBSCRIBE(channels, listener, bufferMode));
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function SUBSCRIBE(_x21, _x22, _x23) {
        return _SUBSCRIBE.apply(this, arguments);
      }
      return SUBSCRIBE;
    }()
  }, {
    key: "UNSUBSCRIBE",
    value: function () {
      var _UNSUBSCRIBE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(channels, listener, bufferMode) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", __classPrivateFieldGet(this, _RedisCluster_slots, "f").executeUnsubscribeCommand(function (client) {
                return client.UNSUBSCRIBE(channels, listener, bufferMode);
              }));
            case 1:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function UNSUBSCRIBE(_x24, _x25, _x26) {
        return _UNSUBSCRIBE.apply(this, arguments);
      }
      return UNSUBSCRIBE;
    }()
  }, {
    key: "PSUBSCRIBE",
    value: function () {
      var _PSUBSCRIBE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(patterns, listener, bufferMode) {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getPubSubClient();
            case 2:
              return _context9.abrupt("return", _context9.sent.PSUBSCRIBE(patterns, listener, bufferMode));
            case 3:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function PSUBSCRIBE(_x27, _x28, _x29) {
        return _PSUBSCRIBE.apply(this, arguments);
      }
      return PSUBSCRIBE;
    }()
  }, {
    key: "PUNSUBSCRIBE",
    value: function () {
      var _PUNSUBSCRIBE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(patterns, listener, bufferMode) {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", __classPrivateFieldGet(this, _RedisCluster_slots, "f").executeUnsubscribeCommand(function (client) {
                return client.PUNSUBSCRIBE(patterns, listener, bufferMode);
              }));
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function PUNSUBSCRIBE(_x30, _x31, _x32) {
        return _PUNSUBSCRIBE.apply(this, arguments);
      }
      return PUNSUBSCRIBE;
    }()
  }, {
    key: "SSUBSCRIBE",
    value: function () {
      var _SSUBSCRIBE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(channels, listener, bufferMode) {
        var _classPrivateFieldGe;
        var maxCommandRedirections, firstChannel, client, i;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              maxCommandRedirections = (_classPrivateFieldGe = __classPrivateFieldGet(this, _RedisCluster_options, "f").maxCommandRedirections) !== null && _classPrivateFieldGe !== void 0 ? _classPrivateFieldGe : 16, firstChannel = Array.isArray(channels) ? channels[0] : channels;
              _context11.next = 3;
              return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getShardedPubSubClient(firstChannel);
            case 3:
              client = _context11.sent;
              i = 0;
            case 5:
              _context11.prev = 5;
              _context11.next = 8;
              return client.SSUBSCRIBE(channels, listener, bufferMode);
            case 8:
              return _context11.abrupt("return", _context11.sent);
            case 11:
              _context11.prev = 11;
              _context11.t0 = _context11["catch"](5);
              if (!(++i > maxCommandRedirections || !(_context11.t0 instanceof errors_1.ErrorReply))) {
                _context11.next = 15;
                break;
              }
              throw _context11.t0;
            case 15:
              if (!_context11.t0.message.startsWith('MOVED')) {
                _context11.next = 22;
                break;
              }
              _context11.next = 18;
              return __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client);
            case 18:
              _context11.next = 20;
              return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getShardedPubSubClient(firstChannel);
            case 20:
              client = _context11.sent;
              return _context11.abrupt("continue", 23);
            case 22:
              throw _context11.t0;
            case 23:
              i++;
              _context11.next = 5;
              break;
            case 26:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this, [[5, 11]]);
      }));
      function SSUBSCRIBE(_x33, _x34, _x35) {
        return _SSUBSCRIBE.apply(this, arguments);
      }
      return SSUBSCRIBE;
    }()
  }, {
    key: "SUNSUBSCRIBE",
    value: function SUNSUBSCRIBE(channels, listener, bufferMode) {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").executeShardedUnsubscribeCommand(Array.isArray(channels) ? channels[0] : channels, function (client) {
        return client.SUNSUBSCRIBE(channels, listener, bufferMode);
      });
    }
  }, {
    key: "quit",
    value: function quit() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").quit();
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").disconnect();
    }
  }, {
    key: "nodeClient",
    value: function nodeClient(node) {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").nodeClient(node);
    }
  }, {
    key: "getRandomNode",
    value: function getRandomNode() {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getRandomNode();
    }
  }, {
    key: "getSlotRandomNode",
    value: function getSlotRandomNode(slot) {
      return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getSlotRandomNode(slot);
    }
    /**
     * @deprecated use `.masters` instead
     */
  }, {
    key: "getMasters",
    value: function getMasters() {
      return this.masters;
    }
    /**
     * @deprecated use `.slots[<SLOT>]` instead
     */
  }, {
    key: "getSlotMaster",
    value: function getSlotMaster(slot) {
      return this.slots[slot].master;
    }
  }], [{
    key: "extractFirstKey",
    value: function extractFirstKey(command, originalArgs, redisArgs) {
      if (command.FIRST_KEY_INDEX === undefined) {
        return undefined;
      } else if (typeof command.FIRST_KEY_INDEX === 'number') {
        return redisArgs[command.FIRST_KEY_INDEX];
      }
      return command.FIRST_KEY_INDEX.apply(command, _toConsumableArray(originalArgs));
    }
  }, {
    key: "create",
    value: function create(options) {
      return new ((0, commander_1.attachExtensions)({
        BaseClass: RedisCluster,
        modulesExecutor: RedisCluster.prototype.commandsExecutor,
        modules: options === null || options === void 0 ? void 0 : options.modules,
        functionsExecutor: RedisCluster.prototype.functionsExecutor,
        functions: options === null || options === void 0 ? void 0 : options.functions,
        scriptsExecutor: RedisCluster.prototype.scriptsExecutor,
        scripts: options === null || options === void 0 ? void 0 : options.scripts
      }))(options);
    }
  }]);
  return RedisCluster;
}(events_1.EventEmitter);
exports["default"] = RedisCluster;
_RedisCluster_options = new WeakMap(), _RedisCluster_slots = new WeakMap(), _RedisCluster_Multi = new WeakMap(), _RedisCluster_instances = new WeakSet(), _RedisCluster_execute = /*#__PURE__*/function () {
  var _RedisCluster_execute2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(firstKey, isReadonly, executor) {
    var _classPrivateFieldGe2;
    var maxCommandRedirections, client, i, address, redirectTo;
    return _regeneratorRuntime().wrap(function _callee12$(_context12) {
      while (1) switch (_context12.prev = _context12.next) {
        case 0:
          maxCommandRedirections = (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _RedisCluster_options, "f").maxCommandRedirections) !== null && _classPrivateFieldGe2 !== void 0 ? _classPrivateFieldGe2 : 16;
          _context12.next = 3;
          return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getClient(firstKey, isReadonly);
        case 3:
          client = _context12.sent;
          i = 0;
        case 5:
          _context12.prev = 5;
          _context12.next = 8;
          return executor(client);
        case 8:
          return _context12.abrupt("return", _context12.sent);
        case 11:
          _context12.prev = 11;
          _context12.t0 = _context12["catch"](5);
          if (!(++i > maxCommandRedirections || !(_context12.t0 instanceof errors_1.ErrorReply))) {
            _context12.next = 15;
            break;
          }
          throw _context12.t0;
        case 15:
          if (!_context12.t0.message.startsWith('ASK')) {
            _context12.next = 34;
            break;
          }
          address = _context12.t0.message.substring(_context12.t0.message.lastIndexOf(' ') + 1);
          _context12.next = 19;
          return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getMasterByAddress(address);
        case 19:
          redirectTo = _context12.sent;
          if (redirectTo) {
            _context12.next = 26;
            break;
          }
          _context12.next = 23;
          return __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client);
        case 23:
          _context12.next = 25;
          return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getMasterByAddress(address);
        case 25:
          redirectTo = _context12.sent;
        case 26:
          if (redirectTo) {
            _context12.next = 28;
            break;
          }
          throw new Error("Cannot find node ".concat(address));
        case 28:
          _context12.next = 30;
          return redirectTo.asking();
        case 30:
          client = redirectTo;
          return _context12.abrupt("continue", 42);
        case 34:
          if (!_context12.t0.message.startsWith('MOVED')) {
            _context12.next = 41;
            break;
          }
          _context12.next = 37;
          return __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client);
        case 37:
          _context12.next = 39;
          return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getClient(firstKey, isReadonly);
        case 39:
          client = _context12.sent;
          return _context12.abrupt("continue", 42);
        case 41:
          throw _context12.t0;
        case 42:
          i++;
          _context12.next = 5;
          break;
        case 45:
        case "end":
          return _context12.stop();
      }
    }, _callee12, this, [[5, 11]]);
  }));
  function _RedisCluster_execute(_x36, _x37, _x38) {
    return _RedisCluster_execute2.apply(this, arguments);
  }
  return _RedisCluster_execute;
}();
(0, commander_1.attachCommands)({
  BaseClass: RedisCluster,
  commands: commands_1["default"],
  executor: RedisCluster.prototype.commandsExecutor
});