"use strict";

var Promise = require('bluebird');
var debug = require('debug')('cypress:cli');
var path = require('path');
var util = require('../util');
var state = require('../tasks/state');
var _require = require('../errors'),
  throwFormErrorText = _require.throwFormErrorText,
  errors = _require.errors;
var getVersions = function getVersions() {
  return Promise["try"](function () {
    if (util.getEnv('CYPRESS_RUN_BINARY')) {
      var envBinaryPath = path.resolve(util.getEnv('CYPRESS_RUN_BINARY'));
      return state.parseRealPlatformBinaryFolderAsync(envBinaryPath).then(function (envBinaryDir) {
        if (!envBinaryDir) {
          return throwFormErrorText(errors.CYPRESS_RUN_BINARY.notValid(envBinaryPath))();
        }
        debug('CYPRESS_RUN_BINARY has binaryDir:', envBinaryDir);
        return envBinaryDir;
      })["catch"]({
        code: 'ENOENT'
      }, function (err) {
        return throwFormErrorText(errors.CYPRESS_RUN_BINARY.notValid(envBinaryPath))(err.message);
      });
    }
    return state.getBinaryDir();
  }).then(state.getBinaryPkgAsync).then(function (pkg) {
    var versions = {
      binary: state.getBinaryPkgVersion(pkg),
      electronVersion: state.getBinaryElectronVersion(pkg),
      electronNodeVersion: state.getBinaryElectronNodeVersion(pkg)
    };
    debug('binary versions %o', versions);
    return versions;
  }).then(function (binaryVersions) {
    var buildInfo = util.pkgBuildInfo();
    var packageVersion = util.pkgVersion();
    if (!buildInfo) packageVersion += ' (development)';else if (!buildInfo.stable) packageVersion += ' (pre-release)';
    var versions = {
      "package": packageVersion,
      binary: binaryVersions.binary || 'not installed',
      electronVersion: binaryVersions.electronVersion || 'not found',
      electronNodeVersion: binaryVersions.electronNodeVersion || 'not found'
    };
    debug('combined versions %o', versions);
    return versions;
  });
};
module.exports = {
  getVersions: getVersions
};