"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var l = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var y = Object.getOwnPropertyNames;
var f = Object.prototype.hasOwnProperty;
var c = function c(t, o) {
    for (var a in o) l(t, a, {
      get: o[a],
      enumerable: !0
    });
  },
  u = function u(t, o, a, e) {
    if (o && _typeof(o) == "object" || typeof o == "function") {
      var _iterator = _createForOfIteratorHelper(y(o)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !f.call(t, n) && n !== a && l(t, n, {
            get: function get() {
              return o[n];
            },
            enumerable: !(e = s(o, n)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return t;
  };
var d = function d(t) {
  return u(l({}, "__esModule", {
    value: !0
  }), t);
};
var T = {};
c(T, {
  createLocaleProxy: function createLocaleProxy() {
    return h;
  }
});
module.exports = d(T);
var i = require("./errors/faker-error");
var r = function r() {
  throw new i.FakerError("You cannot edit the locale data on the faker instance");
};
function h(t) {
  var o = {};
  return new Proxy(t, {
    has: function has() {
      return !0;
    },
    get: function get(a, e) {
      return _typeof(e) == "symbol" || e === "nodeType" ? a[e] : e in o ? o[e] : o[e] = p(e, a[e]);
    },
    set: r,
    deleteProperty: r
  });
}
function p(t) {
  var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new Proxy(o, {
    has: function has(a, e) {
      return a[e] != null;
    },
    get: function get(a, e) {
      var n = a[e];
      if (_typeof(e) == "symbol" || e === "nodeType") return n;
      if (n === null) throw new i.FakerError("The locale data for '".concat(t, ".").concat(e.toString(), "' aren't applicable to this locale.\n  If you think this is a bug, please report it at: https://github.com/faker-js/faker"));
      if (n === void 0) throw new i.FakerError("The locale data for '".concat(t, ".").concat(e.toString(), "' are missing in this locale.\n  Please contribute the missing data to the project or use a locale/Faker instance that has these data.\n  For more information see https://fakerjs.dev/guide/localization.html"));
      return n;
    },
    set: r,
    deleteProperty: r
  });
}
0 && (module.exports = {
  createLocaleProxy: createLocaleProxy
});