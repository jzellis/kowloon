"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var t = Object.defineProperty;
var h = Object.getOwnPropertyDescriptor;
var a = Object.getOwnPropertyNames;
var r = Object.prototype.hasOwnProperty;
var u = function u(n, e) {
    for (var s in e) t(n, s, {
      get: e[s],
      enumerable: !0
    });
  },
  c = function c(n, e, s, l) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(a(e)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !r.call(n, i) && i !== s && t(n, i, {
            get: function get() {
              return e[i];
            },
            enumerable: !(l = h(e, i)) || l.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return n;
  };
var g = function g(n) {
  return c(t({}, "__esModule", {
    value: !0
  }), n);
};
var d = {};
u(d, {
  "default": function _default() {
    return b;
  }
});
module.exports = g(d);
var b = ["ab", "abseits", "abz\xFCglich", "an", "anfangs", "angesichts", "anhand", "anl\xE4sslich", "anstatt", "anstelle", "auf", "aufgrund", "aufseiten", "aus", "ausgangs", "ausschlie\xDFlich", "ausweislich", "au\xDFer", "au\xDFerhalb", "bar", "behufs", "bei", "beiderseits", "beidseits", "beim", "betreffend", "betreffs", "beziehentlich", "bez\xFCglich", "binnen", "bis", "contra", "dank", "diesseits", "durch", "einbez\xFCglich", "eingangs", "eingedenk", "einschlie\xDFlich", "entgegen", "entlang", "entsprechend", "exklusive", "fern", "fernab", "f\xFCr", "gegen", "gegen\xFCber", "gelegentlich", "gem\xE4\xDF", "gen", "getreu", "gleich", "halber", "hinsichtlich", "hinter", "in", "infolge", "inklusive", "inmitten", "innerhalb", "innert", "je", "jenseits", "kontra", "kraft", "lang", "laut", "links", "l\xE4ngs", "l\xE4ngsseits", "mangels", "minus", "mit", "mithilfe", "mitsamt", "mittels", "nach", "nahe", "namens", "neben", "nebst", "nordwestlich", "nord\xF6stlich", "n\xE4chst", "n\xF6rdlich", "ob", "oberhalb", "ohne", "per", "plus", "pro", "punkto", "rechts", "r\xFCcksichtlich", "samt", "seit", "seitens", "seitlich", "seitw\xE4rts", "sonder", "statt", "s\xFCdlich", "s\xFCdwestlich", "s\xFCd\xF6stlich", "trotz", "um", "unbeschadet", "uneingedenk", "unerachtet", "unfern", "ungeachtet", "ungerechnet", "unter", "unterhalb", "unweit", "vermittels", "vermittelst", "verm\xF6ge", "versus", "via", "vis-\xE0-vis", "voller", "vom", "von", "vonseiten", "vor", "vorbehaltlich", "vorg\xE4ngig", "wegen", "weitab", "westlich", "wider", "willen", "w\xE4hrend", "zeit", "zu", "zufolge", "zugunsten", "zuhanden", "zulasten", "zulieb", "zuliebe", "zum", "zun\xE4chst", "zur", "zuseiten", "zuungunsten", "zuwider", "zuz\xFCglich", "zwecks", "zwischen", "\xF6stlich", "\xFCber"];