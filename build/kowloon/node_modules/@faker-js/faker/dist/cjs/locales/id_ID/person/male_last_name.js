"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var t = Object.getOwnPropertyDescriptor;
var d = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var m = function m(n, a) {
    for (var r in a) o(n, r, {
      get: a[r],
      enumerable: !0
    });
  },
  g = function g(n, a, r, u) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(d(a)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !s.call(n, i) && i !== r && o(n, i, {
            get: function get() {
              return a[i];
            },
            enumerable: !(u = t(a, i)) || u.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return n;
  };
var h = function h(n) {
  return g(o({}, "__esModule", {
    value: !0
  }), n);
};
var l = {};
m(l, {
  "default": function _default() {
    return S;
  }
});
module.exports = h(l);
var S = ["Adriansyah", "Ardianto", "Anggriawan", "Ahmad", "Adhitama", "Abiputra", "Antoni", "Alamsyah", "Airlangga", "Abimanyu", "Agustian", "Arifin", "Ardana", "Aswandi", "Budiman", "Budiyanto", "Bagaskara", "Damanik", "Darmawan", "Dirgantara", "Darojat", "Firmansyah", "Firgantoro", "Fabian", "Febian", "Faresta", "Gunarto", "Gunawan", "Hardiansyah", "Habibi", "Hakim", "Halim", "Haryanto", "Hidayat", "Hidayanto", "Hutagalung", "Hutapea", "Hutasoit", "Himawan", "Hermawan", "Herlambang", "Handoko", "Haikal", "Irawan", "Iswahyudi", "Irfandi", "Kuswoyo", "Januar", "Jailani", "Kurniawan", "Kusumo", "Latupono", "Lazuardi", "Lesmana", "Maheswara", "Mahendra", "Mustofa", "Mansur", "Mandala", "Megantara", "Maulana", "Maryadi", "Mangunsong", "Manullang", "Marpaung", "Marbun", "Mahardika", "Narpati", "Natsir", "Nugroho", "Najmudin", "Nashiruddin", "Nainggolan", "Nababan", "Napitupulu", "Nugraha", "Nanda", "Oktavian", "Oktovian", "Pangestu", "Putra", "Pranowo", "Prabowo", "Pratama", "Prasetya", "Prasetyo", "Pradana", "Pradipta", "Prakasa", "Permadi", "Prasasta", "Prayoga", "Perdana", "Purnawarman", "Purnama", "Purwadi", "Ramadan", "Rajasa", "Rajata", "Rendra", "Rayhan", "Rahardian", "Saptono", "Santoso", "Saputra", "Saefullah", "Setiawan", "Suryono", "Suwarno", "Siregar", "Sihombing", "Salahudin", "Samosir", "Saragih", "Sihotang", "Simanjuntak", "Sinaga", "Simbolon", "Sitompul", "Sitorus", "Sirait", "Situmorang", "Syahreza", "Sabian", "Satria", "Supriyanto", "Sudrajat", "Tampubolon", "Thamrin", "Tamba", "Tarihoran", "Utama", "Uwais", "Wahyudin", "Waluyo", "Wibowo", "Winarno", "Wibisono", "Wijaya", "Widodo", "Wacana", "Waskita", "Wasita", "Wicaksono", "Wardana", "Yulianto", "Yanuar", "Yudhistira", "Zulkarnain"];