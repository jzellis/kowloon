"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e7) { throw _e7; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e8) { didErr = true; err = _e8; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var p = Object.getOwnPropertyDescriptor;
var b = Object.getOwnPropertyNames;
var y = Object.prototype.hasOwnProperty;
var d = function d(s, e) {
    for (var r in e) o(s, r, {
      get: e[r],
      enumerable: !0
    });
  },
  C = function C(s, e, r, n) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(b(e)),
        _step;
      try {
        var _loop = function _loop() {
          var t = _step.value;
          !y.call(s, t) && t !== r && o(s, t, {
            get: function get() {
              return e[t];
            },
            enumerable: !(n = p(e, t)) || n.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return s;
  };
var k = function k(s) {
  return C(o({}, "__esModule", {
    value: !0
  }), s);
};
var A = {};
d(A, {
  StringModule: function StringModule() {
    return x;
  }
});
module.exports = k(A);
var g = require("../../errors/faker-error");
var m = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
  u = "abcdefghijklmnopqrstuvwxyz".split(""),
  c = "0123456789".split(""),
  f = Math.pow(2, 20);
var x = /*#__PURE__*/function () {
  function x(e) {
    _classCallCheck(this, x);
    this.faker = e;
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(x.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var r = _step2.value;
        r === "constructor" || typeof this[r] != "function" || (this[r] = this[r].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(x, [{
    key: "fromCharacters",
    value: function fromCharacters(e) {
      var _this = this;
      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (r = this.faker.helpers.rangeToNumber(r), r <= 0) return "";
      if (typeof e == "string" && (e = e.split("")), e.length === 0) throw new g.FakerError("Unable to generate string: No characters to select from.");
      return this.faker.helpers.multiple(function () {
        return _this.faker.helpers.arrayElement(e);
      }, {
        count: r
      }).join("");
    }
  }, {
    key: "alpha",
    value: function alpha() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var i;
      typeof e == "number" && (e = {
        length: e
      });
      var r = this.faker.helpers.rangeToNumber((i = e.length) != null ? i : 1);
      if (r <= 0) return "";
      var _e = e,
        _e$casing = _e.casing,
        n = _e$casing === void 0 ? "mixed" : _e$casing;
      var _e2 = e,
        _e2$exclude = _e2.exclude,
        t = _e2$exclude === void 0 ? [] : _e2$exclude;
      typeof t == "string" && (t = t.split(""));
      var a;
      switch (n) {
        case "upper":
          a = _toConsumableArray(m);
          break;
        case "lower":
          a = _toConsumableArray(u);
          break;
        case "mixed":
        default:
          a = [].concat(_toConsumableArray(u), _toConsumableArray(m));
          break;
      }
      return a = a.filter(function (l) {
        return !t.includes(l);
      }), this.fromCharacters(a, r);
    }
  }, {
    key: "alphanumeric",
    value: function alphanumeric() {
      var _a, _a2, _a3;
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var i;
      typeof e == "number" && (e = {
        length: e
      });
      var r = this.faker.helpers.rangeToNumber((i = e.length) != null ? i : 1);
      if (r <= 0) return "";
      var _e3 = e,
        _e3$casing = _e3.casing,
        n = _e3$casing === void 0 ? "mixed" : _e3$casing;
      var _e4 = e,
        _e4$exclude = _e4.exclude,
        t = _e4$exclude === void 0 ? [] : _e4$exclude;
      typeof t == "string" && (t = t.split(""));
      var a = _toConsumableArray(c);
      switch (n) {
        case "upper":
          (_a = a).push.apply(_a, _toConsumableArray(m));
          break;
        case "lower":
          (_a2 = a).push.apply(_a2, _toConsumableArray(u));
          break;
        case "mixed":
        default:
          (_a3 = a).push.apply(_a3, _toConsumableArray(u).concat(_toConsumableArray(m)));
          break;
      }
      return a = a.filter(function (l) {
        return !t.includes(l);
      }), this.fromCharacters(a, r);
    }
  }, {
    key: "binary",
    value: function binary() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t;
      var _e$prefix = e.prefix,
        r = _e$prefix === void 0 ? "0b" : _e$prefix;
      var n = r;
      return n += this.fromCharacters(["0", "1"], (t = e.length) != null ? t : 1), n;
    }
  }, {
    key: "octal",
    value: function octal() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t;
      var _e$prefix2 = e.prefix,
        r = _e$prefix2 === void 0 ? "0o" : _e$prefix2;
      var n = r;
      return n += this.fromCharacters(["0", "1", "2", "3", "4", "5", "6", "7"], (t = e.length) != null ? t : 1), n;
    }
  }, {
    key: "hexadecimal",
    value: function hexadecimal() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var i;
      var _e$casing2 = e.casing,
        r = _e$casing2 === void 0 ? "mixed" : _e$casing2,
        _e$prefix3 = e.prefix,
        n = _e$prefix3 === void 0 ? "0x" : _e$prefix3,
        t = this.faker.helpers.rangeToNumber((i = e.length) != null ? i : 1);
      if (t <= 0) return n;
      var a = this.fromCharacters(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"], t);
      return r === "upper" ? a = a.toUpperCase() : r === "lower" && (a = a.toLowerCase()), "".concat(n).concat(a);
    }
  }, {
    key: "numeric",
    value: function numeric() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var l;
      typeof e == "number" && (e = {
        length: e
      });
      var r = this.faker.helpers.rangeToNumber((l = e.length) != null ? l : 1);
      if (r <= 0) return "";
      var _e5 = e,
        _e5$allowLeadingZeros = _e5.allowLeadingZeros,
        n = _e5$allowLeadingZeros === void 0 ? !0 : _e5$allowLeadingZeros;
      var _e6 = e,
        _e6$exclude = _e6.exclude,
        t = _e6$exclude === void 0 ? [] : _e6$exclude;
      typeof t == "string" && (t = t.split(""));
      var a = c.filter(function (h) {
        return !t.includes(h);
      });
      if (a.length === 0 || a.length === 1 && !n && a[0] === "0") throw new g.FakerError("Unable to generate numeric string, because all possible digits are excluded.");
      var i = "";
      return !n && !t.includes("0") && (i += this.faker.helpers.arrayElement(a.filter(function (h) {
        return h !== "0";
      }))), i += this.fromCharacters(a, r - i.length), i;
    }
  }, {
    key: "sample",
    value: function sample() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      e = this.faker.helpers.rangeToNumber(e), e >= f && (e = f);
      var r = {
        min: 33,
        max: 125
      };
      var n = "";
      for (; n.length < e;) n += String.fromCharCode(this.faker.number["int"](r));
      return n;
    }
  }, {
    key: "uuid",
    value: function uuid() {
      var _this2 = this;
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/x/g, function () {
        return _this2.faker.number.hex({
          min: 0,
          max: 15
        });
      }).replace(/y/g, function () {
        return _this2.faker.number.hex({
          min: 8,
          max: 11
        });
      });
    }
  }, {
    key: "nanoid",
    value: function nanoid() {
      var _this3 = this;
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;
      if (e = this.faker.helpers.rangeToNumber(e), e <= 0) return "";
      var r = [{
        value: function value() {
          return _this3.alphanumeric(1);
        },
        weight: 62
      }, {
        value: function value() {
          return _this3.faker.helpers.arrayElement(["_", "-"]);
        },
        weight: 2
      }];
      var n = "";
      for (; n.length < e;) {
        var t = this.faker.helpers.weightedArrayElement(r);
        n += t();
      }
      return n;
    }
  }, {
    key: "symbol",
    value: function symbol() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return this.fromCharacters(["!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"], e);
    }
  }]);
  return x;
}();
0 && (module.exports = {
  StringModule: StringModule
});