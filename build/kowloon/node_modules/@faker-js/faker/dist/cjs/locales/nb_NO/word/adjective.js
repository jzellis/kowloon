"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var n = Object.defineProperty;
var t = Object.getOwnPropertyDescriptor;
var r = Object.getOwnPropertyNames;
var k = Object.prototype.hasOwnProperty;
var d = function d(l, e) {
    for (var g in e) n(l, g, {
      get: e[g],
      enumerable: !0
    });
  },
  m = function m(l, e, g, s) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(r(e)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !k.call(l, i) && i !== g && n(l, i, {
            get: function get() {
              return e[i];
            },
            enumerable: !(s = t(e, i)) || s.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return l;
  };
var a = function a(l) {
  return m(n({}, "__esModule", {
    value: !0
  }), l);
};
var o = {};
d(o, {
  "default": function _default() {
    return u;
  }
});
module.exports = a(o);
var u = ["aktuell", "alvorlig", "ansvarlig", "ber\xF8mt", "betydelig", "bevisst", "bred", "dum", "dyp", "ekkel", "eksisterende", "ekte", "enkel", "ensom", "falsk", "fast", "felles", "fersk", "fjern", "flau", "f\xF8lsom", "forsiktig", "fremmed", "fryktelig", "glatt", "gravid", "grunnleggende", "heldig", "hemmelig", "hjelpsom", "hyppig", "imponerende", "kjedelig", "kul", "langsom", "lat", "lav", "lignende", "l\xF8s", "lovlig", "lykkelig", "lys", "menneskelig", "merkelig", "midlertidig", "mistenkelig", "modig", "m\xF8rk", "morsom", "motsatt", "mulig", "naturlig", "n\xE5v\xE6rende", "n\xF8dvendig", "n\xF8yaktig", "nysgjerrig", "nyttig", "offentlig", "opprinnelig", "ordentlig", "plutselig", "r\xE5", "rask", "regelmessig", "ren", "rettferdig", "rimelig", "rund", "ryddig", "sannsynlig", "selvsikker", "sint", "skarp", "skikkelig", "skyldig", "smal", "s\xF8t", "spennende", "stille", "stolt", "stram", "streng", "stygg", "sulten", "sunn", "synlig", "tilgjengelig", "tilstrekkelig", "tung", "tynn", "uavhengig", "ujevn", "ulovlig", "ulykkelig", "umiddelbar", "urettferdig", "vellykket", "vennlig", "verdifull", "vill", "villig", "voksen", "\xE6rlig", "\xE5pen", "\xE5penbar"];