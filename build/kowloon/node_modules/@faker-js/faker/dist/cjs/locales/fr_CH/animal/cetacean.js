"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var u = Object.defineProperty;
var r = Object.getOwnPropertyDescriptor;
var o = Object.getOwnPropertyNames;
var d = Object.prototype.hasOwnProperty;
var p = function p(a, e) {
    for (var i in e) u(a, i, {
      get: e[i],
      enumerable: !0
    });
  },
  c = function c(a, e, i, l) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(o(e)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !d.call(a, n) && n !== i && u(a, n, {
            get: function get() {
              return e[n];
            },
            enumerable: !(l = r(e, n)) || l.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var h = function h(a) {
  return c(u({}, "__esModule", {
    value: !0
  }), a);
};
var t = {};
p(t, {
  "default": function _default() {
    return s;
  }
});
module.exports = h(t);
var s = ["Baiji", "Baleine \xE0 bec de Blainville", "Baleine \xE0 bec de Gervais", "Baleine \xE0 bec de Gray", "Baleine \xE0 bec de Hubbs", "Baleine \xE0 bec de Layard", "Baleine \xE0 bec de Longman", "Baleine \xE0 bec de Perrin", "Baleine \xE0 bec de Sowerby", "Baleine \xE0 bec de Stejneger", "Baleine \xE0 bec de Travers", "Baleine \xE0 bec de True", "Baleine \xE0 bec pygm\xE9e", "Baleine \xE0 bec", "Baleine \xE0 bosse", "Baleine australe", "Baleine bleue", "Baleine bor\xE9ale", "Baleine de Cuvier", "Baleine de Minke", "Baleine du Groenland", "Baleine franche australe", "Baleine franche de Biscaye", "Baleine franche du Pacifique Nord", "Baleine grise", "Baleine noire australe", "Baleine pilote", "Baleine pygm\xE9e", "B\xE9luga", "B\xE9rardie de Baird", "Boto", "Cachalot nain", "Cachalot pygm\xE9e", "Cachalots", "Costero", "Dauphin \xE0 bec \xE9troit", "Dauphin \xE0 bosse du Pacifique", "Dauphin \xE0 flancs blancs", "Dauphin \xE0 long bec", "Dauphin \xE0 nez blanc", "Dauphin apt\xE8re austral", "Dauphin blanc de Chine", "Dauphin bleu et blanc", "Dauphin Burrunan", "Dauphin clym\xE8ne", "Dauphin commun \xE0 bec court", "Dauphin commun \xE0 long bec", "Dauphin de Chine", "Dauphin de Commerson", "Dauphin de Fraser", "Dauphin de Gill", "Dauphin de Guyane", "Dauphin de la Plata", "Dauphin de Peale", "Dauphin de Risso", "Dauphin du Cap", "Dauphin du Gange", "Dauphin du Nord", "Dauphin noir", "Dauphin obscur", "Dauphin sablier", "Dauphin tachet\xE9 pantropical", "Fausse orque", "Globic\xE9phale noir", "Globic\xE9phale tropical", "Globic\xE9phale", "Grand cachalot", "Grand dauphin", "Hyperoodon austral", "Hyperoodon bor\xE9al", "Jubarte", "Marsouin \xE0 lunettes", "Marsouin apt\xE8re", "Marsouin blanc", "Marsouin commun", "Marsouin de Burmeister", "Marsouin de Cuvier", "Marsouin de Lahille", "Marsouin du Golfe de Californie", "Marsouin du Pacifique", "Marsouins", "M\xE9gapt\xE8re", "M\xE9soplodon japonais", "Narval", "Orque pygm\xE9e", "Orque", "Petit rorqual de l\u2019Antarctique", "Petit rorqual", "Rorqual \xE0 bosse", "Rorqual bleu", "Rorqual bor\xE9al", "Rorqual commun", "Rorqual de Bryde", "Rorqual de Rudolphi", "Rorqual tropical", "Rorquals", "Sotalie", "Sousouc", "Tasmac\xE8te de Shepherd", "Tucuxi", "Whalphin", "Baleine \xE0 bec d'Andrews", "Baleine \xE0 bec d'Hector", "Baleine franche de l'Atlantique Nord", "Baleine noire de l'Atlantique Nord", "B\xE9rardie d'Arnoux", "Dauphin \xE0 aileron retrouss\xE9 d'Australie", "Dauphin \xE0 bosse de l'Atlantique", "Dauphin \xE0 bosse de l'Indo-Pacifique", "Dauphin \xE0 bosse de l'oc\xE9an Indien", "Dauphin commun d'Arabie", "Dauphin d'\xC9lectre", "Dauphin d'Hector", "Dauphin de l'Amazone", "Dauphin de l'Indus", "Dauphin de l'Irrawaddy", "Dauphin rose de l'Amazone", "Dauphin tachet\xE9 de l'Atlantique", "Dauphins d'eau douce", "Grand dauphin de l'oc\xE9an Indien", "Marsouin de l'Inde", "Rorqual d'Omura"];