"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var e = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var k = Object.getOwnPropertyNames;
var u = Object.prototype.hasOwnProperty;
var t = function t(o, a) {
    for (var i in a) e(o, i, {
      get: a[i],
      enumerable: !0
    });
  },
  l = function l(o, a, i, r) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(k(a)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !u.call(o, n) && n !== i && e(o, n, {
            get: function get() {
              return a[n];
            },
            enumerable: !(r = s(a, n)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return o;
  };
var d = function d(o) {
  return l(e({}, "__esModule", {
    value: !0
  }), o);
};
var m = {};
t(m, {
  "default": function _default() {
    return v;
  }
});
module.exports = d(m);
var v = ["Afgh\xE1nist\xE1n", "Alb\xE1nie", "Al\u017E\xEDrsko", "Andorra", "Angola", "Antigua a Barbuda", "Argentina", "Arm\xE9nie", "Austr\xE1lie", "\xC1zerb\xE1jd\u017E\xE1n", "Bahamy", "Bahrajn", "Banglad\xE9\u0161", "Barbados", "Belgie", "Belize", "Benin", "B\u011Blorusko", "Bh\xFAt\xE1n", "Bol\xEDvie", "Bosna a Hercegovina", "Botswana", "Braz\xEDlie", "Brunej", "Bulharsko", "Burkina Faso", "Burundi", "\u010Cad", "\u010Cern\xE1 Hora", "\u010Cesko", "\u010C\xEDna", "D\xE1nsko", "DR Kongo", "Dominika", "Dominik", "D\u017Eibutsko", "Egypt", "Ekv\xE1dor", "Eritrea", "Estonsko", "Etiopie", "Fid\u017Ei", "Filip\xEDny", "Finsko", "Francie", "Gabon", "Gambie", "Gruzie", "N\u011Bmecko", "Ghana", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Chile", "Chorvatsko", "Indie", "Indon\xE9sie", "Ir\xE1k", "\xCDr\xE1n", "Irsko", "Island", "It\xE1lie", "Izrael", "Jamajka", "Japonsko", "Jemen", "Jihoaf", "Ji\u017En\xED Korea", "Ji\u017En\xED S\xFAd\xE1n", "Jord\xE1nsko", "Kambod\u017Ea", "Kamerun", "Kanada", "Kapverdy", "Katar", "Kazachst\xE1n", "Ke\u0148a", "Kiribati", "Kolumbie", "Komory", "Kongo", "Kostarika", "Kuba", "Kuvajt", "Kypr", "Kyrgyzst\xE1n", "Laos", "Lesotho", "Libanon", "Lib\xE9rie", "Libye", "Lichten\u0161tejnsko", "Litva", "Loty\u0161sko", "Lucembursko", "Madagaskar", "Ma\u010Farsko", "Makedonie", "Malajsie", "Malawi", "Maledivy", "Mali", "Malta", "Maroko", "Marshallovy ostrovy", "Maurit\xE1nie", "Mauricius", "Mexiko", "Mikron\xE9sie", "Moldavsko", "Monako", "Mongolsko", "Mosambik", "Myanmar (Barma)", "Namibie", "Nauru", "Nep\xE1l", "Niger", "Nig\xE9rie", "Nikaragua", "Nizozemsko", "Norsko", "Nov\xFD Z\xE9land", "Om\xE1n", "P\xE1kist\xE1n", "Palau", "Palestina", "Panama", "Papua-Nov\xE1 Guinea", "Paraguay", "Peru", "Pob\u0159e\u017E\xED slonoviny", "Polsko", "Portugalsko", "Rakousko", "Rovn\xEDkov\xE1 Guinea", "Rumunsko", "Rusko", "Rwanda", "\u0158ecko", "Salvador", "Samoa", "San Marino", "Sa\xFAdsk\xE1 Ar\xE1bie", "Senegal", "Severn\xED Korea", "Seychely", "Sierra Leone", "Singapur", "Slovensko", "Slovinsko", "Srbsko", "St\u0159edo", "Som\xE1lsko", "Surinam", "S\xFAd\xE1n", "Svat\xE1 Lucie", "Svat\xFD Kry\u0161tof a Nevis", "Svat\xFD Tom\xE1\u0161 a Princ\u016Fv ostrov", "Svat\xFD Vincenc a Grenadiny", "Svazijsko", "Spojen\xE9 arabsk\xE9 emir\xE1ty", "Spojen\xE9 kr\xE1lovstv\xED", "Spojen\xE9 st\xE1ty americk\xE9", "S\xFDrie", "\u0160alamounovy ostrovy", "\u0160pan\u011Blsko", "Sr\xED Lanka", "\u0160v\xE9dsko", "\u0160v\xFDcarsko", "T\xE1d\u017Eikist\xE1n", "Tanzanie", "Thajsko", "Togo", "Tonga", "Trinidad a Tobago", "Tunisko", "Turecko", "Turkmenist\xE1n", "Tuvalu", "Uganda", "Ukrajina", "Uruguay", "Uzbekist\xE1n", "Vanuatu", "Vatik\xE1n", "Venezuela", "Vietnam", "V\xFDchodn\xED Timor", "Zambie", "Zimbabwe"];