"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var u = Object.defineProperty;
var o = Object.getOwnPropertyDescriptor;
var n = Object.getOwnPropertyNames;
var t = Object.prototype.hasOwnProperty;
var c = function c(r, e) {
    for (var i in e) u(r, i, {
      get: e[i],
      enumerable: !0
    });
  },
  s = function s(r, e, i, l) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(n(e)),
        _step;
      try {
        var _loop = function _loop() {
          var a = _step.value;
          !t.call(r, a) && a !== i && u(r, a, {
            get: function get() {
              return e[a];
            },
            enumerable: !(l = o(e, a)) || l.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return r;
  };
var b = function b(r) {
  return s(u({}, "__esModule", {
    value: !0
  }), r);
};
var d = {};
c(d, {
  "default": function _default() {
    return m;
  }
});
module.exports = b(d);
var m = ["abricot", "acajou", "aigue-marine", "amande", "amarante", "ambre", "am\xE9thyste", "anthracite", "argent", "aubergine", "aurore", "avocat", "azur", "basan\xE9", "beurre", "bis", "bisque", "bistre", "bitume", "blanc cass\xE9", "blanc lunaire", "bl\xE9", "bleu acier", "bleu bleuet", "bleu canard", "bleu charrette", "bleu ciel", "bleu de cobalt", "bleu de Prusse", "bleu \xE9lectrique", "bleu givr\xE9", "bleu marine", "bleu nuit", "bleu outremer", "bleu paon", "bleu persan", "bleu p\xE9trole", "bleu roi", "bleu saphir", "bleu turquin", "bouton d'or", "brique", "bronze", "brou de noix", "caca d'oie", "cacao", "cachou", "caf\xE9", "cannelle", "capucine", "caramel", "carmin", "carotte", "chamois", "chartreuse", "cuivre", "chocolat", "cinabre", "citrouille", "c\u0153ruleum", "coquille d'\u0153uf", "corail", "cramoisi", "cuisse de nymphe", "cyan", "\xE9carlate", "\xE9cru", "\xE9meraude", "fauve", "flave", "fraise", "framboise", "fum\xE9e", "garance", "glauque", "glycine", "gr\xE8ge", "grenadine", "grenat", "gris acier", "gris de Payne", "gris fer", "gris perle", "gris souris", "groseille", "gueules", "h\xE9liotrope", "incarnat", "indigo", "isabelle", "jaune canari", "jaune citron", "jaune de cobalt", "couleurs de Mars", "jaune de Naples", "jaune imp\xE9rial", "jaune mimosa", "outremer v\xE9ritable", "lavalli\xE8re", "lavande", "lie de vin", "lilas", "lime", "lin", "magenta", "ma\xEFs", "malachite", "mandarine", "marron", "mastic", "mauve", "menthe", "moutarde", "nacarat", "nankin", "noisette", "ocre", "ocre rouge", "olive", "or", "orange br\xFBl\xE9", "orchid\xE9e", "orpiment", "paille", "parme", "pelure d'oignon", "pervenche", "pistache", "poil de chameau", "ponceau", "pourpre", "prasin", "prune", "puce", "rose Mountbatten", "oxyde de fer", "rouge cardinal", "rouge cerise", "rouge d'Andrinople", "rouge de Falun", "rouge feu", "rouge tomate", "tomette", "rouille", "rubis", "sable", "safre", "sang de b\u0153uf", "sanguine", "sarcelle", "saumon", "s\xE9pia", "sinople", "smalt", "soufre", "tabac", "terre d'ombre", "topaze", "tourterelle", "turquoise", "vanille", "vermeil", "vermillon", "vert bouteille", "vert c\xE9ladon", "vert d'eau", "vert-de-gris", "vert de Hooker", "vert de vessie", "vert \xE9pinard", "vert imp\xE9rial", "vert lichen", "vert oxyde de chrome", "vert perroquet", "vert poireau", "vert pomme", "vert prairie", "vert printemps", "vert sapin", "vert sauge", "vert tilleul", "vert V\xE9ron\xE8se", "violet", "violet d'\xE9v\xEAque", "viride", "zinzolin"];