"use strict";

/* eslint-env mocha */

var assert = require('assert');
var os = require('os');
var proxyquire = require('proxyquire');
var platforms = [['aix', "".concat(os.homedir(), "/.cache/linusu")], ['darwin', "".concat(os.homedir(), "/Library/Caches/linusu")], ['freebsd', "".concat(os.homedir(), "/.cache/linusu")], ['linux', "".concat(os.homedir(), "/.cache/linusu")], ['netbsd', "".concat(os.homedir(), "/.cache/linusu")], ['openbsd', "".concat(os.homedir(), "/.cache/linusu")], ['sunos', "".concat(os.homedir(), "/.cache/linusu")], ['win32', "".concat(os.homedir(), "/AppData/Local/linusu/Cache")]];
platforms.forEach(function (_platform) {
  describe(_platform[0], function () {
    var cachedir;
    before(function () {
      var os = {
        platform: function platform() {
          return _platform[0];
        }
      };
      cachedir = proxyquire('./', {
        os: os
      });
    });
    it('should give the correct path', function () {
      var actual = cachedir('linusu');
      var expected = _platform[1];
      assert.strictEqual(actual, expected);
    });
    if (_platform[0] === 'win32') {
      describe('when LOCALAPPDATA is set', function () {
        it('should give the correct path', function () {
          var oldLocalAppData = process.env.LOCALAPPDATA;
          process.env.LOCALAPPDATA = 'X:/LocalAppData';
          var actual = cachedir('linusu');
          process.env.LOCALAPPDATA = oldLocalAppData;
          var expected = 'X:/LocalAppData/linusu/Cache';
          assert.strictEqual(actual, expected);
        });
      });
    }
    it('should throw on bad input', function () {
      assert["throws"](function () {
        return cachedir();
      });
      assert["throws"](function () {
        return cachedir('');
      });
      assert["throws"](function () {
        return cachedir({});
      });
      assert["throws"](function () {
        return cachedir([]);
      });
      assert["throws"](function () {
        return cachedir(null);
      });
      assert["throws"](function () {
        return cachedir(1337);
      });
      assert["throws"](function () {
        return cachedir('test!!');
      });
      assert["throws"](function () {
        return cachedir(undefined);
      });
    });
  });
});
describe('fallback', function () {
  it('should fallback to posix with warning', function () {
    var originalError = console.error;
    try {
      var logs = [];
      console.error = function (msg) {
        return logs.push(msg);
      };
      var _os = {
        platform: function platform() {
          return 'test';
        }
      };
      var cachedir = proxyquire('./', {
        os: _os
      });
      var actual = cachedir('linusu');
      var expected = "".concat(_os.homedir(), "/.cache/linusu");
      assert.strictEqual(actual, expected);
      assert.deepStrictEqual(logs, ["(node:".concat(process.pid, ") [cachedir] Warning: the platform \"test\" is not currently supported by node-cachedir, falling back to \"posix\". Please file an issue with your platform here: https://github.com/LinusU/node-cachedir/issues/new")]);
    } finally {
      console.error = originalError;
    }
  });
});