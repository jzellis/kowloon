"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e6) { throw _e6; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e7) { didErr = true; err = _e7; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var b = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var c = Object.getOwnPropertyNames;
var g = Object.prototype.hasOwnProperty;
var h = function h(i, e) {
    for (var n in e) b(i, n, {
      get: e[n],
      enumerable: !0
    });
  },
  x = function x(i, e, n, r) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(c(e)),
        _step;
      try {
        var _loop = function _loop() {
          var t = _step.value;
          !g.call(i, t) && t !== n && b(i, t, {
            get: function get() {
              return e[t];
            },
            enumerable: !(r = s(e, t)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var l = function l(i) {
  return x(b({}, "__esModule", {
    value: !0
  }), i);
};
var y = {};
h(y, {
  NumberModule: function NumberModule() {
    return o;
  }
});
module.exports = l(y);
var u = require("../../errors/faker-error");
var o = /*#__PURE__*/function () {
  function o(e) {
    _classCallCheck(this, o);
    this.faker = e;
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(o.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var n = _step2.value;
        n === "constructor" || typeof this[n] != "function" || (this[n] = this[n].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(o, [{
    key: "int",
    value: function int() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        max: e
      });
      var _e = e,
        _e$min = _e.min,
        n = _e$min === void 0 ? 0 : _e$min,
        _e$max = _e.max,
        r = _e$max === void 0 ? Number.MAX_SAFE_INTEGER : _e$max,
        t = Math.ceil(n),
        a = Math.floor(r);
      if (t === a) return t;
      if (a < t) throw r >= n ? new u.FakerError("No integer value between ".concat(n, " and ").concat(r, " found.")) : new u.FakerError("Max ".concat(r, " should be greater than min ").concat(n, "."));
      var m = this.faker._mersenne.next();
      return Math.floor(m * (a + 1 - t) + t);
    }
  }, {
    key: "float",
    value: function float() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        max: e
      });
      var _e2 = e,
        _e2$min = _e2.min,
        n = _e2$min === void 0 ? 0 : _e2$min,
        _e2$max = _e2.max,
        r = _e2$max === void 0 ? 1 : _e2$max,
        t = _e2.precision;
      if (r === n) return n;
      if (r < n) throw new u.FakerError("Max ".concat(r, " should be greater than min ").concat(n, "."));
      if (t !== void 0) {
        if (t <= 0) throw new u.FakerError("Precision should be greater than 0.");
        var m = 1 / t;
        return this["int"]({
          min: n * m,
          max: r * m
        }) / m;
      }
      return this.faker._mersenne.next() * (r - n) + n;
    }
  }, {
    key: "binary",
    value: function binary() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        max: e
      });
      var _e3 = e,
        _e3$min = _e3.min,
        n = _e3$min === void 0 ? 0 : _e3$min,
        _e3$max = _e3.max,
        r = _e3$max === void 0 ? 1 : _e3$max;
      return this["int"]({
        max: r,
        min: n
      }).toString(2);
    }
  }, {
    key: "octal",
    value: function octal() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        max: e
      });
      var _e4 = e,
        _e4$min = _e4.min,
        n = _e4$min === void 0 ? 0 : _e4$min,
        _e4$max = _e4.max,
        r = _e4$max === void 0 ? 7 : _e4$max;
      return this["int"]({
        max: r,
        min: n
      }).toString(8);
    }
  }, {
    key: "hex",
    value: function hex() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        max: e
      });
      var _e5 = e,
        _e5$min = _e5.min,
        n = _e5$min === void 0 ? 0 : _e5$min,
        _e5$max = _e5.max,
        r = _e5$max === void 0 ? 15 : _e5$max;
      return this["int"]({
        max: r,
        min: n
      }).toString(16);
    }
  }, {
    key: "bigInt",
    value: function bigInt() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var f, m;
      (typeof e == "bigint" || typeof e == "number" || typeof e == "string" || typeof e == "boolean") && (e = {
        max: e
      });
      var n = BigInt((f = e.min) != null ? f : 0),
        r = BigInt((m = e.max) != null ? m : n + BigInt(999999999999999));
      if (r === n) return n;
      if (r < n) throw new u.FakerError("Max ".concat(r, " should be larger then min ").concat(n, "."));
      var t = r - n,
        a = BigInt(this.faker.string.numeric({
          length: t.toString(10).length,
          allowLeadingZeros: !0
        })) % (t + BigInt(1));
      return n + a;
    }
  }]);
  return o;
}();
0 && (module.exports = {
  NumberModule: NumberModule
});