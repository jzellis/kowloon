"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformArguments = exports.ClientKillFilters = void 0;
var ClientKillFilters;
(function (ClientKillFilters) {
  ClientKillFilters["ADDRESS"] = "ADDR";
  ClientKillFilters["LOCAL_ADDRESS"] = "LADDR";
  ClientKillFilters["ID"] = "ID";
  ClientKillFilters["TYPE"] = "TYPE";
  ClientKillFilters["USER"] = "USER";
  ClientKillFilters["SKIP_ME"] = "SKIPME";
})(ClientKillFilters = exports.ClientKillFilters || (exports.ClientKillFilters = {}));
function transformArguments(filters) {
  var args = ['CLIENT', 'KILL'];
  if (Array.isArray(filters)) {
    var _iterator = _createForOfIteratorHelper(filters),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var filter = _step.value;
        pushFilter(args, filter);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    pushFilter(args, filters);
  }
  return args;
}
exports.transformArguments = transformArguments;
function pushFilter(args, filter) {
  if (filter === ClientKillFilters.SKIP_ME) {
    args.push('SKIPME');
    return;
  }
  args.push(filter.filter);
  switch (filter.filter) {
    case ClientKillFilters.ADDRESS:
      args.push(filter.address);
      break;
    case ClientKillFilters.LOCAL_ADDRESS:
      args.push(filter.localAddress);
      break;
    case ClientKillFilters.ID:
      args.push(typeof filter.id === 'number' ? filter.id.toString() : filter.id);
      break;
    case ClientKillFilters.TYPE:
      args.push(filter.type);
      break;
    case ClientKillFilters.USER:
      args.push(filter.username);
      break;
    case ClientKillFilters.SKIP_ME:
      args.push(filter.skipMe ? 'yes' : 'no');
      break;
  }
}