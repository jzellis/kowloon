'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var ArrayPrompt = require('../types/array');
var utils = require('../utils');
var SelectPrompt = /*#__PURE__*/function (_ArrayPrompt) {
  _inherits(SelectPrompt, _ArrayPrompt);
  var _super = _createSuper(SelectPrompt);
  function SelectPrompt(options) {
    var _this;
    _classCallCheck(this, SelectPrompt);
    _this = _super.call(this, options);
    _this.emptyError = _this.options.emptyError || 'No items were selected';
    return _this;
  }
  _createClass(SelectPrompt, [{
    key: "dispatch",
    value: function () {
      var _dispatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(s, key) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!this.multiple) {
                _context.next = 11;
                break;
              }
              if (!this[key.name]) {
                _context.next = 7;
                break;
              }
              _context.next = 4;
              return this[key.name](s, key);
            case 4:
              _context.t0 = _context.sent;
              _context.next = 10;
              break;
            case 7:
              _context.next = 9;
              return _get(_getPrototypeOf(SelectPrompt.prototype), "dispatch", this).call(this, s, key);
            case 9:
              _context.t0 = _context.sent;
            case 10:
              return _context.abrupt("return", _context.t0);
            case 11:
              this.alert();
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function dispatch(_x, _x2) {
        return _dispatch.apply(this, arguments);
      }
      return dispatch;
    }()
  }, {
    key: "separator",
    value: function separator() {
      if (this.options.separator) return _get(_getPrototypeOf(SelectPrompt.prototype), "separator", this).call(this);
      var sep = this.styles.muted(this.symbols.ellipsis);
      return this.state.submitted ? _get(_getPrototypeOf(SelectPrompt.prototype), "separator", this).call(this) : sep;
    }
  }, {
    key: "pointer",
    value: function pointer(choice, i) {
      return !this.multiple || this.options.pointer ? _get(_getPrototypeOf(SelectPrompt.prototype), "pointer", this).call(this, choice, i) : '';
    }
  }, {
    key: "indicator",
    value: function indicator(choice, i) {
      return this.multiple ? _get(_getPrototypeOf(SelectPrompt.prototype), "indicator", this).call(this, choice, i) : '';
    }
  }, {
    key: "choiceMessage",
    value: function choiceMessage(choice, i) {
      var message = this.resolve(choice.message, this.state, choice, i);
      if (choice.role === 'heading' && !utils.hasColor(message)) {
        message = this.styles.strong(message);
      }
      return this.resolve(message, this.state, choice, i);
    }
  }, {
    key: "choiceSeparator",
    value: function choiceSeparator() {
      return ':';
    }
  }, {
    key: "renderChoice",
    value: function () {
      var _renderChoice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(choice, i) {
        var _this2 = this;
        var focused, pointer, check, hint, ind, msg, line;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.onChoice(choice, i);
            case 2:
              focused = this.index === i;
              _context2.next = 5;
              return this.pointer(choice, i);
            case 5:
              pointer = _context2.sent;
              _context2.next = 8;
              return this.indicator(choice, i);
            case 8:
              _context2.t0 = _context2.sent;
              _context2.t1 = choice.pad || '';
              check = _context2.t0 + _context2.t1;
              _context2.next = 13;
              return this.resolve(choice.hint, this.state, choice, i);
            case 13:
              hint = _context2.sent;
              if (hint && !utils.hasColor(hint)) {
                hint = this.styles.muted(hint);
              }
              ind = this.indent(choice);
              _context2.next = 18;
              return this.choiceMessage(choice, i);
            case 18:
              msg = _context2.sent;
              line = function line() {
                return [_this2.margin[3], ind + pointer + check, msg, _this2.margin[1], hint].filter(Boolean).join(' ');
              };
              if (!(choice.role === 'heading')) {
                _context2.next = 22;
                break;
              }
              return _context2.abrupt("return", line());
            case 22:
              if (!choice.disabled) {
                _context2.next = 25;
                break;
              }
              if (!utils.hasColor(msg)) {
                msg = this.styles.disabled(msg);
              }
              return _context2.abrupt("return", line());
            case 25:
              if (focused) {
                msg = this.styles.em(msg);
              }
              return _context2.abrupt("return", line());
            case 27:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function renderChoice(_x3, _x4) {
        return _renderChoice.apply(this, arguments);
      }
      return renderChoice;
    }()
  }, {
    key: "renderChoices",
    value: function () {
      var _renderChoices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var _this3 = this;
        var choices, visible, result, header;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(this.state.loading === 'choices')) {
                _context4.next = 2;
                break;
              }
              return _context4.abrupt("return", this.styles.warning('Loading choices'));
            case 2:
              if (!this.state.submitted) {
                _context4.next = 4;
                break;
              }
              return _context4.abrupt("return", '');
            case 4:
              choices = this.visible.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ch, i) {
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return _this3.renderChoice(ch, i);
                      case 2:
                        return _context3.abrupt("return", _context3.sent);
                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function (_x5, _x6) {
                  return _ref.apply(this, arguments);
                };
              }());
              _context4.next = 7;
              return Promise.all(choices);
            case 7:
              visible = _context4.sent;
              if (!visible.length) visible.push(this.styles.danger('No matching choices'));
              result = this.margin[0] + visible.join('\n');
              if (!this.options.choicesHeader) {
                _context4.next = 14;
                break;
              }
              _context4.next = 13;
              return this.resolve(this.options.choicesHeader, this.state);
            case 13:
              header = _context4.sent;
            case 14:
              return _context4.abrupt("return", [header, result].filter(Boolean).join('\n'));
            case 15:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function renderChoices() {
        return _renderChoices.apply(this, arguments);
      }
      return renderChoices;
    }()
  }, {
    key: "format",
    value: function format() {
      var _this4 = this;
      if (!this.state.submitted || this.state.cancelled) return '';
      if (Array.isArray(this.selected)) {
        return this.selected.map(function (choice) {
          return _this4.styles.primary(choice.name);
        }).join(', ');
      }
      return this.styles.primary(this.selected.name);
    }
  }, {
    key: "render",
    value: function () {
      var _render = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var _this$state, submitted, size, prompt, header, prefix, separator, message, output, help, body, footer;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _this$state = this.state, submitted = _this$state.submitted, size = _this$state.size;
              prompt = '';
              _context5.next = 4;
              return this.header();
            case 4:
              header = _context5.sent;
              _context5.next = 7;
              return this.prefix();
            case 7:
              prefix = _context5.sent;
              _context5.next = 10;
              return this.separator();
            case 10:
              separator = _context5.sent;
              _context5.next = 13;
              return this.message();
            case 13:
              message = _context5.sent;
              if (this.options.promptLine !== false) {
                prompt = [prefix, message, separator, ''].join(' ');
                this.state.prompt = prompt;
              }
              _context5.next = 17;
              return this.format();
            case 17:
              output = _context5.sent;
              _context5.next = 20;
              return this.error();
            case 20:
              _context5.t0 = _context5.sent;
              if (_context5.t0) {
                _context5.next = 25;
                break;
              }
              _context5.next = 24;
              return this.hint();
            case 24:
              _context5.t0 = _context5.sent;
            case 25:
              help = _context5.t0;
              _context5.next = 28;
              return this.renderChoices();
            case 28:
              body = _context5.sent;
              _context5.next = 31;
              return this.footer();
            case 31:
              footer = _context5.sent;
              if (output) prompt += output;
              if (help && !prompt.includes(help)) prompt += ' ' + help;
              if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {
                prompt += this.styles.danger(this.emptyError);
              }
              this.clear(size);
              this.write([header, prompt, body, footer].filter(Boolean).join('\n'));
              this.write(this.margin[2]);
              this.restore();
            case 39:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function render() {
        return _render.apply(this, arguments);
      }
      return render;
    }()
  }]);
  return SelectPrompt;
}(ArrayPrompt);
module.exports = SelectPrompt;