"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var n = Object.defineProperty;
var l = Object.getOwnPropertyDescriptor;
var s = Object.getOwnPropertyNames;
var d = Object.prototype.hasOwnProperty;
var t = function t(r, e) {
    for (var i in e) n(r, i, {
      get: e[i],
      enumerable: !0
    });
  },
  u = function u(r, e, i, o) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(s(e)),
        _step;
      try {
        var _loop = function _loop() {
          var a = _step.value;
          !d.call(r, a) && a !== i && n(r, a, {
            get: function get() {
              return e[a];
            },
            enumerable: !(o = l(e, a)) || o.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return r;
  };
var h = function h(r) {
  return u(n({}, "__esModule", {
    value: !0
  }), r);
};
var J = {};
t(J, {
  "default": function _default() {
    return c;
  }
});
module.exports = h(J);
var c = ["Alfons", "Alfred", "Alois", "Andr\xE9", "Andreas", "Angelo", "Antoine", "Anton", "Antonio", "Armin", "Arnold", "Arthur", "Beat", "Bernard", "Bernhard", "Bruno", "Carlo", "Charles", "Christian", "Christoph", "Christophe", "Claude", "Claudio", "Daniel", "Daniele", "David", "Denis", "Didier", "Dieter", "Dominik", "Dominique", "Edgar", "Eduard", "Edwin", "Emil", "Enrico", "Eric", "Erich", "Ernst", "Erwin", "Eugen", "Felix", "Ferdinand", "Francesco", "Francis", "Franco", "Fran\xE7ois", "Frank", "Franz", "Fr\xE9d\xE9ric", "Fredy", "Fridolin", "Friedrich", "Fritz", "Gabriel", "Georg", "Georges", "G\xE9rald", "G\xE9rard", "Gerhard", "Gianni", "Gilbert", "Giorgio", "Giovanni", "Giuseppe", "Gottfried", "Guido", "Guy", "Hans", "Hans-Peter", "Hans-Rudolf", "Hans-Ulrich", "Hansj\xF6rg", "Hanspeter", "Hansruedi", "Hansueli", "Harry", "Heinrich", "Heinz", "Helmut", "Henri", "Herbert", "Hermann", "Hubert", "Hugo", "Jacques", "Jakob", "Jan", "Jean-Claude", "Jean-Daniel", "Jean-Fran\xE7ois", "Jean-Jacques", "Jean-Louis", "Jean-Luc", "Jean-Marc", "Jean-Marie", "Jean-Paul", "Jean-Pierre", "Johann", "Johannes", "John", "J\xF6rg", "Josef", "Joseph", "J\xFCrg", "Karl", "Klaus", "Konrad", "Kurt", "Laurent", "Leo", "Louis", "Luca", "Luigi", "Lukas", "Manfred", "Manuel", "Marc", "Marcel", "Marco", "Mario", "Markus", "Martin", "Massimo", "Matthias", "Maurice", "Max", "Michael", "Michel", "Nicolas", "Niklaus", "Norbert", "Olivier", "Oskar", "Otto", "Paolo", "Pascal", "Patrick", "Paul", "Peter", "Philipp", "Philippe", "Pierre", "Pierre-Alain", "Pierre-Andr\xE9", "Pius", "Rainer", "Raymond", "Reinhard", "Remo", "Renato", "Rene", "Ren\xE9", "Reto", "Richard", "Rudolf", "Ruedi", "Samuel", "Sandro", "Serge", "Silvio", "Simon", "Stefan", "Stephan", "St\xE9phane", "Theo", "Theodor", "Thomas", "Ueli", "Ulrich", "Urs", "Victor", "Viktor", "Walter", "Werner", "Willi", "Willy", "Wolfgang", "Yves"];