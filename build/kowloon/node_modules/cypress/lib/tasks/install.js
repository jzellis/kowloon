"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var _ = require('lodash');
var os = require('os');
var path = require('path');
var chalk = require('chalk');
var debug = require('debug')('cypress:cli');
var _require = require('listr2'),
  Listr = _require.Listr;
var _Promise = require('bluebird');
var logSymbols = require('log-symbols');
var _require2 = require('common-tags'),
  stripIndent = _require2.stripIndent;
var fs = require('../fs');
var download = require('./download');
var util = require('../util');
var state = require('./state');
var unzip = require('./unzip');
var logger = require('../logger');
var _require3 = require('../errors'),
  throwFormErrorText = _require3.throwFormErrorText,
  errors = _require3.errors;
var verbose = require('../VerboseRenderer');
var _require4 = require('../../package.json'),
  buildInfo = _require4.buildInfo,
  version = _require4.version;
function _getBinaryUrlFromBuildInfo(arch, _ref) {
  var commitSha = _ref.commitSha,
    commitBranch = _ref.commitBranch;
  return "https://cdn.cypress.io/beta/binary/".concat(version, "/").concat(os.platform(), "-").concat(arch, "/").concat(commitBranch, "-").concat(commitSha, "/cypress.zip");
}
var alreadyInstalledMsg = function alreadyInstalledMsg() {
  if (!util.isPostInstall()) {
    logger.log(stripIndent(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      Skipping installation:\n\n        Pass the ", " option if you'd like to reinstall anyway.\n    "])), chalk.yellow('--force')));
  }
};
var displayCompletionMsg = function displayCompletionMsg() {
  // check here to see if we are globally installed
  if (util.isInstalledGlobally()) {
    // if we are display a warning
    logger.log();
    logger.warn(stripIndent(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      ", " Warning: It looks like you've installed Cypress globally.\n\n        This will work, but it's not recommended.\n\n        The recommended way to install Cypress is as a devDependency per project.\n\n        You should probably run these commands:\n\n        - ", "\n        - ", "\n    "], ["\n      ", " Warning: It looks like you\\'ve installed Cypress globally.\n\n        This will work, but it'\\s not recommended.\n\n        The recommended way to install Cypress is as a devDependency per project.\n\n        You should probably run these commands:\n\n        - ", "\n        - ", "\n    "])), logSymbols.warning, chalk.cyan('npm uninstall -g cypress'), chalk.cyan('npm install --save-dev cypress')));
    return;
  }
  logger.log();
  logger.log('You can now open Cypress by running:', chalk.cyan(path.join('node_modules', '.bin', 'cypress'), 'open'));
  logger.log();
  logger.log(chalk.grey('https://on.cypress.io/installing-cypress'));
  logger.log();
};
var downloadAndUnzip = function downloadAndUnzip(_ref2) {
  var version = _ref2.version,
    installDir = _ref2.installDir,
    downloadDir = _ref2.downloadDir;
  var progress = {
    throttle: 100,
    onProgress: null
  };
  var downloadDestination = path.join(downloadDir, "cypress-".concat(process.pid, ".zip"));
  var rendererOptions = getRendererOptions();

  // let the user know what version of cypress we're downloading!
  logger.log("Installing Cypress ".concat(chalk.gray("(version: ".concat(version, ")"))));
  logger.log();
  var tasks = new Listr([{
    options: {
      title: util.titleize('Downloading Cypress')
    },
    task: function task(ctx, _task) {
      // as our download progresses indicate the status
      progress.onProgress = progessify(_task, 'Downloading Cypress');
      return download.start({
        version: version,
        downloadDestination: downloadDestination,
        progress: progress
      }).then(function (redirectVersion) {
        if (redirectVersion) version = redirectVersion;
        debug("finished downloading file: ".concat(downloadDestination));
      }).then(function () {
        // save the download destination for unzipping
        util.setTaskTitle(_task, util.titleize(chalk.green('Downloaded Cypress')), rendererOptions.renderer);
      });
    }
  }, unzipTask({
    progress: progress,
    zipFilePath: downloadDestination,
    installDir: installDir,
    rendererOptions: rendererOptions
  }), {
    options: {
      title: util.titleize('Finishing Installation')
    },
    task: function task(ctx, _task2) {
      var cleanup = function cleanup() {
        debug('removing zip file %s', downloadDestination);
        return fs.removeAsync(downloadDestination);
      };
      return cleanup().then(function () {
        debug('finished installation in', installDir);
        util.setTaskTitle(_task2, util.titleize(chalk.green('Finished Installation'), chalk.gray(installDir)), rendererOptions.renderer);
      });
    }
  }], {
    rendererOptions: rendererOptions
  });

  // start the tasks!
  return _Promise.resolve(tasks.run());
};
var validateOS = function validateOS() {
  return util.getPlatformInfo().then(function (platformInfo) {
    return platformInfo.match(/(win32-x64|linux-x64|linux-arm64|darwin-x64|darwin-arm64)/);
  });
};

/**
 * Returns the version to install - either a string like `1.2.3` to be fetched
 * from the download server or a file path or HTTP URL.
 */
function getVersionOverride(_ref3) {
  var arch = _ref3.arch,
    envVarVersion = _ref3.envVarVersion,
    buildInfo = _ref3.buildInfo;
  // let this environment variable reset the binary version we need
  if (envVarVersion) {
    return envVarVersion;
  }
  if (buildInfo && !buildInfo.stable) {
    logger.log(chalk.yellow(stripIndent(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n        ", " Warning: You are installing a pre-release build of Cypress.\n\n        Bugs may be present which do not exist in production builds.\n\n        This build was created from:\n          * Commit SHA: ", "\n          * Commit Branch: ", "\n          * Commit Timestamp: ", "\n      "])), logSymbols.warning, buildInfo.commitSha, buildInfo.commitBranch, buildInfo.commitDate)));
    logger.log();
    return _getBinaryUrlFromBuildInfo(arch, buildInfo);
  }
}
function getEnvVarVersion() {
  if (!util.getEnv('CYPRESS_INSTALL_BINARY')) return;

  // because passed file paths are often double quoted
  // and might have extra whitespace around, be robust and trim the string
  var trimAndRemoveDoubleQuotes = true;
  var envVarVersion = util.getEnv('CYPRESS_INSTALL_BINARY', trimAndRemoveDoubleQuotes);
  debug('using environment variable CYPRESS_INSTALL_BINARY "%s"', envVarVersion);
  return envVarVersion;
}
var start = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var options,
      envVarVersion,
      envCache,
      pkgVersion,
      arch,
      versionOverride,
      versionToInstall,
      installDir,
      cacheDir,
      binaryDir,
      binaryPkg,
      binaryVersion,
      shouldInstall,
      getLocalFilePath,
      pathToLocalFile,
      absolutePath,
      rendererOptions,
      downloadDir,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          debug('installing with options %j', options);
          envVarVersion = getEnvVarVersion();
          if (!(envVarVersion === '0')) {
            _context2.next = 8;
            break;
          }
          debug('environment variable CYPRESS_INSTALL_BINARY = 0, skipping install');
          logger.log(stripIndent(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        ", " Skipping binary installation: Environment variable CYPRESS_INSTALL_BINARY = 0."])), chalk.yellow('Note:')));
          logger.log();
          return _context2.abrupt("return");
        case 8:
          _.defaults(options, {
            force: false,
            buildInfo: buildInfo
          });
          if (util.getEnv('CYPRESS_CACHE_FOLDER')) {
            envCache = util.getEnv('CYPRESS_CACHE_FOLDER');
            logger.log(stripIndent(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n        ", " Overriding Cypress cache directory to: ", "\n\n              Previous installs of Cypress may not be found.\n      "])), chalk.yellow('Note:'), chalk.cyan(envCache)));
            logger.log();
          }
          pkgVersion = util.pkgVersion();
          _context2.next = 13;
          return util.getRealArch();
        case 13:
          arch = _context2.sent;
          versionOverride = getVersionOverride({
            arch: arch,
            envVarVersion: envVarVersion,
            buildInfo: options.buildInfo
          });
          versionToInstall = versionOverride || pkgVersion;
          debug('version in package.json is %s, version to install is %s', pkgVersion, versionToInstall);
          installDir = state.getVersionDir(pkgVersion, options.buildInfo);
          cacheDir = state.getCacheDir();
          binaryDir = state.getBinaryDir(pkgVersion);
          _context2.next = 22;
          return validateOS();
        case 22:
          if (_context2.sent) {
            _context2.next = 24;
            break;
          }
          return _context2.abrupt("return", throwFormErrorText(errors.invalidOS)());
        case 24:
          _context2.next = 26;
          return fs.ensureDirAsync(cacheDir)["catch"]({
            code: 'EACCES'
          }, function (err) {
            return throwFormErrorText(errors.invalidCacheDirectory)(stripIndent(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    Failed to access ", ":\n\n    ", "\n    "])), chalk.cyan(cacheDir), err.message));
          });
        case 26:
          _context2.next = 28;
          return state.getBinaryPkgAsync(binaryDir);
        case 28:
          binaryPkg = _context2.sent;
          _context2.next = 31;
          return state.getBinaryPkgVersion(binaryPkg);
        case 31:
          binaryVersion = _context2.sent;
          shouldInstall = function shouldInstall() {
            if (!binaryVersion) {
              debug('no binary installed under cli version');
              return true;
            }
            logger.log();
            logger.log(stripIndent(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n      Cypress ", " is installed in ", "\n      "])), chalk.green(binaryVersion), chalk.cyan(installDir)));
            logger.log();
            if (options.force) {
              debug('performing force install over existing binary');
              return true;
            }
            if (binaryVersion === versionToInstall || !util.isSemver(versionToInstall)) {
              // our version matches, tell the user this is a noop
              alreadyInstalledMsg();
              return false;
            }
            return true;
          }; // noop if we've been told not to download
          if (shouldInstall()) {
            _context2.next = 35;
            break;
          }
          return _context2.abrupt("return", debug('Not downloading or installing binary'));
        case 35:
          if (envVarVersion) {
            logger.log(chalk.yellow(stripIndent(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n        ", " Warning: Forcing a binary version different than the default.\n\n          The CLI expected to install version: ", "\n\n          Instead we will install version: ", "\n\n          These versions may not work properly together.\n      "])), logSymbols.warning, chalk.green(pkgVersion), chalk.green(versionToInstall))));
            logger.log();
          }
          getLocalFilePath = /*#__PURE__*/function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var possibleFile;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return fs.pathExistsAsync(versionToInstall);
                  case 2:
                    if (!_context.sent) {
                      _context.next = 4;
                      break;
                    }
                    return _context.abrupt("return", path.extname(versionToInstall) === '.zip' ? versionToInstall : false);
                  case 4:
                    possibleFile = util.formAbsolutePath(versionToInstall);
                    debug('checking local file', possibleFile, 'cwd', process.cwd());

                    // if this exists return the path to it
                    // else false
                    _context.next = 8;
                    return fs.pathExistsAsync(possibleFile);
                  case 8:
                    _context.t0 = _context.sent;
                    if (!_context.t0) {
                      _context.next = 11;
                      break;
                    }
                    _context.t0 = path.extname(possibleFile) === '.zip';
                  case 11:
                    if (!_context.t0) {
                      _context.next = 13;
                      break;
                    }
                    return _context.abrupt("return", possibleFile);
                  case 13:
                    return _context.abrupt("return", false);
                  case 14:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function getLocalFilePath() {
              return _ref5.apply(this, arguments);
            };
          }();
          _context2.next = 39;
          return getLocalFilePath();
        case 39:
          pathToLocalFile = _context2.sent;
          if (!pathToLocalFile) {
            _context2.next = 46;
            break;
          }
          absolutePath = path.resolve(versionToInstall);
          debug('found local file at', absolutePath);
          debug('skipping download');
          rendererOptions = getRendererOptions();
          return _context2.abrupt("return", new Listr([unzipTask({
            progress: {
              throttle: 100,
              onProgress: null
            },
            zipFilePath: absolutePath,
            installDir: installDir,
            rendererOptions: rendererOptions
          })], {
            rendererOptions: rendererOptions
          }).run());
        case 46:
          if (options.force) {
            debug('Cypress already installed at', installDir);
            debug('but the installation was forced');
          }
          debug('preparing to download and unzip version ', versionToInstall, 'to path', installDir);
          downloadDir = os.tmpdir();
          _context2.next = 51;
          return downloadAndUnzip({
            version: versionToInstall,
            installDir: installDir,
            downloadDir: downloadDir
          });
        case 51:
          _context2.next = 53;
          return _Promise.delay(1000);
        case 53:
          displayCompletionMsg();
        case 54:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function start() {
    return _ref4.apply(this, arguments);
  };
}();
module.exports = {
  start: start,
  _getBinaryUrlFromBuildInfo: _getBinaryUrlFromBuildInfo
};
var unzipTask = function unzipTask(_ref6) {
  var zipFilePath = _ref6.zipFilePath,
    installDir = _ref6.installDir,
    progress = _ref6.progress,
    rendererOptions = _ref6.rendererOptions;
  return {
    options: {
      title: util.titleize('Unzipping Cypress')
    },
    task: function task(ctx, _task3) {
      // as our unzip progresses indicate the status
      progress.onProgress = progessify(_task3, 'Unzipping Cypress');
      return unzip.start({
        zipFilePath: zipFilePath,
        installDir: installDir,
        progress: progress
      }).then(function () {
        util.setTaskTitle(_task3, util.titleize(chalk.green('Unzipped Cypress')), rendererOptions.renderer);
      });
    }
  };
};
var progessify = function progessify(task, title) {
  // return higher order function
  return function (percentComplete, remaining) {
    percentComplete = chalk.white(" ".concat(percentComplete, "%"));

    // pluralize seconds remaining
    remaining = chalk.gray("".concat(remaining, "s"));
    util.setTaskTitle(task, util.titleize(title, percentComplete, remaining), getRendererOptions().renderer);
  };
};

// if we are running in CI then use
// the verbose renderer else use
// the default
var getRendererOptions = function getRendererOptions() {
  var renderer = util.isCi() ? verbose : 'default';
  if (logger.logLevel() === 'silent') {
    renderer = 'silent';
  }
  return {
    renderer: renderer
  };
};