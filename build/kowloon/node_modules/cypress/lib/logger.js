"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var chalk = require('chalk');
var logs = [];
var logLevel = function logLevel() {
  return process.env.npm_config_loglevel || 'notice';
};
var error = function error() {
  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {
    messages[_key] = arguments[_key];
  }
  logs.push(messages.join(' '));
  console.log(chalk.red.apply(chalk, messages)); // eslint-disable-line no-console
};

var warn = function warn() {
  if (logLevel() === 'silent') return;
  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    messages[_key2] = arguments[_key2];
  }
  logs.push(messages.join(' '));
  console.log(chalk.yellow.apply(chalk, messages)); // eslint-disable-line no-console
};

var log = function log() {
  var _console;
  if (logLevel() === 'silent' || logLevel() === 'warn') return;
  for (var _len3 = arguments.length, messages = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    messages[_key3] = arguments[_key3];
  }
  logs.push(messages.join(' '));
  (_console = console).log.apply(_console, messages); // eslint-disable-line no-console
};

var always = function always() {
  var _console2;
  for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    messages[_key4] = arguments[_key4];
  }
  logs.push(messages.join(' '));
  (_console2 = console).log.apply(_console2, messages); // eslint-disable-line no-console
};

// splits long text into lines and calls log()
// on each one to allow easy unit testing for specific message
var logLines = function logLines(text) {
  var lines = text.split('\n');
  var _iterator = _createForOfIteratorHelper(lines),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var line = _step.value;
      log(line);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
var print = function print() {
  return logs.join('\n');
};
var reset = function reset() {
  logs = [];
};
module.exports = {
  log: log,
  warn: warn,
  error: error,
  always: always,
  logLines: logLines,
  print: print,
  reset: reset,
  logLevel: logLevel
};