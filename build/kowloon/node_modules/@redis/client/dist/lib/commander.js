"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fCallArguments = exports.transformCommandReply = exports.transformLegacyCommandArguments = exports.transformCommandArguments = exports.attachExtensions = exports.attachCommands = void 0;
var command_options_1 = require("./command-options");
function attachCommands(_ref) {
  var BaseClass = _ref.BaseClass,
    commands = _ref.commands,
    executor = _ref.executor;
  var _loop = function _loop() {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      name = _Object$entries$_i[0],
      command = _Object$entries$_i[1];
    BaseClass.prototype[name] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return executor.call(this, command, args, name);
    };
  };
  for (var _i = 0, _Object$entries = Object.entries(commands); _i < _Object$entries.length; _i++) {
    _loop();
  }
}
exports.attachCommands = attachCommands;
function attachExtensions(config) {
  var _Commander3;
  var Commander;
  if (config.modules) {
    Commander = attachWithNamespaces({
      BaseClass: config.BaseClass,
      namespaces: config.modules,
      executor: config.modulesExecutor
    });
  }
  if (config.functions) {
    var _Commander;
    Commander = attachWithNamespaces({
      BaseClass: (_Commander = Commander) !== null && _Commander !== void 0 ? _Commander : config.BaseClass,
      namespaces: config.functions,
      executor: config.functionsExecutor
    });
  }
  if (config.scripts) {
    var _Commander2;
    (_Commander2 = Commander) !== null && _Commander2 !== void 0 ? _Commander2 : Commander = /*#__PURE__*/function (_config$BaseClass) {
      _inherits(Commander, _config$BaseClass);
      var _super = _createSuper(Commander);
      function Commander() {
        _classCallCheck(this, Commander);
        return _super.apply(this, arguments);
      }
      return _createClass(Commander);
    }(config.BaseClass);
    attachCommands({
      BaseClass: Commander,
      commands: config.scripts,
      executor: config.scriptsExecutor
    });
  }
  return (_Commander3 = Commander) !== null && _Commander3 !== void 0 ? _Commander3 : config.BaseClass;
}
exports.attachExtensions = attachExtensions;
function attachWithNamespaces(_ref2) {
  var BaseClass = _ref2.BaseClass,
    namespaces = _ref2.namespaces,
    executor = _ref2.executor;
  var Commander = /*#__PURE__*/function (_BaseClass) {
    _inherits(Commander, _BaseClass);
    var _super2 = _createSuper(Commander);
    function Commander() {
      var _this;
      _classCallCheck(this, Commander);
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this = _super2.call.apply(_super2, [this].concat(args));
      for (var _i2 = 0, _Object$keys = Object.keys(namespaces); _i2 < _Object$keys.length; _i2++) {
        var namespace = _Object$keys[_i2];
        _this[namespace] = Object.create(_this[namespace], {
          self: {
            value: _assertThisInitialized(_this)
          }
        });
      }
      return _this;
    }
    return _createClass(Commander);
  }(BaseClass);
  for (var _i3 = 0, _Object$entries2 = Object.entries(namespaces); _i3 < _Object$entries2.length; _i3++) {
    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
      namespace = _Object$entries2$_i[0],
      commands = _Object$entries2$_i[1];
    Commander.prototype[namespace] = {};
    var _loop2 = function _loop2() {
      var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i4], 2),
        name = _Object$entries3$_i[0],
        command = _Object$entries3$_i[1];
      Commander.prototype[namespace][name] = function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return executor.call(this.self, command, args, name);
      };
    };
    for (var _i4 = 0, _Object$entries3 = Object.entries(commands); _i4 < _Object$entries3.length; _i4++) {
      _loop2();
    }
  }
  return Commander;
}
function transformCommandArguments(command, args) {
  var options;
  if ((0, command_options_1.isCommandOptions)(args[0])) {
    options = args[0];
    args = args.slice(1);
  }
  return {
    jsArgs: args,
    args: command.transformArguments.apply(command, _toConsumableArray(args)),
    options: options
  };
}
exports.transformCommandArguments = transformCommandArguments;
function transformLegacyCommandArguments(args) {
  return args.flat().map(function (arg) {
    return typeof arg === 'number' || arg instanceof Date ? arg.toString() : arg;
  });
}
exports.transformLegacyCommandArguments = transformLegacyCommandArguments;
function transformCommandReply(command, rawReply, preserved) {
  if (!command.transformReply) {
    return rawReply;
  }
  return command.transformReply(rawReply, preserved);
}
exports.transformCommandReply = transformCommandReply;
function fCallArguments(name, fn, args) {
  var actualArgs = [fn.IS_READ_ONLY ? 'FCALL_RO' : 'FCALL', name];
  if (fn.NUMBER_OF_KEYS !== undefined) {
    actualArgs.push(fn.NUMBER_OF_KEYS.toString());
  }
  actualArgs.push.apply(actualArgs, _toConsumableArray(args));
  return actualArgs;
}
exports.fCallArguments = fCallArguments;