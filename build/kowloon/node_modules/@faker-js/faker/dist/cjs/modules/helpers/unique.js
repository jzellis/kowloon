"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var m = Object.defineProperty;
var f = Object.getOwnPropertyDescriptor;
var b = Object.getOwnPropertyNames;
var l = Object.prototype.hasOwnProperty;
var K = function K(t, r) {
    for (var e in r) m(t, e, {
      get: r[e],
      enumerable: !0
    });
  },
  h = function h(t, r, e, o) {
    if (r && _typeof(r) == "object" || typeof r == "function") {
      var _iterator = _createForOfIteratorHelper(b(r)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !l.call(t, n) && n !== e && m(t, n, {
            get: function get() {
              return r[n];
            },
            enumerable: !(o = f(r, n)) || o.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return t;
  };
var g = function g(t) {
  return h(m({}, "__esModule", {
    value: !0
  }), t);
};
var M = {};
K(M, {
  exec: function exec() {
    return x;
  }
});
module.exports = g(M);
var T = require("../../errors/faker-error");
function I(t, r) {
  return t[r] === void 0 ? -1 : 0;
}
function R(t, r, e, o, n) {
  throw console.error("Error", e), console.log("Found ".concat(Object.keys(o).length, " unique entries before throwing error.\nretried: ").concat(n, "\ntotal time: ").concat(r - t, "ms")), new T.FakerError("".concat(e, " for uniqueness check.\n\nMay not be able to generate any more unique values with current settings.\nTry adjusting maxTime or maxRetries parameters for faker.helpers.unique()."));
}
function x(t, r) {
  var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var y;
  var o = new Date().getTime(),
    _e$startTime = e.startTime,
    n = _e$startTime === void 0 ? new Date().getTime() : _e$startTime,
    _e$maxTime = e.maxTime,
    d = _e$maxTime === void 0 ? 50 : _e$maxTime,
    _e$maxRetries = e.maxRetries,
    i = _e$maxRetries === void 0 ? 50 : _e$maxRetries,
    _e$compare = e.compare,
    s = _e$compare === void 0 ? I : _e$compare,
    a = e.store;
  var u = e.exclude;
  if (e.currentIterations = (y = e.currentIterations) != null ? y : 0, Array.isArray(u) || (u = [u]), o - n >= d) return R(n, o, "Exceeded maxTime: ".concat(d), a, e.currentIterations);
  if (e.currentIterations >= i) return R(n, o, "Exceeded maxRetries: ".concat(i), a, e.currentIterations);
  var c = t.apply(void 0, _toConsumableArray(r));
  return s(a, c) === -1 && u.indexOf(c) === -1 ? (a[c] = c, e.currentIterations = 0, c) : (e.currentIterations++, x(t, r, _objectSpread(_objectSpread({}, e), {}, {
    startTime: n,
    maxTime: d,
    maxRetries: i,
    compare: s,
    exclude: u
  })));
}
0 && (module.exports = {
  exec: exec
});