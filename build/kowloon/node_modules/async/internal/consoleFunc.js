'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = consoleFunc;
var _wrapAsync = require('./wrapAsync.js');
var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function consoleFunc(name) {
  return function (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return (0, _wrapAsync2["default"])(fn).apply(void 0, args.concat([function (err) {
      /* istanbul ignore else */
      if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object') {
        /* istanbul ignore else */
        if (err) {
          /* istanbul ignore else */
          if (console.error) {
            console.error(err);
          }
        } else if (console[name]) {
          for (var _len2 = arguments.length, resultArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            resultArgs[_key2 - 1] = arguments[_key2];
          }
          /* istanbul ignore else */
          resultArgs.forEach(function (x) {
            return console[name](x);
          });
        }
      }
    }]));
  };
}
module.exports = exports['default'];