"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var m = Object.defineProperty;
var t = Object.getOwnPropertyDescriptor;
var s = Object.getOwnPropertyNames;
var d = Object.prototype.hasOwnProperty;
var o = function o(i, a) {
    for (var r in a) m(i, r, {
      get: a[r],
      enumerable: !0
    });
  },
  k = function k(i, a, r, u) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(s(a)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !d.call(i, n) && n !== r && m(i, n, {
            get: function get() {
              return a[n];
            },
            enumerable: !(u = t(a, n)) || u.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var g = function g(i) {
  return k(m({}, "__esModule", {
    value: !0
  }), i);
};
var e = {};
o(e, {
  "default": function _default() {
    return l;
  }
});
module.exports = g(e);
var l = ["Abyasa", "Ade", "Adhiarja", "Adiarja", "Adika", "Adikara", "Adinata", "Aditya", "Agus", "Ajiman", "Ajimat", "Ajimin", "Ajiono", "Akarsana", "Alambana", "Among", "Anggabaya", "Anom", "Argono", "Aris", "Arta", "Artanto", "Artawan", "Arsipatra", "Asirwada", "Asirwanda", "Aslijan", "Asmadi", "Asman", "Asmianto", "Asmuni", "Aswani", "Atma", "Atmaja", "Bagas", "Bagiya", "Bagus", "Bagya", "Bahuraksa", "Bahuwarna", "Bahuwirya", "Bajragin", "Bakda", "Bakiadi", "Bakianto", "Bakidin", "Bakijan", "Bakiman", "Bakiono", "Bakti", "Baktiadi", "Baktianto", "Baktiono", "Bala", "Balamantri", "Balangga", "Balapati", "Balidin", "Balijan", "Bambang", "Banara", "Banawa", "Banawi", "Bancar", "Budi", "Cagak", "Cager", "Cahyadi", "Cahyanto", "Cahya", "Cahyo", "Cahyono", "Caket", "Cakrabirawa", "Cakrabuana", "Cakrajiya", "Cakrawala", "Cakrawangsa", "Candra", "Chandra", "Candrakanta", "Capa", "Caraka", "Carub", "Catur", "Caturangga", "Cawisadi", "Cawisono", "Cawuk", "Cayadi", "Cecep", "Cemani", "Cemeti", "Cemplunk", "Cengkal", "Cengkir", "Dacin", "Dadap", "Dadi", "Dagel", "Daliman", "Dalimin", "Daliono", "Damar", "Damu", "Danang", "Daniswara", "Danu", "Danuja", "Dariati", "Darijan", "Darimin", "Darmaji", "Darman", "Darmana", "Darmanto", "Darsirah", "Dartono", "Daru", "Daruna", "Daryani", "Dasa", "Digdaya", "Dimas", "Dimaz", "Dipa", "Dirja", "Drajat", "Dwi", "Dono", "Dodo", "Edi", "Eka", "Elon", "Eluh", "Eman", "Emas", "Embuh", "Emong", "Empluk", "Endra", "Enteng", "Estiawan", "Estiono", "Eko", "Edison", "Edward", "Elvin", "Erik", "Emil", "Ega", "Emin", "Eja", "Gada", "Gadang", "Gading", "Gaduh", "Gaiman", "Galak", "Galang", "Galar", "Galih", "Galiono", "Galuh", "Galur", "Gaman", "Gamani", "Gamanto", "Gambira", "Gamblang", "Ganda", "Gandewa", "Gandi", "Ganep", "Gangsa", "Gangsar", "Ganjaran", "Gantar", "Gara", "Garan", "Garang", "Garda", "Gatot", "Gatra", "Ghani", "Gibran", "Gilang", "Hairyanto", "Hardana", "Hardi", "Harimurti", "Harja", "Harjasa", "Harjaya", "Harjo", "Harsana", "Harsanto", "Harsaya", "Hartaka", "Hartana", "Harto", "Hasta", "Heru", "Himawan", "Hadi", "Halim", "Hasim", "Hasan", "Hendra", "Hendri", "Heryanto", "Hamzah", "Hari", "Imam", "Indra", "Irwan", "Irsad", "Ikhsan", "Irfan", "Ian", "Ibrahim", "Ibrani", "Ismail", "Irnanto", "Ilyas", "Ibun", "Ivan", "Ikin", "Ihsan", "Jabal", "Jaeman", "Jaga", "Jagapati", "Jagaraga", "Jail", "Jaiman", "Jaka", "Jarwa", "Jarwadi", "Jarwi", "Jasmani", "Jaswadi", "Jati", "Jatmiko", "Jaya", "Jayadi", "Jayeng", "Jinawi", "Jindra", "Joko", "Jumadi", "Jumari", "Jamal", "Jamil", "Jais", "Jefri", "Johan", "Jono", "Kacung", "Kajen", "Kambali", "Kamidin", "Kariman", "Karja", "Karma", "Karman", "Karna", "Karsa", "Karsana", "Karta", "Kasiran", "Kasusra", "Kawaca", "Kawaya", "Kayun", "Kemba", "Kenari", "Kenes", "Kuncara", "Kunthara", "Kusuma", "Kadir", "Kala", "Kalim", "Kurnia", "Kanda", "Kardi", "Karya", "Kasim", "Kairav", "Kenzie", "Kemal", "Kamal", "Koko", "Labuh", "Laksana", "Lamar", "Lanang", "Langgeng", "Lanjar", "Lantar", "Lega", "Legawa", "Lembah", "Liman", "Limar", "Luhung", "Lukita", "Luluh", "Lulut", "Lurhur", "Luwar", "Luwes", "Latif", "Lasmanto", "Lukman", "Luthfi", "Leo", "Luis", "Lutfan", "Lasmono", "Laswi", "Mahesa", "Makara", "Makuta", "Manah", "Maras", "Margana", "Mariadi", "Marsudi", "Martaka", "Martana", "Martani", "Marwata", "Maryadi", "Maryanto", "Mitra", "Mujur", "Mulya", "Mulyanto", "Mulyono", "Mumpuni", "Muni", "Mursita", "Murti", "Mustika", "Maman", "Mahmud", "Mahdi", "Mahfud", "Malik", "Muhammad", "Mustofa", "Marsito", "Mursinin", "Nalar", "Naradi", "Nardi", "Niyaga", "Nrima", "Nugraha", "Nyana", "Narji", "Nasab", "Nasrullah", "Nasim", "Najib", "Najam", "Nyoman", "Olga", "Ozy", "Omar", "Opan", "Oskar", "Oman", "Okto", "Okta", "Opung", "Paiman", "Panca", "Pangeran", "Pangestu", "Pardi", "Parman", "Perkasa", "Praba", "Prabu", "Prabawa", "Prabowo", "Prakosa", "Pranata", "Pranawa", "Prasetya", "Prasetyo", "Prayitna", "Prayoga", "Prayogo", "Purwadi", "Purwa", "Purwanto", "Panji", "Pandu", "Prima", "Putu", "Raden", "Raditya", "Raharja", "Rama", "Rangga", "Reksa", "Respati", "Rusman", "Rosman", "Rahmat", "Rahman", "Rendy", "Reza", "Rizki", "Ridwan", "Rudi", "Radit", "Radika", "Rafi", "Rafid", "Raihan", "Salman", "Saadat", "Saiful", "Surya", "Slamet", "Samsul", "Soleh", "Simon", "Sabar", "Sabri", "Sidiq", "Satya", "Setya", "Saka", "Sakti", "Taswir", "Tedi", "Teddy", "Taufan", "Taufik", "Tomi", "Tasnim", "Teguh", "Tasdik", "Timbul", "Tirta", "Tirtayasa", "Tri", "Tugiman", "Umar", "Usman", "Uda", "Umay", "Unggul", "Utama", "Umaya", "Upik", "Viktor", "Vino", "Vinsen", "Vero", "Vega", "Viman", "Virman", "Wahyu", "Wira", "Wisnu", "Wadi", "Wardi", "Warji", "Waluyo", "Wakiman", "Wage", "Wardaya", "Warsa", "Warsita", "Warta", "Wasis", "Wawan", "Xanana", "Yahya", "Yusuf", "Yosef", "Yono", "Yoga", "Zaki", "Zakir", "Zulfikar"];