"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var t = Object.getOwnPropertyDescriptor;
var s = Object.getOwnPropertyNames;
var m = Object.prototype.hasOwnProperty;
var l = function l(i, a) {
    for (var h in a) r(i, h, {
      get: a[h],
      enumerable: !0
    });
  },
  d = function d(i, a, h, e) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(s(a)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !m.call(i, n) && n !== h && r(i, n, {
            get: function get() {
              return a[n];
            },
            enumerable: !(e = t(a, n)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var u = function u(i) {
  return d(r({}, "__esModule", {
    value: !0
  }), i);
};
var S = {};
l(S, {
  "default": function _default() {
    return A;
  }
});
module.exports = u(S);
var A = ["Aadrika", "Aanandinii", "Aaratrika", "Aarya", "Arya", "Aashritha", "Aatmaja", "Atmaja", "Abhaya", "Adwitiya", "Agrata", "Ahilya", "Ahalya", "Aishani", "Akshainie", "Akshata", "Akshita", "Akula", "Ambar", "Amodini", "Amrita", "Amritambu", "Anala", "Anamika", "Ananda", "Anandamayi", "Ananta", "Anila", "Anjali", "Anjushri", "Anjushree", "Annapurna", "Anshula", "Anuja", "Anusuya", "Anasuya", "Anasooya", "Anwesha", "Apsara", "Aruna", "Asha", "Aasa", "Aasha", "Aslesha", "Atreyi", "Atreyee", "Avani", "Abani", "Avantika", "Ayushmati", "Baidehi", "Vaidehi", "Bala", "Baala", "Balamani", "Basanti", "Vasanti", "Bela", "Bhadra", "Bhagirathi", "Bhagwanti", "Bhagwati", "Bhamini", "Bhanumati", "Bhaanumati", "Bhargavi", "Bhavani", "Bhilangana", "Bilwa", "Bilva", "Buddhana", "Chakrika", "Chanda", "Chandi", "Chandni", "Chandini", "Chandani", "Chandra", "Chandira", "Chandrabhaga", "Chandrakala", "Chandrakin", "Chandramani", "Chandrani", "Chandraprabha", "Chandraswaroopa", "Chandravati", "Chapala", "Charumati", "Charvi", "Chatura", "Chitrali", "Chitramala", "Chitrangada", "Daksha", "Dakshayani", "Damayanti", "Darshwana", "Deepali", "Dipali", "Deeptimoyee", "Deeptimayee", "Devangana", "Devani", "Devasree", "Devi", "Daevi", "Devika", "Daevika", "Dhaanyalakshmi", "Dhanalakshmi", "Dhana", "Dhanadeepa", "Dhara", "Dharani", "Dharitri", "Dhatri", "Diksha", "Deeksha", "Divya", "Draupadi", "Dulari", "Durga", "Durgeshwari", "Ekaparnika", "Elakshi", "Enakshi", "Esha", "Eshana", "Eshita", "Gautami", "Gayatri", "Geeta", "Geetanjali", "Gitanjali", "Gemine", "Gemini", "Girja", "Girija", "Gita", "Hamsini", "Harinakshi", "Harita", "Heema", "Himadri", "Himani", "Hiranya", "Indira", "Jaimini", "Jaya", "Jyoti", "Jyotsana", "Kali", "Kalinda", "Kalpana", "Kalyani", "Kama", "Kamala", "Kamla", "Kanchan", "Kanishka", "Kanti", "Kashyapi", "Kumari", "Kumuda", "Lakshmi", "Laxmi", "Lalita", "Lavanya", "Leela", "Lila", "Madhuri", "Malti", "Malati", "Mandakini", "Mandaakin", "Mangala", "Mangalya", "Mani", "Manisha", "Manjusha", "Meena", "Mina", "Meenakshi", "Minakshi", "Menka", "Menaka", "Mohana", "Mohini", "Nalini", "Nikita", "Ojaswini", "Omana", "Oormila", "Urmila", "Opalina", "Opaline", "Padma", "Parvati", "Poornima", "Purnima", "Pramila", "Prasanna", "Preity", "Prema", "Priya", "Priyala", "Pushti", "Radha", "Rageswari", "Rageshwari", "Rajinder", "Ramaa", "Rati", "Rita", "Rohana", "Rukhmani", "Rukmin", "Rupinder", "Sanya", "Sarada", "Sharda", "Sarala", "Sarla", "Saraswati", "Sarisha", "Saroja", "Shakti", "Shakuntala", "Shanti", "Sharmila", "Shashi", "Shashikala", "Sheela", "Shivakari", "Shobhana", "Shresth", "Shresthi", "Shreya", "Shreyashi", "Shridevi", "Shrishti", "Shubha", "Shubhaprada", "Siddhi", "Sitara", "Sloka", "Smita", "Smriti", "Soma", "Subhashini", "Subhasini", "Sucheta", "Sudeva", "Sujata", "Sukanya", "Suma", "Sumitra", "Sunita", "Suryakantam", "Sushma", "Swara", "Swarnalata", "Sweta", "Shwet", "Tanirika", "Tanushree", "Tanushri", "Tanya", "Tara", "Trisha", "Uma", "Usha", "Vaijayanti", "Vaijayanthi", "Baijayanti", "Vaishvi", "Vaishnavi", "Vaishno", "Varalakshmi", "Vasudha", "Vasundhara", "Veda", "Vedanshi", "Vidya", "Vimala", "Vrinda", "Vrund"];