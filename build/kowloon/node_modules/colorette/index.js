"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.yellowBright = exports.yellow = exports.whiteBright = exports.white = exports.underline = exports.strikethrough = exports.reset = exports.redBright = exports.red = exports.magentaBright = exports.magenta = exports.italic = exports.isColorSupported = exports.inverse = exports.hidden = exports.greenBright = exports.green = exports.gray = exports.dim = exports.cyanBright = exports.cyan = exports.createColors = exports.bold = exports.blueBright = exports.blue = exports.blackBright = exports.black = exports.bgYellowBright = exports.bgYellow = exports.bgWhiteBright = exports.bgWhite = exports.bgRedBright = exports.bgRed = exports.bgMagentaBright = exports.bgMagenta = exports.bgGreenBright = exports.bgGreen = exports.bgCyanBright = exports.bgCyan = exports.bgBlueBright = exports.bgBlue = exports.bgBlackBright = exports.bgBlack = void 0;
var tty = _interopRequireWildcard(require("tty"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _ref = typeof process === "undefined" ? {} : process,
  _ref$env = _ref.env,
  env = _ref$env === void 0 ? {} : _ref$env,
  _ref$argv = _ref.argv,
  argv = _ref$argv === void 0 ? [] : _ref$argv,
  _ref$platform = _ref.platform,
  platform = _ref$platform === void 0 ? "" : _ref$platform;
var isDisabled = "NO_COLOR" in env || argv.includes("--no-color");
var isForced = "FORCE_COLOR" in env || argv.includes("--color");
var isWindows = platform === "win32";
var isDumbTerminal = env.TERM === "dumb";
var isCompatibleTerminal = tty && tty.isatty && tty.isatty(1) && env.TERM && !isDumbTerminal;
var isCI = "CI" in env && ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env);
var isColorSupported = !isDisabled && (isForced || isWindows && !isDumbTerminal || isCompatibleTerminal || isCI);
exports.isColorSupported = isColorSupported;
var replaceClose = function replaceClose(index, string, close, replace) {
  var head = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : string.substring(0, index) + replace;
  var tail = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : string.substring(index + close.length);
  var next = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : tail.indexOf(close);
  return head + (next < 0 ? tail : replaceClose(next, tail, close, replace));
};
var clearBleed = function clearBleed(index, string, open, close, replace) {
  return index < 0 ? open + string + close : open + replaceClose(index, string, close, replace) + close;
};
var filterEmpty = function filterEmpty(open, close) {
  var replace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : open;
  var at = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : open.length + 1;
  return function (string) {
    return string || !(string === "" || string === undefined) ? clearBleed(("" + string).indexOf(close, at), string, open, close, replace) : "";
  };
};
var init = function init(open, close, replace) {
  return filterEmpty("\x1B[".concat(open, "m"), "\x1B[".concat(close, "m"), replace);
};
var colors = {
  reset: init(0, 0),
  bold: init(1, 22, "\x1b[22m\x1b[1m"),
  dim: init(2, 22, "\x1b[22m\x1b[2m"),
  italic: init(3, 23),
  underline: init(4, 24),
  inverse: init(7, 27),
  hidden: init(8, 28),
  strikethrough: init(9, 29),
  black: init(30, 39),
  red: init(31, 39),
  green: init(32, 39),
  yellow: init(33, 39),
  blue: init(34, 39),
  magenta: init(35, 39),
  cyan: init(36, 39),
  white: init(37, 39),
  gray: init(90, 39),
  bgBlack: init(40, 49),
  bgRed: init(41, 49),
  bgGreen: init(42, 49),
  bgYellow: init(43, 49),
  bgBlue: init(44, 49),
  bgMagenta: init(45, 49),
  bgCyan: init(46, 49),
  bgWhite: init(47, 49),
  blackBright: init(90, 39),
  redBright: init(91, 39),
  greenBright: init(92, 39),
  yellowBright: init(93, 39),
  blueBright: init(94, 39),
  magentaBright: init(95, 39),
  cyanBright: init(96, 39),
  whiteBright: init(97, 39),
  bgBlackBright: init(100, 49),
  bgRedBright: init(101, 49),
  bgGreenBright: init(102, 49),
  bgYellowBright: init(103, 49),
  bgBlueBright: init(104, 49),
  bgMagentaBright: init(105, 49),
  bgCyanBright: init(106, 49),
  bgWhiteBright: init(107, 49)
};
var createColors = function createColors() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref2$useColor = _ref2.useColor,
    useColor = _ref2$useColor === void 0 ? isColorSupported : _ref2$useColor;
  return useColor ? colors : Object.keys(colors).reduce(function (colors, key) {
    return _objectSpread(_objectSpread({}, colors), {}, _defineProperty({}, key, String));
  }, {});
};
exports.createColors = createColors;
var _createColors = createColors(),
  reset = _createColors.reset,
  bold = _createColors.bold,
  dim = _createColors.dim,
  italic = _createColors.italic,
  underline = _createColors.underline,
  inverse = _createColors.inverse,
  hidden = _createColors.hidden,
  strikethrough = _createColors.strikethrough,
  black = _createColors.black,
  red = _createColors.red,
  green = _createColors.green,
  yellow = _createColors.yellow,
  blue = _createColors.blue,
  magenta = _createColors.magenta,
  cyan = _createColors.cyan,
  white = _createColors.white,
  gray = _createColors.gray,
  bgBlack = _createColors.bgBlack,
  bgRed = _createColors.bgRed,
  bgGreen = _createColors.bgGreen,
  bgYellow = _createColors.bgYellow,
  bgBlue = _createColors.bgBlue,
  bgMagenta = _createColors.bgMagenta,
  bgCyan = _createColors.bgCyan,
  bgWhite = _createColors.bgWhite,
  blackBright = _createColors.blackBright,
  redBright = _createColors.redBright,
  greenBright = _createColors.greenBright,
  yellowBright = _createColors.yellowBright,
  blueBright = _createColors.blueBright,
  magentaBright = _createColors.magentaBright,
  cyanBright = _createColors.cyanBright,
  whiteBright = _createColors.whiteBright,
  bgBlackBright = _createColors.bgBlackBright,
  bgRedBright = _createColors.bgRedBright,
  bgGreenBright = _createColors.bgGreenBright,
  bgYellowBright = _createColors.bgYellowBright,
  bgBlueBright = _createColors.bgBlueBright,
  bgMagentaBright = _createColors.bgMagentaBright,
  bgCyanBright = _createColors.bgCyanBright,
  bgWhiteBright = _createColors.bgWhiteBright;
exports.bgWhiteBright = bgWhiteBright;
exports.bgCyanBright = bgCyanBright;
exports.bgMagentaBright = bgMagentaBright;
exports.bgBlueBright = bgBlueBright;
exports.bgYellowBright = bgYellowBright;
exports.bgGreenBright = bgGreenBright;
exports.bgRedBright = bgRedBright;
exports.bgBlackBright = bgBlackBright;
exports.whiteBright = whiteBright;
exports.cyanBright = cyanBright;
exports.magentaBright = magentaBright;
exports.blueBright = blueBright;
exports.yellowBright = yellowBright;
exports.greenBright = greenBright;
exports.redBright = redBright;
exports.blackBright = blackBright;
exports.bgWhite = bgWhite;
exports.bgCyan = bgCyan;
exports.bgMagenta = bgMagenta;
exports.bgBlue = bgBlue;
exports.bgYellow = bgYellow;
exports.bgGreen = bgGreen;
exports.bgRed = bgRed;
exports.bgBlack = bgBlack;
exports.gray = gray;
exports.white = white;
exports.cyan = cyan;
exports.magenta = magenta;
exports.blue = blue;
exports.yellow = yellow;
exports.green = green;
exports.red = red;
exports.black = black;
exports.strikethrough = strikethrough;
exports.hidden = hidden;
exports.inverse = inverse;
exports.underline = underline;
exports.italic = italic;
exports.dim = dim;
exports.bold = bold;
exports.reset = reset;