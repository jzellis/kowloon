"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var l = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var n = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var m = function m(a, e) {
    for (var r in e) l(a, r, {
      get: e[r],
      enumerable: !0
    });
  },
  o = function o(a, e, r, t) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(n(e)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !s.call(a, i) && i !== r && l(a, i, {
            get: function get() {
              return e[i];
            },
            enumerable: !(t = u(e, i)) || t.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var c = function c(a) {
  return o(l({}, "__esModule", {
    value: !0
  }), a);
};
var p = {};
m(p, {
  "default": function _default() {
    return d;
  }
});
module.exports = c(p);
var d = ["\xE2cre", "adorable", "affable", "agr\xE9able", "aigre", "aimable", "altruiste", "amorphe", "antique", "apte", "avare", "bl\xEAme", "brave", "brusque", "calme", "candide", "charitable", "circulaire", "consid\xE9rable", "coupable", "cyan", "d\xE9bile", "d\xE9lectable", "dense", "d\xE9sagr\xE9able", "dynamique", "efficace", "\xE9go\xEFste", "\xE9m\xE9rite", "\xE9nergique", "\xE9norme", "espi\xE8gle", "extatique", "extra", "fade", "ferme", "fid\xE8le", "fourbe", "gai", "g\xE9om\xE9trique", "gigantesque", "habile", "hebdomadaire", "hirsute", "horrible", "hypocrite", "hyst\xE9rique", "immense", "incalculable", "infime", "innombrable", "insipide", "insolite", "intr\xE9pide", "jeune", "l\xE2che", "large", "loufoque", "lunatique", "magenta", "magnifique", "maigre", "malade", "marron", "mature", "m\xE9lancolique", "mince", "minuscule", "moderne", "multiple", "neutre", "novice", "orange", "pacifique", "pauvre", "perplexe", "placide", "pourpre", "propre", "raide", "rapide", "rectangulaire", "rose", "sage", "sale", "sauvage", "s\xE9culaire", "s\xE9dentaire", "serviable", "simple", "sinc\xE8re", "snob", "solitaire", "sombre", "souple", "sp\xE9cialiste", "splendide", "super", "svelte", "sympathique", "t\xE9m\xE9raire", "tendre", "terne", "timide", "tranquille", "triangulaire", "triste", "turquoise", "vaste", "v\xE9tuste", "vide", "vivace", "vorace"];