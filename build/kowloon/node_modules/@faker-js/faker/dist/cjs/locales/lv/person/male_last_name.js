"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var l = Object.getOwnPropertyDescriptor;
var o = Object.getOwnPropertyNames;
var t = Object.prototype.hasOwnProperty;
var k = function k(i, s) {
    for (var a in s) r(i, a, {
      get: s[a],
      enumerable: !0
    });
  },
  u = function u(i, s, a, n) {
    if (s && _typeof(s) == "object" || typeof s == "function") {
      var _iterator = _createForOfIteratorHelper(o(s)),
        _step;
      try {
        var _loop = function _loop() {
          var e = _step.value;
          !t.call(i, e) && e !== a && r(i, e, {
            get: function get() {
              return s[e];
            },
            enumerable: !(n = l(s, e)) || n.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var d = function d(i) {
  return u(r({}, "__esModule", {
    value: !0
  }), i);
};
var v = {};
k(v, {
  "default": function _default() {
    return m;
  }
});
module.exports = d(v);
var m = ["Aigars", "Alksnis", "Andersons", "Aspers", "Auzi\u0146\u0161", "\u0100bele", "\u0100boli\u0146\u0161", "\u0100bolti\u0146\u0161", "Balodis", "Be\u013Cavskis", "Bergmanis", "B\u0113rzi\u0146\u0161", "B\u0113rz\u012Bts", "Birzi\u0146\u0161", "Birznieks", "B\u012Bri\u0146\u0161", "Blaus", "Blekte", "Bre\u0146\u0137is", "Briedis", "Brunkevi\u010Ds", "Builis", "Bu\u0161s", "Caune", "C\u0101l\u012Btis", "C\u012Brulis", "\u010Cudars", "Danielsons", "D\u012Bri\u0137is", "Dombrovskis", "Dreimanis", "Dzenis", "Egl\u012Btis", "Endzi\u0146\u0161", "Fogelis", "Freimanis", "Gailis", "Gail\u012Btis", "Gibala", "Graudi\u0146\u0161", "Gribusts", "Gr\u012Bnbergs", "Gr\u016Bbe", "Jansons", "J\u0113kabsons", "Jukums", "Kal\u0113js", "Kalni\u0146\u0161", "Karlsons", "Kauli\u0146\u0161", "K\u0101rkli\u0146\u0161", "K\u013Cavi\u0146\u0161", "Kohs", "Koks", "Krancis", "Krasti\u0146\u0161", "Kraulis", "Krauze", "Kr\u0113sli\u0146\u0161", "Krievi\u0146\u0161", "Krievs", "Kronbergs", "Kr\u016Bmi\u0146\u0161", "Kulmanis", "Laivi\u0146\u0161", "Landmanis", "Lapi\u0146\u0161", "Lapsi\u0146\u0161", "Lasmanis", "Laubergs", "L\u0101cis", "Legzdi\u0146\u0161", "Lielmanis", "Liepi\u0146\u0161", "L\u012Bcis", "L\u012Bdaks", "Lo\u010Ds", "Lodi\u0146\u0161", "L\u016Bsis", "Matisons", "Mednis", "Meiers", "Mek\u0161s", "Melderis", "Melngailis", "Mihailovs", "Mi\u0137elsons", "Niedra", "Osis", "Ostrovskis", "Ozers", "Ozoli\u0146\u0161", "Ozols", "Palters", "Pavlovskis", "Pencis", "Petrovskis", "P\u0113rkons", "P\u0113tersons", "Podzi\u0146\u0161", "Polis", "Pretkalni\u0146\u0161", "Pried\u012Btis", "Pu\u0137\u012Btis", "Putni\u0146\u0161", "Rieksti\u0146\u0161", "Romanovskis", "Rozenbahs", "Roz\u012Btis", "Rubenis", "Rudz\u012Btis", "Runcis", "Salmi\u0146\u0161", "Ser\u017Eants", "Sietnieks", "Sili\u0146\u0161", "S\u012Blis", "Skudra", "Smu\u0123is", "Spro\u0123is", "Spr\u016Bde", "Strauti\u0146\u0161", "Strautmanis", "Strazdi\u0146\u0161", "\u0160irovs", "\u0160\u012Brants", "\u0160mits", "\u0160teins", "T\u0101lbergs", "Teic\u0101ns", "Tilti\u0146\u0161", "T\u012Brelis", "Tu\u010Ds", "\u016Adris", "Valters", "Vasils", "Vecumnieks", "Veinbergs", "Veiss", "Vilks", "Vilsons", "Vi\u013Cums", "Vinters", "V\u012Bti\u0146\u0161", "V\u012Btoli\u0146\u0161", "V\u012Btols", "V\u012Btums", "Vollis", "Zari\u0146\u0161", "Z\u0101l\u012Btis", "Zeidmanis", "Zelti\u0146\u0161", "Ziemelis", "Z\u012Bbers", "Zunda", "Zvaigzne", "Zvejnieks", "Zvinelis", "Mucenieks", "Dzirkalis", "Ar\u0101js", "S\u0113j\u0113js", "Podnieks", "Ratnieks", "De\u0123is", "Bondars", "Sondors", "Nami\u0137is", "Jumi\u0137is", "Mui\u017Enieks", "Baj\u0101rs", "\u0136\u0113ni\u0146\u0161", "\u0136eizars", "Barons", "Vaivads", "Zviedrs", "V\u0101cietis", "Leji\u0146\u0161", "Vanags", "Celms", "Liepa", "Kalns", "Celmi\u0146\u0161", "Lejnieks", "Bisenieks", "Kurzemnieks", "Saulietis", "Pakalnietis", "Prid\u0101ns", "Grodums", "Kaln\u0101js", "Porgants", "Sukuts", "Me\u0161k\u016Bns", "Ro\u017Ekalns", "Mazj\u0101nis", "Latkovskis", "Jankovskis", "\u0160ileiko", "Budreiko", "Ivanovs", "Morozovs", "Logins", "Gasj\u016Bns", "Pau\u013Cuks", "Sos\u0101rs"];