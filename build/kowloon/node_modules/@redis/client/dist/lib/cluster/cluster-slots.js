"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _RedisClusterSlots_instances, _a, _RedisClusterSlots_SLOTS, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_emit, _RedisClusterSlots_isOpen, _RedisClusterSlots_discoverWithRootNodes, _RedisClusterSlots_resetSlots, _RedisClusterSlots_discover, _RedisClusterSlots_getShards, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateSlotNode, _RedisClusterSlots_createClient, _RedisClusterSlots_createNodeClient, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_destroy, _RedisClusterSlots_execOnNodeClient, _RedisClusterSlots_iterateAllNodes, _RedisClusterSlots_randomNodeIterator, _RedisClusterSlots_slotNodesIterator, _RedisClusterSlots_initiatePubSubClient, _RedisClusterSlots_initiateShardedPubSubClient;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var client_1 = require("../client");
var errors_1 = require("../errors");
var util_1 = require("util");
var pub_sub_1 = require("../client/pub-sub");
// We need to use 'require', because it's not possible with Typescript to import
// function that are exported as 'module.exports = function`, without esModuleInterop
// set to true.
var calculateSlot = require('cluster-key-slot');
var RedisClusterSlots = /*#__PURE__*/function () {
  function RedisClusterSlots(options, emit) {
    _classCallCheck(this, RedisClusterSlots);
    _RedisClusterSlots_instances.add(this);
    _RedisClusterSlots_options.set(this, void 0);
    _RedisClusterSlots_Client.set(this, void 0);
    _RedisClusterSlots_emit.set(this, void 0);
    Object.defineProperty(this, "slots", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Array(__classPrivateFieldGet(RedisClusterSlots, _a, "f", _RedisClusterSlots_SLOTS))
    });
    Object.defineProperty(this, "shards", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Array()
    });
    Object.defineProperty(this, "masters", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Array()
    });
    Object.defineProperty(this, "replicas", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Array()
    });
    Object.defineProperty(this, "nodeByAddress", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, "pubSubNode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _RedisClusterSlots_isOpen.set(this, false);
    _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);
    _RedisClusterSlots_randomNodeIterator.set(this, void 0);
    __classPrivateFieldSet(this, _RedisClusterSlots_options, options, "f");
    __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1["default"].extend(options), "f");
    __classPrivateFieldSet(this, _RedisClusterSlots_emit, emit, "f");
  }
  _createClass(RedisClusterSlots, [{
    key: "isOpen",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisClusterSlots_isOpen, "f");
    }
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!__classPrivateFieldGet(this, _RedisClusterSlots_isOpen, "f")) {
                _context.next = 2;
                break;
              }
              throw new Error('Cluster already open');
            case 2:
              __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, true, "f");
              _context.prev = 3;
              _context.next = 6;
              return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discoverWithRootNodes).call(this);
            case 6:
              _context.next = 12;
              break;
            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](3);
              __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, "f");
              throw _context.t0;
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[3, 8]]);
      }));
      function connect() {
        return _connect.apply(this, arguments);
      }
      return connect;
    }()
  }, {
    key: "nodeClient",
    value: function nodeClient(node) {
      var _node$client;
      return (_node$client = node.client) !== null && _node$client !== void 0 ? _node$client : __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createNodeClient).call(this, node);
    }
  }, {
    key: "rediscover",
    value: function () {
      var _rediscover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(startWith) {
        var _classPrivateFieldGe,
          _this = this;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, (_classPrivateFieldGe = __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, "f")) !== null && _classPrivateFieldGe !== void 0 ? _classPrivateFieldGe : __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_rediscover).call(this, startWith)["finally"](function () {
                return __classPrivateFieldSet(_this, _RedisClusterSlots_runningRediscoverPromise, undefined, "f");
              }), "f");
              return _context2.abrupt("return", __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, "f"));
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function rediscover(_x) {
        return _rediscover.apply(this, arguments);
      }
      return rediscover;
    }()
  }, {
    key: "quit",
    value: function quit() {
      return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_destroy).call(this, function (client) {
        return client.quit();
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_destroy).call(this, function (client) {
        return client.disconnect();
      });
    }
  }, {
    key: "getClient",
    value: function getClient(firstKey, isReadonly) {
      if (!firstKey) {
        return this.nodeClient(this.getRandomNode());
      }
      var slotNumber = calculateSlot(firstKey);
      if (!isReadonly) {
        return this.nodeClient(this.slots[slotNumber].master);
      }
      return this.nodeClient(this.getSlotRandomNode(slotNumber));
    }
  }, {
    key: "getRandomNode",
    value: function getRandomNode() {
      var _classPrivateFieldGe2;
      __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, "f")) !== null && _classPrivateFieldGe2 !== void 0 ? _classPrivateFieldGe2 : __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_iterateAllNodes).call(this), "f");
      return __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, "f").next().value;
    }
  }, {
    key: "getSlotRandomNode",
    value: function getSlotRandomNode(slotNumber) {
      var _slot$replicas, _slot$nodesIterator;
      var slot = this.slots[slotNumber];
      if (!((_slot$replicas = slot.replicas) !== null && _slot$replicas !== void 0 && _slot$replicas.length)) {
        return slot.master;
      }
      (_slot$nodesIterator = slot.nodesIterator) !== null && _slot$nodesIterator !== void 0 ? _slot$nodesIterator : slot.nodesIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_slotNodesIterator).call(this, slot);
      return slot.nodesIterator.next().value;
    }
  }, {
    key: "getMasterByAddress",
    value: function getMasterByAddress(address) {
      var master = this.nodeByAddress.get(address);
      if (!master) return;
      return this.nodeClient(master);
    }
  }, {
    key: "getPubSubClient",
    value: function getPubSubClient() {
      return this.pubSubNode ? this.pubSubNode.client : __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiatePubSubClient).call(this);
    }
  }, {
    key: "executeUnsubscribeCommand",
    value: function () {
      var _executeUnsubscribeCommand = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(unsubscribe) {
        var client;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getPubSubClient();
            case 2:
              client = _context3.sent;
              _context3.next = 5;
              return unsubscribe(client);
            case 5:
              if (client.isPubSubActive) {
                _context3.next = 9;
                break;
              }
              _context3.next = 8;
              return client.disconnect();
            case 8:
              this.pubSubNode = undefined;
            case 9:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function executeUnsubscribeCommand(_x2) {
        return _executeUnsubscribeCommand.apply(this, arguments);
      }
      return executeUnsubscribeCommand;
    }()
  }, {
    key: "getShardedPubSubClient",
    value: function getShardedPubSubClient(channel) {
      var _master$pubSubClient;
      var master = this.slots[calculateSlot(channel)].master;
      return (_master$pubSubClient = master.pubSubClient) !== null && _master$pubSubClient !== void 0 ? _master$pubSubClient : __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiateShardedPubSubClient).call(this, master);
    }
  }, {
    key: "executeShardedUnsubscribeCommand",
    value: function () {
      var _executeShardedUnsubscribeCommand = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(channel, unsubscribe) {
        var master, client;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              master = this.slots[calculateSlot(channel)].master;
              if (master.pubSubClient) {
                _context4.next = 3;
                break;
              }
              return _context4.abrupt("return", Promise.resolve());
            case 3:
              _context4.next = 5;
              return master.pubSubClient;
            case 5:
              client = _context4.sent;
              _context4.next = 8;
              return unsubscribe(client);
            case 8:
              if (client.isPubSubActive) {
                _context4.next = 12;
                break;
              }
              _context4.next = 11;
              return client.disconnect();
            case 11:
              master.pubSubClient = undefined;
            case 12:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function executeShardedUnsubscribeCommand(_x3, _x4) {
        return _executeShardedUnsubscribeCommand.apply(this, arguments);
      }
      return executeShardedUnsubscribeCommand;
    }()
  }]);
  return RedisClusterSlots;
}();
_a = RedisClusterSlots, _RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_emit = new WeakMap(), _RedisClusterSlots_isOpen = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomNodeIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverWithRootNodes = /*#__PURE__*/function () {
  var _RedisClusterSlots_discoverWithRootNodes2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var start, i, _i;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          start = Math.floor(Math.random() * __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes.length);
          i = start;
        case 2:
          if (!(i < __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes.length)) {
            _context5.next = 10;
            break;
          }
          _context5.next = 5;
          return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes[i]);
        case 5:
          if (!_context5.sent) {
            _context5.next = 7;
            break;
          }
          return _context5.abrupt("return");
        case 7:
          i++;
          _context5.next = 2;
          break;
        case 10:
          _i = 0;
        case 11:
          if (!(_i < start)) {
            _context5.next = 19;
            break;
          }
          _context5.next = 14;
          return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes[_i]);
        case 14:
          if (!_context5.sent) {
            _context5.next = 16;
            break;
          }
          return _context5.abrupt("return");
        case 16:
          _i++;
          _context5.next = 11;
          break;
        case 19:
          throw new errors_1.RootNodesUnavailableError();
        case 20:
        case "end":
          return _context5.stop();
      }
    }, _callee5, this);
  }));
  function _RedisClusterSlots_discoverWithRootNodes() {
    return _RedisClusterSlots_discoverWithRootNodes2.apply(this, arguments);
  }
  return _RedisClusterSlots_discoverWithRootNodes;
}(), _RedisClusterSlots_resetSlots = function _RedisClusterSlots_resetSlots() {
  this.slots = new Array(__classPrivateFieldGet(RedisClusterSlots, _a, "f", _RedisClusterSlots_SLOTS));
  this.shards = [];
  this.masters = [];
  this.replicas = [];
  __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, undefined, "f");
}, _RedisClusterSlots_discover = /*#__PURE__*/function () {
  var _RedisClusterSlots_discover2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(rootNode) {
    var _this2 = this;
    var addressesInUse, shards, promises, eagerConnect, _iterator, _step, _step$value, from, to, master, replicas, shard, i, channelsListeners, patternsListeners, _classPrivateFieldGe3, _iterator2, _step2, _step2$value, address, node, pubSubClient;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_resetSlots).call(this);
          addressesInUse = new Set();
          _context6.prev = 2;
          _context6.next = 5;
          return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_getShards).call(this, rootNode);
        case 5:
          shards = _context6.sent;
          promises = [];
          eagerConnect = __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").minimizeConnections !== true;
          _iterator = _createForOfIteratorHelper(shards);
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              _step$value = _step.value, from = _step$value.from, to = _step$value.to, master = _step$value.master, replicas = _step$value.replicas;
              shard = {
                master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiateSlotNode).call(this, master, false, eagerConnect, addressesInUse, promises)
              };
              if (__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").useReplicas) {
                shard.replicas = replicas.map(function (replica) {
                  return __classPrivateFieldGet(_this2, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiateSlotNode).call(_this2, replica, true, eagerConnect, addressesInUse, promises);
                });
              }
              this.shards.push(shard);
              for (i = from; i <= to; i++) {
                this.slots[i] = shard;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          if (this.pubSubNode && !addressesInUse.has(this.pubSubNode.address)) {
            if (util_1.types.isPromise(this.pubSubNode.client)) {
              promises.push(this.pubSubNode.client.then(function (client) {
                return client.disconnect();
              }));
              this.pubSubNode = undefined;
            } else {
              promises.push(this.pubSubNode.client.disconnect());
              channelsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.CHANNELS), patternsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.PATTERNS);
              if (channelsListeners.size || patternsListeners.size) {
                promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiatePubSubClient).call(this, (_classPrivateFieldGe3 = {}, _defineProperty(_classPrivateFieldGe3, pub_sub_1.PubSubType.CHANNELS, channelsListeners), _defineProperty(_classPrivateFieldGe3, pub_sub_1.PubSubType.PATTERNS, patternsListeners), _classPrivateFieldGe3)));
              }
            }
          }
          _iterator2 = _createForOfIteratorHelper(this.nodeByAddress.entries());
          _context6.prev = 12;
          _iterator2.s();
        case 14:
          if ((_step2 = _iterator2.n()).done) {
            _context6.next = 24;
            break;
          }
          _step2$value = _slicedToArray(_step2.value, 2), address = _step2$value[0], node = _step2$value[1];
          if (!addressesInUse.has(address)) {
            _context6.next = 18;
            break;
          }
          return _context6.abrupt("continue", 22);
        case 18:
          if (node.client) {
            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, node.client, function (client) {
              return client.disconnect();
            }));
          }
          pubSubClient = node.pubSubClient;
          if (pubSubClient) {
            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, pubSubClient, function (client) {
              return client.disconnect();
            }));
          }
          this.nodeByAddress["delete"](address);
        case 22:
          _context6.next = 14;
          break;
        case 24:
          _context6.next = 29;
          break;
        case 26:
          _context6.prev = 26;
          _context6.t0 = _context6["catch"](12);
          _iterator2.e(_context6.t0);
        case 29:
          _context6.prev = 29;
          _iterator2.f();
          return _context6.finish(29);
        case 32:
          _context6.next = 34;
          return Promise.all(promises);
        case 34:
          return _context6.abrupt("return", true);
        case 37:
          _context6.prev = 37;
          _context6.t1 = _context6["catch"](2);
          __classPrivateFieldGet(this, _RedisClusterSlots_emit, "f").call(this, 'error', _context6.t1);
          return _context6.abrupt("return", false);
        case 41:
        case "end":
          return _context6.stop();
      }
    }, _callee6, this, [[2, 37], [12, 26, 29, 32]]);
  }));
  function _RedisClusterSlots_discover(_x5) {
    return _RedisClusterSlots_discover2.apply(this, arguments);
  }
  return _RedisClusterSlots_discover;
}(), _RedisClusterSlots_getShards = /*#__PURE__*/function () {
  var _RedisClusterSlots_getShards2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(rootNode) {
    var _this3 = this;
    var client;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          client = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, "f"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_clientOptionsDefaults).call(this, rootNode, true));
          client.on('error', function (err) {
            return __classPrivateFieldGet(_this3, _RedisClusterSlots_emit, "f").call(_this3, 'error', err);
          });
          _context7.next = 4;
          return client.connect();
        case 4:
          _context7.prev = 4;
          _context7.next = 7;
          return client.clusterSlots();
        case 7:
          return _context7.abrupt("return", _context7.sent);
        case 8:
          _context7.prev = 8;
          _context7.next = 11;
          return client.disconnect();
        case 11:
          return _context7.finish(8);
        case 12:
        case "end":
          return _context7.stop();
      }
    }, _callee7, this, [[4,, 8, 12]]);
  }));
  function _RedisClusterSlots_getShards(_x6) {
    return _RedisClusterSlots_getShards2.apply(this, arguments);
  }
  return _RedisClusterSlots_getShards;
}(), _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {
  switch (_typeof(__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").nodeAddressMap)) {
    case 'object':
      return __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").nodeAddressMap[address];
    case 'function':
      return __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").nodeAddressMap(address);
  }
}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options, disableReconnect) {
  var result;
  if (__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults) {
    var socket;
    if (__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults.socket) {
      socket = options !== null && options !== void 0 && options.socket ? _objectSpread(_objectSpread({}, __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults.socket), options.socket) : __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults.socket;
    } else {
      socket = options === null || options === void 0 ? void 0 : options.socket;
    }
    result = _objectSpread(_objectSpread(_objectSpread({}, __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults), options), {}, {
      socket: socket
    });
  } else {
    result = options;
  }
  if (disableReconnect) {
    var _result, _result$socket;
    (_result = result) !== null && _result !== void 0 ? _result : result = {};
    (_result$socket = result.socket) !== null && _result$socket !== void 0 ? _result$socket : result.socket = {};
    result.socket.reconnectStrategy = false;
  }
  return result;
}, _RedisClusterSlots_initiateSlotNode = function _RedisClusterSlots_initiateSlotNode(_ref, readonly, eagerConnent, addressesInUse, promises) {
  var id = _ref.id,
    ip = _ref.ip,
    port = _ref.port;
  var address = "".concat(ip, ":").concat(port);
  addressesInUse.add(address);
  var node = this.nodeByAddress.get(address);
  if (!node) {
    node = {
      id: id,
      host: ip,
      port: port,
      address: address,
      readonly: readonly,
      client: undefined
    };
    if (eagerConnent) {
      promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createNodeClient).call(this, node));
    }
    this.nodeByAddress.set(address, node);
  }
  (readonly ? this.replicas : this.masters).push(node);
  return node;
}, _RedisClusterSlots_createClient = /*#__PURE__*/function () {
  var _RedisClusterSlots_createClient2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(node) {
    var _classPrivateFieldGe4,
      _this4 = this;
    var readonly,
      client,
      _args8 = arguments;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          readonly = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : node.readonly;
          client = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, "f"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_clientOptionsDefaults).call(this, {
            socket: (_classPrivateFieldGe4 = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_getNodeAddress).call(this, node.address)) !== null && _classPrivateFieldGe4 !== void 0 ? _classPrivateFieldGe4 : {
              host: node.host,
              port: node.port
            },
            readonly: readonly
          }));
          client.on('error', function (err) {
            return __classPrivateFieldGet(_this4, _RedisClusterSlots_emit, "f").call(_this4, 'error', err);
          });
          _context8.next = 5;
          return client.connect();
        case 5:
          return _context8.abrupt("return", client);
        case 6:
        case "end":
          return _context8.stop();
      }
    }, _callee8, this);
  }));
  function _RedisClusterSlots_createClient(_x7) {
    return _RedisClusterSlots_createClient2.apply(this, arguments);
  }
  return _RedisClusterSlots_createClient;
}(), _RedisClusterSlots_createNodeClient = function _RedisClusterSlots_createNodeClient(node) {
  var promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createClient).call(this, node).then(function (client) {
    node.client = client;
    return client;
  })["catch"](function (err) {
    node.client = undefined;
    throw err;
  });
  node.client = promise;
  return promise;
}, _RedisClusterSlots_rediscover = /*#__PURE__*/function () {
  var _RedisClusterSlots_rediscover2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(startWith) {
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discover).call(this, startWith.options);
        case 2:
          if (!_context9.sent) {
            _context9.next = 4;
            break;
          }
          return _context9.abrupt("return");
        case 4:
          return _context9.abrupt("return", __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discoverWithRootNodes).call(this));
        case 5:
        case "end":
          return _context9.stop();
      }
    }, _callee9, this);
  }));
  function _RedisClusterSlots_rediscover(_x8) {
    return _RedisClusterSlots_rediscover2.apply(this, arguments);
  }
  return _RedisClusterSlots_rediscover;
}(), _RedisClusterSlots_destroy = /*#__PURE__*/function () {
  var _RedisClusterSlots_destroy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(fn) {
    var promises, _iterator3, _step3, _step3$value, master, replicas, _iterator4, _step4, client;
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, "f");
          promises = [];
          _iterator3 = _createForOfIteratorHelper(this.shards);
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              _step3$value = _step3.value, master = _step3$value.master, replicas = _step3$value.replicas;
              if (master.client) {
                promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, master.client, fn));
              }
              if (master.pubSubClient) {
                promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, master.pubSubClient, fn));
              }
              if (replicas) {
                _iterator4 = _createForOfIteratorHelper(replicas);
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    client = _step4.value.client;
                    if (client) {
                      promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, client, fn));
                    }
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          if (this.pubSubNode) {
            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, this.pubSubNode.client, fn));
            this.pubSubNode = undefined;
          }
          __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_resetSlots).call(this);
          this.nodeByAddress.clear();
          _context10.next = 9;
          return Promise.allSettled(promises);
        case 9:
        case "end":
          return _context10.stop();
      }
    }, _callee10, this);
  }));
  function _RedisClusterSlots_destroy(_x9) {
    return _RedisClusterSlots_destroy2.apply(this, arguments);
  }
  return _RedisClusterSlots_destroy;
}(), _RedisClusterSlots_execOnNodeClient = function _RedisClusterSlots_execOnNodeClient(client, fn) {
  return util_1.types.isPromise(client) ? client.then(fn) : fn(client);
}, _RedisClusterSlots_iterateAllNodes = /*#__PURE__*/_regeneratorRuntime().mark(function _RedisClusterSlots_iterateAllNodes() {
  var i, _iterator5, _step5, replica, _iterator6, _step6, master, _iterator7, _step7, _replica;
  return _regeneratorRuntime().wrap(function _RedisClusterSlots_iterateAllNodes$(_context11) {
    while (1) switch (_context11.prev = _context11.next) {
      case 0:
        i = Math.floor(Math.random() * (this.masters.length + this.replicas.length));
        if (!(i < this.masters.length)) {
          _context11.next = 24;
          break;
        }
      case 2:
        _context11.next = 4;
        return this.masters[i];
      case 4:
        if (++i < this.masters.length) {
          _context11.next = 2;
          break;
        }
      case 5:
        _iterator5 = _createForOfIteratorHelper(this.replicas);
        _context11.prev = 6;
        _iterator5.s();
      case 8:
        if ((_step5 = _iterator5.n()).done) {
          _context11.next = 14;
          break;
        }
        replica = _step5.value;
        _context11.next = 12;
        return replica;
      case 12:
        _context11.next = 8;
        break;
      case 14:
        _context11.next = 19;
        break;
      case 16:
        _context11.prev = 16;
        _context11.t0 = _context11["catch"](6);
        _iterator5.e(_context11.t0);
      case 19:
        _context11.prev = 19;
        _iterator5.f();
        return _context11.finish(19);
      case 22:
        _context11.next = 28;
        break;
      case 24:
        i -= this.masters.length;
      case 25:
        _context11.next = 27;
        return this.replicas[i];
      case 27:
        if (++i < this.replicas.length) {
          _context11.next = 25;
          break;
        }
      case 28:
        if (!true) {
          _context11.next = 65;
          break;
        }
        _iterator6 = _createForOfIteratorHelper(this.masters);
        _context11.prev = 30;
        _iterator6.s();
      case 32:
        if ((_step6 = _iterator6.n()).done) {
          _context11.next = 38;
          break;
        }
        master = _step6.value;
        _context11.next = 36;
        return master;
      case 36:
        _context11.next = 32;
        break;
      case 38:
        _context11.next = 43;
        break;
      case 40:
        _context11.prev = 40;
        _context11.t1 = _context11["catch"](30);
        _iterator6.e(_context11.t1);
      case 43:
        _context11.prev = 43;
        _iterator6.f();
        return _context11.finish(43);
      case 46:
        _iterator7 = _createForOfIteratorHelper(this.replicas);
        _context11.prev = 47;
        _iterator7.s();
      case 49:
        if ((_step7 = _iterator7.n()).done) {
          _context11.next = 55;
          break;
        }
        _replica = _step7.value;
        _context11.next = 53;
        return _replica;
      case 53:
        _context11.next = 49;
        break;
      case 55:
        _context11.next = 60;
        break;
      case 57:
        _context11.prev = 57;
        _context11.t2 = _context11["catch"](47);
        _iterator7.e(_context11.t2);
      case 60:
        _context11.prev = 60;
        _iterator7.f();
        return _context11.finish(60);
      case 63:
        _context11.next = 28;
        break;
      case 65:
      case "end":
        return _context11.stop();
    }
  }, _RedisClusterSlots_iterateAllNodes, this, [[6, 16, 19, 22], [30, 40, 43, 46], [47, 57, 60, 63]]);
}), _RedisClusterSlots_slotNodesIterator = /*#__PURE__*/_regeneratorRuntime().mark(function _RedisClusterSlots_slotNodesIterator(slot) {
  var i, _iterator8, _step8, replica;
  return _regeneratorRuntime().wrap(function _RedisClusterSlots_slotNodesIterator$(_context12) {
    while (1) switch (_context12.prev = _context12.next) {
      case 0:
        i = Math.floor(Math.random() * (1 + slot.replicas.length));
        if (!(i < slot.replicas.length)) {
          _context12.next = 5;
          break;
        }
      case 2:
        _context12.next = 4;
        return slot.replicas[i];
      case 4:
        if (++i < slot.replicas.length) {
          _context12.next = 2;
          break;
        }
      case 5:
        if (!true) {
          _context12.next = 27;
          break;
        }
        _context12.next = 8;
        return slot.master;
      case 8:
        _iterator8 = _createForOfIteratorHelper(slot.replicas);
        _context12.prev = 9;
        _iterator8.s();
      case 11:
        if ((_step8 = _iterator8.n()).done) {
          _context12.next = 17;
          break;
        }
        replica = _step8.value;
        _context12.next = 15;
        return replica;
      case 15:
        _context12.next = 11;
        break;
      case 17:
        _context12.next = 22;
        break;
      case 19:
        _context12.prev = 19;
        _context12.t0 = _context12["catch"](9);
        _iterator8.e(_context12.t0);
      case 22:
        _context12.prev = 22;
        _iterator8.f();
        return _context12.finish(22);
      case 25:
        _context12.next = 5;
        break;
      case 27:
      case "end":
        return _context12.stop();
    }
  }, _RedisClusterSlots_slotNodesIterator, null, [[9, 19, 22, 25]]);
}), _RedisClusterSlots_initiatePubSubClient = /*#__PURE__*/function () {
  var _RedisClusterSlots_initiatePubSubClient2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(toResubscribe) {
    var _this5 = this;
    var index, node;
    return _regeneratorRuntime().wrap(function _callee12$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          index = Math.floor(Math.random() * (this.masters.length + this.replicas.length)), node = index < this.masters.length ? this.masters[index] : this.replicas[index - this.masters.length];
          this.pubSubNode = {
            address: node.address,
            client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createClient).call(this, node, true).then( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(client) {
                return _regeneratorRuntime().wrap(function _callee11$(_context13) {
                  while (1) switch (_context13.prev = _context13.next) {
                    case 0:
                      if (!toResubscribe) {
                        _context13.next = 3;
                        break;
                      }
                      _context13.next = 3;
                      return Promise.all([client.extendPubSubListeners(pub_sub_1.PubSubType.CHANNELS, toResubscribe[pub_sub_1.PubSubType.CHANNELS]), client.extendPubSubListeners(pub_sub_1.PubSubType.PATTERNS, toResubscribe[pub_sub_1.PubSubType.PATTERNS])]);
                    case 3:
                      _this5.pubSubNode.client = client;
                      return _context13.abrupt("return", client);
                    case 5:
                    case "end":
                      return _context13.stop();
                  }
                }, _callee11);
              }));
              return function (_x11) {
                return _ref2.apply(this, arguments);
              };
            }())["catch"](function (err) {
              _this5.pubSubNode = undefined;
              throw err;
            })
          };
          return _context14.abrupt("return", this.pubSubNode.client);
        case 3:
        case "end":
          return _context14.stop();
      }
    }, _callee12, this);
  }));
  function _RedisClusterSlots_initiatePubSubClient(_x10) {
    return _RedisClusterSlots_initiatePubSubClient2.apply(this, arguments);
  }
  return _RedisClusterSlots_initiatePubSubClient;
}(), _RedisClusterSlots_initiateShardedPubSubClient = function _RedisClusterSlots_initiateShardedPubSubClient(master) {
  var _this6 = this;
  var promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createClient).call(this, master, true).then(function (client) {
    client.on('server-sunsubscribe', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(channel, listeners) {
        var redirectTo;
        return _regeneratorRuntime().wrap(function _callee13$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.prev = 0;
              _context15.next = 3;
              return _this6.rediscover(client);
            case 3:
              _context15.next = 5;
              return _this6.getShardedPubSubClient(channel);
            case 5:
              redirectTo = _context15.sent;
              redirectTo.extendPubSubChannelListeners(pub_sub_1.PubSubType.SHARDED, channel, listeners);
              _context15.next = 12;
              break;
            case 9:
              _context15.prev = 9;
              _context15.t0 = _context15["catch"](0);
              __classPrivateFieldGet(_this6, _RedisClusterSlots_emit, "f").call(_this6, 'sharded-shannel-moved-error', _context15.t0, channel, listeners);
            case 12:
            case "end":
              return _context15.stop();
          }
        }, _callee13, null, [[0, 9]]);
      }));
      return function (_x12, _x13) {
        return _ref3.apply(this, arguments);
      };
    }());
    master.pubSubClient = client;
    return client;
  })["catch"](function (err) {
    master.pubSubClient = undefined;
    throw err;
  });
  master.pubSubClient = promise;
  return promise;
};
_RedisClusterSlots_SLOTS = {
  value: 16384
};
exports["default"] = RedisClusterSlots;