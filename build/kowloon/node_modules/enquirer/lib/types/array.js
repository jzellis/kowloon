'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }
function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new TypeError('failed to set property'); } return value; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var colors = require('ansi-colors');
var Prompt = require('../prompt');
var roles = require('../roles');
var utils = require('../utils');
var reorder = utils.reorder,
  _scrollUp = utils.scrollUp,
  _scrollDown = utils.scrollDown,
  isObject = utils.isObject,
  _swap = utils.swap;
var ArrayPrompt = /*#__PURE__*/function (_Prompt) {
  _inherits(ArrayPrompt, _Prompt);
  var _super = _createSuper(ArrayPrompt);
  function ArrayPrompt(options) {
    var _this;
    _classCallCheck(this, ArrayPrompt);
    _this = _super.call(this, options);
    _this.cursorHide();
    _this.maxSelected = options.maxSelected || Infinity;
    _this.multiple = options.multiple || false;
    _this.initial = options.initial || 0;
    _this.delay = options.delay || 0;
    _this.longest = 0;
    _this.num = '';
    return _this;
  }
  _createClass(ArrayPrompt, [{
    key: "initialize",
    value: function () {
      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof this.options.initial === 'function')) {
                _context.next = 4;
                break;
              }
              _context.next = 3;
              return this.options.initial.call(this);
            case 3:
              this.initial = _context.sent;
            case 4:
              _context.next = 6;
              return this.reset(true);
            case 6:
              _context.next = 8;
              return _get(_getPrototypeOf(ArrayPrompt.prototype), "initialize", this).call(this);
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
  }, {
    key: "reset",
    value: function () {
      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _this2 = this;
        var _this$options, choices, initial, autofocus, suggest;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _this$options = this.options, choices = _this$options.choices, initial = _this$options.initial, autofocus = _this$options.autofocus, suggest = _this$options.suggest;
              this.state._choices = [];
              this.state.choices = [];
              _context2.t0 = Promise;
              _context2.next = 6;
              return this.toChoices(choices);
            case 6:
              _context2.t1 = _context2.sent;
              _context2.next = 9;
              return _context2.t0.all.call(_context2.t0, _context2.t1);
            case 9:
              this.choices = _context2.sent;
              this.choices.forEach(function (ch) {
                return ch.enabled = false;
              });
              if (!(typeof suggest !== 'function' && this.selectable.length === 0)) {
                _context2.next = 13;
                break;
              }
              throw new Error('At least one choice must be selectable');
            case 13:
              if (isObject(initial)) initial = Object.keys(initial);
              if (!Array.isArray(initial)) {
                _context2.next = 21;
                break;
              }
              if (autofocus != null) this.index = this.findIndex(autofocus);
              initial.forEach(function (v) {
                return _this2.enable(_this2.find(v));
              });
              _context2.next = 19;
              return this.render();
            case 19:
              _context2.next = 24;
              break;
            case 21:
              if (autofocus != null) initial = autofocus;
              if (typeof initial === 'string') initial = this.findIndex(initial);
              if (typeof initial === 'number' && initial > -1) {
                this.index = Math.max(0, Math.min(initial, this.choices.length));
                this.enable(this.find(this.index));
              }
            case 24:
              if (!this.isDisabled(this.focused)) {
                _context2.next = 27;
                break;
              }
              _context2.next = 27;
              return this.down();
            case 27:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function reset() {
        return _reset.apply(this, arguments);
      }
      return reset;
    }()
  }, {
    key: "toChoices",
    value: function () {
      var _toChoices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(value, parent) {
        var _this3 = this;
        var choices, index, toChoices;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              this.state.loadingChoices = true;
              choices = [];
              index = 0;
              toChoices = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(items, parent) {
                  var i, choice;
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!(typeof items === 'function')) {
                          _context3.next = 4;
                          break;
                        }
                        _context3.next = 3;
                        return items.call(_this3);
                      case 3:
                        items = _context3.sent;
                      case 4:
                        if (!(items instanceof Promise)) {
                          _context3.next = 8;
                          break;
                        }
                        _context3.next = 7;
                        return items;
                      case 7:
                        items = _context3.sent;
                      case 8:
                        i = 0;
                      case 9:
                        if (!(i < items.length)) {
                          _context3.next = 20;
                          break;
                        }
                        _context3.next = 12;
                        return _this3.toChoice(items[i], index++, parent);
                      case 12:
                        choice = items[i] = _context3.sent;
                        choices.push(choice);
                        if (!choice.choices) {
                          _context3.next = 17;
                          break;
                        }
                        _context3.next = 17;
                        return toChoices(choice.choices, choice);
                      case 17:
                        i++;
                        _context3.next = 9;
                        break;
                      case 20:
                        return _context3.abrupt("return", choices);
                      case 21:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function toChoices(_x3, _x4) {
                  return _ref.apply(this, arguments);
                };
              }();
              return _context4.abrupt("return", toChoices(value, parent).then(function (choices) {
                _this3.state.loadingChoices = false;
                return choices;
              }));
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function toChoices(_x, _x2) {
        return _toChoices.apply(this, arguments);
      }
      return toChoices;
    }()
  }, {
    key: "toChoice",
    value: function () {
      var _toChoice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(ele, i, parent) {
        var origVal, role, choice;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(typeof ele === 'function')) {
                _context5.next = 4;
                break;
              }
              _context5.next = 3;
              return ele.call(this, this);
            case 3:
              ele = _context5.sent;
            case 4:
              if (!(ele instanceof Promise)) {
                _context5.next = 8;
                break;
              }
              _context5.next = 7;
              return ele;
            case 7:
              ele = _context5.sent;
            case 8:
              if (typeof ele === 'string') ele = {
                name: ele
              };
              if (!ele.normalized) {
                _context5.next = 11;
                break;
              }
              return _context5.abrupt("return", ele);
            case 11:
              ele.normalized = true;
              origVal = ele.value;
              role = roles(ele.role, this.options);
              ele = role(this, ele);
              if (typeof ele.disabled === 'string' && !ele.hint) {
                ele.hint = ele.disabled;
                ele.disabled = true;
              }
              if (ele.disabled === true && ele.hint == null) {
                ele.hint = '(disabled)';
              }

              // if the choice was already normalized, return it
              if (!(ele.index != null)) {
                _context5.next = 19;
                break;
              }
              return _context5.abrupt("return", ele);
            case 19:
              ele.name = ele.name || ele.key || ele.title || ele.value || ele.message;
              ele.message = ele.message || ele.name || '';
              ele.value = [ele.value, ele.name].find(this.isValue.bind(this));
              ele.input = '';
              ele.index = i;
              ele.cursor = 0;
              utils.define(ele, 'parent', parent);
              ele.level = parent ? parent.level + 1 : 1;
              if (ele.indent == null) {
                ele.indent = parent ? parent.indent + '  ' : ele.indent || '';
              }
              ele.path = parent ? parent.path + '.' + ele.name : ele.name;
              ele.enabled = !!(this.multiple && !this.isDisabled(ele) && (ele.enabled || this.isSelected(ele)));
              if (!this.isDisabled(ele)) {
                this.longest = Math.max(this.longest, colors.unstyle(ele.message).length);
              }

              // shallow clone the choice first
              choice = _objectSpread({}, ele); // then allow the choice to be reset using the "original" values
              ele.reset = function () {
                var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : choice.input;
                var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : choice.value;
                for (var _i = 0, _Object$keys = Object.keys(choice); _i < _Object$keys.length; _i++) {
                  var key = _Object$keys[_i];
                  ele[key] = choice[key];
                }
                ele.input = input;
                ele.value = value;
              };
              if (!(origVal == null && typeof ele.initial === 'function')) {
                _context5.next = 37;
                break;
              }
              _context5.next = 36;
              return ele.initial.call(this, this.state, ele, i);
            case 36:
              ele.input = _context5.sent;
            case 37:
              return _context5.abrupt("return", ele);
            case 38:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function toChoice(_x5, _x6, _x7) {
        return _toChoice.apply(this, arguments);
      }
      return toChoice;
    }()
  }, {
    key: "onChoice",
    value: function () {
      var _onChoice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(choice, i) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              this.emit('choice', choice, i, this);
              if (!(typeof choice.onChoice === 'function')) {
                _context6.next = 4;
                break;
              }
              _context6.next = 4;
              return choice.onChoice.call(this, this.state, choice, i);
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function onChoice(_x8, _x9) {
        return _onChoice.apply(this, arguments);
      }
      return onChoice;
    }()
  }, {
    key: "addChoice",
    value: function () {
      var _addChoice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(ele, i, parent) {
        var choice;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.toChoice(ele, i, parent);
            case 2:
              choice = _context7.sent;
              this.choices.push(choice);
              this.index = this.choices.length - 1;
              this.limit = this.choices.length;
              return _context7.abrupt("return", choice);
            case 7:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function addChoice(_x10, _x11, _x12) {
        return _addChoice.apply(this, arguments);
      }
      return addChoice;
    }()
  }, {
    key: "newItem",
    value: function () {
      var _newItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(item, i, parent) {
        var ele, choice;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              ele = _objectSpread({
                name: 'New choice name?',
                editable: true,
                newChoice: true
              }, item);
              _context8.next = 3;
              return this.addChoice(ele, i, parent);
            case 3:
              choice = _context8.sent;
              choice.updateChoice = function () {
                delete choice.newChoice;
                choice.name = choice.message = choice.input;
                choice.input = '';
                choice.cursor = 0;
              };
              return _context8.abrupt("return", this.render());
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function newItem(_x13, _x14, _x15) {
        return _newItem.apply(this, arguments);
      }
      return newItem;
    }()
  }, {
    key: "indent",
    value: function indent(choice) {
      if (choice.indent == null) {
        return choice.level > 1 ? '  '.repeat(choice.level - 1) : '';
      }
      return choice.indent;
    }
  }, {
    key: "dispatch",
    value: function dispatch(s, key) {
      if (this.multiple && this[key.name]) return this[key.name]();
      this.alert();
    }
  }, {
    key: "focus",
    value: function focus(choice, enabled) {
      if (typeof enabled !== 'boolean') enabled = choice.enabled;
      if (enabled && !choice.enabled && this.selected.length >= this.maxSelected) {
        return this.alert();
      }
      this.index = choice.index;
      choice.enabled = enabled && !this.isDisabled(choice);
      return choice;
    }
  }, {
    key: "space",
    value: function space() {
      if (!this.multiple) return this.alert();
      this.toggle(this.focused);
      return this.render();
    }
  }, {
    key: "a",
    value: function a() {
      if (this.maxSelected < this.choices.length) return this.alert();
      var enabled = this.selectable.every(function (ch) {
        return ch.enabled;
      });
      this.choices.forEach(function (ch) {
        return ch.enabled = !enabled;
      });
      return this.render();
    }
  }, {
    key: "i",
    value: function i() {
      // don't allow choices to be inverted if it will result in
      // more than the maximum number of allowed selected items.
      if (this.choices.length - this.selected.length > this.maxSelected) {
        return this.alert();
      }
      this.choices.forEach(function (ch) {
        return ch.enabled = !ch.enabled;
      });
      return this.render();
    }
  }, {
    key: "g",
    value: function g() {
      var choice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.focused;
      if (!this.choices.some(function (ch) {
        return !!ch.parent;
      })) return this.a();
      this.toggle(choice.parent && !choice.choices ? choice.parent : choice);
      return this.render();
    }
  }, {
    key: "toggle",
    value: function toggle(choice, enabled) {
      var _this4 = this;
      if (!choice.enabled && this.selected.length >= this.maxSelected) {
        return this.alert();
      }
      if (typeof enabled !== 'boolean') enabled = !choice.enabled;
      choice.enabled = enabled;
      if (choice.choices) {
        choice.choices.forEach(function (ch) {
          return _this4.toggle(ch, enabled);
        });
      }
      var parent = choice.parent;
      while (parent) {
        var choices = parent.choices.filter(function (ch) {
          return _this4.isDisabled(ch);
        });
        parent.enabled = choices.every(function (ch) {
          return ch.enabled === true;
        });
        parent = parent.parent;
      }
      reset(this, this.choices);
      this.emit('toggle', choice, this);
      return choice;
    }
  }, {
    key: "enable",
    value: function enable(choice) {
      if (this.selected.length >= this.maxSelected) return this.alert();
      choice.enabled = !this.isDisabled(choice);
      choice.choices && choice.choices.forEach(this.enable.bind(this));
      return choice;
    }
  }, {
    key: "disable",
    value: function disable(choice) {
      choice.enabled = false;
      choice.choices && choice.choices.forEach(this.disable.bind(this));
      return choice;
    }
  }, {
    key: "number",
    value: function number(n) {
      var _this5 = this;
      this.num += n;
      var number = function number(num) {
        var i = Number(num);
        if (i > _this5.choices.length - 1) return _this5.alert();
        var focused = _this5.focused;
        var choice = _this5.choices.find(function (ch) {
          return i === ch.index;
        });
        if (!choice.enabled && _this5.selected.length >= _this5.maxSelected) {
          return _this5.alert();
        }
        if (_this5.visible.indexOf(choice) === -1) {
          var choices = reorder(_this5.choices);
          var actualIdx = choices.indexOf(choice);
          if (focused.index > actualIdx) {
            var start = choices.slice(actualIdx, actualIdx + _this5.limit);
            var end = choices.filter(function (ch) {
              return !start.includes(ch);
            });
            _this5.choices = start.concat(end);
          } else {
            var pos = actualIdx - _this5.limit + 1;
            _this5.choices = choices.slice(pos).concat(choices.slice(0, pos));
          }
        }
        _this5.index = _this5.choices.indexOf(choice);
        _this5.toggle(_this5.focused);
        return _this5.render();
      };
      clearTimeout(this.numberTimeout);
      return new Promise(function (resolve) {
        var len = _this5.choices.length;
        var num = _this5.num;
        var handle = function handle() {
          var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var res = arguments.length > 1 ? arguments[1] : undefined;
          clearTimeout(_this5.numberTimeout);
          if (val) res = number(num);
          _this5.num = '';
          resolve(res);
        };
        if (num === '0' || num.length === 1 && Number(num + '0') > len) {
          return handle(true);
        }
        if (Number(num) > len) {
          return handle(false, _this5.alert());
        }
        _this5.numberTimeout = setTimeout(function () {
          return handle(true);
        }, _this5.delay);
      });
    }
  }, {
    key: "home",
    value: function home() {
      this.choices = reorder(this.choices);
      this.index = 0;
      return this.render();
    }
  }, {
    key: "end",
    value: function end() {
      var pos = this.choices.length - this.limit;
      var choices = reorder(this.choices);
      this.choices = choices.slice(pos).concat(choices.slice(0, pos));
      this.index = this.limit - 1;
      return this.render();
    }
  }, {
    key: "first",
    value: function first() {
      this.index = 0;
      return this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.index = this.visible.length - 1;
      return this.render();
    }
  }, {
    key: "prev",
    value: function prev() {
      if (this.visible.length <= 1) return this.alert();
      return this.up();
    }
  }, {
    key: "next",
    value: function next() {
      if (this.visible.length <= 1) return this.alert();
      return this.down();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.cursor >= this.input.length) return this.alert();
      this.cursor++;
      return this.render();
    }
  }, {
    key: "left",
    value: function left() {
      if (this.cursor <= 0) return this.alert();
      this.cursor--;
      return this.render();
    }
  }, {
    key: "up",
    value: function up() {
      var len = this.choices.length;
      var vis = this.visible.length;
      var idx = this.index;
      if (this.options.scroll === false && idx === 0) {
        return this.alert();
      }
      if (len > vis && idx === 0) {
        return this.scrollUp();
      }
      this.index = (idx - 1 % len + len) % len;
      if (this.isDisabled()) {
        return this.up();
      }
      return this.render();
    }
  }, {
    key: "down",
    value: function down() {
      var len = this.choices.length;
      var vis = this.visible.length;
      var idx = this.index;
      if (this.options.scroll === false && idx === vis - 1) {
        return this.alert();
      }
      if (len > vis && idx === vis - 1) {
        return this.scrollDown();
      }
      this.index = (idx + 1) % len;
      if (this.isDisabled()) {
        return this.down();
      }
      return this.render();
    }
  }, {
    key: "scrollUp",
    value: function scrollUp() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.choices = _scrollUp(this.choices);
      this.index = i;
      if (this.isDisabled()) {
        return this.up();
      }
      return this.render();
    }
  }, {
    key: "scrollDown",
    value: function scrollDown() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.visible.length - 1;
      this.choices = _scrollDown(this.choices);
      this.index = i;
      if (this.isDisabled()) {
        return this.down();
      }
      return this.render();
    }
  }, {
    key: "shiftUp",
    value: function () {
      var _shiftUp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!(this.options.sort === true)) {
                _context9.next = 7;
                break;
              }
              this.sorting = true;
              this.swap(this.index - 1);
              _context9.next = 5;
              return this.up();
            case 5:
              this.sorting = false;
              return _context9.abrupt("return");
            case 7:
              return _context9.abrupt("return", this.scrollUp(this.index));
            case 8:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function shiftUp() {
        return _shiftUp.apply(this, arguments);
      }
      return shiftUp;
    }()
  }, {
    key: "shiftDown",
    value: function () {
      var _shiftDown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              if (!(this.options.sort === true)) {
                _context10.next = 7;
                break;
              }
              this.sorting = true;
              this.swap(this.index + 1);
              _context10.next = 5;
              return this.down();
            case 5:
              this.sorting = false;
              return _context10.abrupt("return");
            case 7:
              return _context10.abrupt("return", this.scrollDown(this.index));
            case 8:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function shiftDown() {
        return _shiftDown.apply(this, arguments);
      }
      return shiftDown;
    }()
  }, {
    key: "pageUp",
    value: function pageUp() {
      if (this.visible.length <= 1) return this.alert();
      this.limit = Math.max(this.limit - 1, 0);
      this.index = Math.min(this.limit - 1, this.index);
      this._limit = this.limit;
      if (this.isDisabled()) {
        return this.up();
      }
      return this.render();
    }
  }, {
    key: "pageDown",
    value: function pageDown() {
      if (this.visible.length >= this.choices.length) return this.alert();
      this.index = Math.max(0, this.index);
      this.limit = Math.min(this.limit + 1, this.choices.length);
      this._limit = this.limit;
      if (this.isDisabled()) {
        return this.down();
      }
      return this.render();
    }
  }, {
    key: "swap",
    value: function swap(pos) {
      _swap(this.choices, this.index, pos);
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      var choice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.focused;
      var keys = ['disabled', 'collapsed', 'hidden', 'completing', 'readonly'];
      if (choice && keys.some(function (key) {
        return choice[key] === true;
      })) {
        return true;
      }
      return choice && choice.role === 'heading';
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      var _this6 = this;
      var choice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.focused;
      if (Array.isArray(choice)) return choice.every(function (ch) {
        return _this6.isEnabled(ch);
      });
      if (choice.choices) {
        var choices = choice.choices.filter(function (ch) {
          return !_this6.isDisabled(ch);
        });
        return choice.enabled && choices.every(function (ch) {
          return _this6.isEnabled(ch);
        });
      }
      return choice.enabled && !this.isDisabled(choice);
    }
  }, {
    key: "isChoice",
    value: function isChoice(choice, value) {
      return choice.name === value || choice.index === Number(value);
    }
  }, {
    key: "isSelected",
    value: function isSelected(choice) {
      var _this7 = this;
      if (Array.isArray(this.initial)) {
        return this.initial.some(function (value) {
          return _this7.isChoice(choice, value);
        });
      }
      return this.isChoice(choice, this.initial);
    }
  }, {
    key: "map",
    value: function map() {
      var _this8 = this;
      var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';
      return [].concat(names || []).reduce(function (acc, name) {
        acc[name] = _this8.find(name, prop);
        return acc;
      }, {});
    }
  }, {
    key: "filter",
    value: function filter(value, prop) {
      var isChoice = function isChoice(ele, i) {
        return [ele.name, i].includes(value);
      };
      var fn = typeof value === 'function' ? value : isChoice;
      var choices = this.options.multiple ? this.state._choices : this.choices;
      var result = choices.filter(fn);
      if (prop) {
        return result.map(function (ch) {
          return ch[prop];
        });
      }
      return result;
    }
  }, {
    key: "find",
    value: function find(value, prop) {
      if (isObject(value)) return prop ? value[prop] : value;
      var isChoice = function isChoice(ele, i) {
        return [ele.name, i].includes(value);
      };
      var fn = typeof value === 'function' ? value : isChoice;
      var choice = this.choices.find(fn);
      if (choice) {
        return prop ? choice[prop] : choice;
      }
    }
  }, {
    key: "findIndex",
    value: function findIndex(value) {
      return this.choices.indexOf(this.find(value));
    }
  }, {
    key: "submit",
    value: function () {
      var _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var choice, _this$options2, reorder, sort, multi, value;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              choice = this.focused;
              if (choice) {
                _context11.next = 3;
                break;
              }
              return _context11.abrupt("return", this.alert());
            case 3:
              if (!choice.newChoice) {
                _context11.next = 8;
                break;
              }
              if (choice.input) {
                _context11.next = 6;
                break;
              }
              return _context11.abrupt("return", this.alert());
            case 6:
              choice.updateChoice();
              return _context11.abrupt("return", this.render());
            case 8:
              if (!this.choices.some(function (ch) {
                return ch.newChoice;
              })) {
                _context11.next = 10;
                break;
              }
              return _context11.abrupt("return", this.alert());
            case 10:
              _this$options2 = this.options, reorder = _this$options2.reorder, sort = _this$options2.sort;
              multi = this.multiple === true;
              value = this.selected;
              if (!(value === void 0)) {
                _context11.next = 15;
                break;
              }
              return _context11.abrupt("return", this.alert());
            case 15:
              // re-sort choices to original order
              if (Array.isArray(value) && reorder !== false && sort !== true) {
                value = utils.reorder(value);
              }
              this.value = multi ? value.map(function (ch) {
                return ch.name;
              }) : value.name;
              return _context11.abrupt("return", _get(_getPrototypeOf(ArrayPrompt.prototype), "submit", this).call(this));
            case 18:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function submit() {
        return _submit.apply(this, arguments);
      }
      return submit;
    }()
  }, {
    key: "choices",
    get: function get() {
      return reset(this, this.state.choices || []);
    },
    set: function set() {
      var _this9 = this;
      var choices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.state._choices = this.state._choices || [];
      this.state.choices = choices;
      var _iterator = _createForOfIteratorHelper(choices),
        _step;
      try {
        var _loop = function _loop() {
          var choice = _step.value;
          if (!_this9.state._choices.some(function (ch) {
            return ch.name === choice.name;
          })) {
            _this9.state._choices.push(choice);
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!this._initial && this.options.initial) {
        this._initial = true;
        var init = this.initial;
        if (typeof init === 'string' || typeof init === 'number') {
          var choice = this.find(init);
          if (choice) {
            this.initial = choice.index;
            this.focus(choice, true);
          }
        }
      }
    }
  }, {
    key: "visible",
    get: function get() {
      return (this.state.visible || this.choices).slice(0, this.limit);
    },
    set: function set(visible) {
      this.state.visible = visible;
    }
  }, {
    key: "limit",
    get: function get() {
      var state = this.state,
        options = this.options,
        choices = this.choices;
      var limit = state.limit || this._limit || options.limit || choices.length;
      return Math.min(limit, this.height);
    },
    set: function set(num) {
      this.state.limit = num;
    }
  }, {
    key: "value",
    get: function get() {
      if (typeof _get(_getPrototypeOf(ArrayPrompt.prototype), "value", this) !== 'string' && _get(_getPrototypeOf(ArrayPrompt.prototype), "value", this) === this.initial) {
        return this.input;
      }
      return _get(_getPrototypeOf(ArrayPrompt.prototype), "value", this);
    },
    set: function set(value) {
      _set(_getPrototypeOf(ArrayPrompt.prototype), "value", value, this, true);
    }
  }, {
    key: "index",
    get: function get() {
      return Math.max(0, this.state ? this.state.index : 0);
    },
    set: function set(i) {
      this.state.index = i;
    }
  }, {
    key: "enabled",
    get: function get() {
      return this.filter(this.isEnabled.bind(this));
    }
  }, {
    key: "focused",
    get: function get() {
      var choice = this.choices[this.index];
      if (choice && this.state.submitted && this.multiple !== true) {
        choice.enabled = true;
      }
      return choice;
    }
  }, {
    key: "selectable",
    get: function get() {
      var _this10 = this;
      return this.choices.filter(function (choice) {
        return !_this10.isDisabled(choice);
      });
    }
  }, {
    key: "selected",
    get: function get() {
      return this.multiple ? this.enabled : this.focused;
    }
  }]);
  return ArrayPrompt;
}(Prompt);
function reset(prompt, choices) {
  if (choices instanceof Promise) return choices;
  if (typeof choices === 'function') {
    if (utils.isAsyncFn(choices)) return choices;
    choices = choices.call(prompt, prompt);
  }
  var _iterator2 = _createForOfIteratorHelper(choices),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var choice = _step2.value;
      if (Array.isArray(choice.choices)) {
        var items = choice.choices.filter(function (ch) {
          return !prompt.isDisabled(ch);
        });
        choice.enabled = items.every(function (ch) {
          return ch.enabled === true;
        });
      }
      if (prompt.isDisabled(choice) === true) {
        delete choice.enabled;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return choices;
}
module.exports = ArrayPrompt;