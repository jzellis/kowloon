"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var t = Object.defineProperty;
var o = Object.getOwnPropertyDescriptor;
var r = Object.getOwnPropertyNames;
var m = Object.prototype.hasOwnProperty;
var n = function n(e, i) {
    for (var u in i) t(e, u, {
      get: i[u],
      enumerable: !0
    });
  },
  l = function l(e, i, u, s) {
    if (i && _typeof(i) == "object" || typeof i == "function") {
      var _iterator = _createForOfIteratorHelper(r(i)),
        _step;
      try {
        var _loop = function _loop() {
          var a = _step.value;
          !m.call(e, a) && a !== u && t(e, a, {
            get: function get() {
              return i[a];
            },
            enumerable: !(s = o(i, a)) || s.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return e;
  };
var d = function d(e) {
  return l(t({}, "__esModule", {
    value: !0
  }), e);
};
var c = {};
n(c, {
  "default": function _default() {
    return p;
  }
});
module.exports = d(c);
var p = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "odit", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "dolor", "amet", "consectetur", "adipisci", "velit", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "dolore", "magnam", "aliquam", "quaerat", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "ipsam", "voluptas", "suscipit", "laboriosam", "nisi", "aliquid", "ex", "ea", "commodi", "autem", "vel", "eum", "iure", "reprehenderit", "in", "voluptate", "esse", "quam", "nihil", "molestiae", "iusto", "odio", "dignissimos", "ducimus", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "provident", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "culpa", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "dolorum", "fuga", "harum", "quidem", "rerum", "facilis", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "eligendi", "optio", "cumque", "impedit", "quo", "porro", "quisquam", "minus", "quod", "maxime", "placeat", "facere", "possimus", "assumenda", "repellendus", "temporibus", "quibusdam", "illum", "fugiat", "nulla", "pariatur", "at", "vero", "accusamus", "officiis", "debitis", "necessitatibus", "saepe", "eveniet", "voluptates", "repudiandae", "recusandae", "itaque", "earum", "hic", "tenetur", "a", "sapiente", "delectus", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];