"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var n = Object.defineProperty;
var o = Object.getOwnPropertyDescriptor;
var t = Object.getOwnPropertyNames;
var u = Object.prototype.hasOwnProperty;
var d = function d(a, i) {
    for (var r in i) n(a, r, {
      get: i[r],
      enumerable: !0
    });
  },
  s = function s(a, i, r, l) {
    if (i && _typeof(i) == "object" || typeof i == "function") {
      var _iterator = _createForOfIteratorHelper(t(i)),
        _step;
      try {
        var _loop = function _loop() {
          var e = _step.value;
          !u.call(a, e) && e !== r && n(a, e, {
            get: function get() {
              return i[e];
            },
            enumerable: !(l = o(i, e)) || l.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var m = function m(a) {
  return s(n({}, "__esModule", {
    value: !0
  }), a);
};
var A = {};
d(A, {
  "default": function _default() {
    return v;
  }
});
module.exports = m(A);
var v = ["Adrian", "Afanasi", "Afanasie", "Ahmad", "Albert", "Alexander", "Alexandr", "Alexandru", "Alexei", "Ali", "Alic", "Amir", "Anatol", "Anatoli", "Anatolie", "Anatolii", "Andrei", "Andrian", "Anjela", "Anton", "Arcadi", "Arcadie", "Arcadii", "Artiom", "Artur", "Augustin", "Aurel", "Aurelian", "Aureliu", "Boris", "Calin", "Catalin", "Cezar", "Chiril", "Chirill", "Ciprian", "Constantin", "Constatin", "Cornel", "Corneliu", "Cristian", "Cristin", "Cristofor", "Daniel", "Daniil", "Danil", "Danu", "David", "Denis", "Dimitri", "Dimitrii", "Dinu", "Dmitri", "Dmitrii", "Dorel", "Dorian", "Dorin", "Dragomir", "Dragos", "Dumitru", "Edgar", "Eduard", "Efim", "Egor", "Emil", "Emilian", "Eric", "Eugen", "Eugeniu", "Evgheni", "Evghenii", "Feodor", "Filip", "Filipp", "Fiodor", "Florin", "Gabriel", "Gavril", "George", "Ghenadi", "Ghenadie", "Ghennadi", "Gheorghe", "Gheorghi", "Gheorghii", "Gherman", "Gleb", "Grigore", "Grigori", "Husein", "Iacob", "Iacov", "Ianos", "Iaroslav", "Ibrahim", "Igor", "Igori", "Ilia", "Ilie", "Ioan", "Ion", "Ionel", "Iosif", "Iulian", "Iuri", "Iurie", "Iurii", "Ivan", "Jan", "Laurentiu", "Leon", "Leonid", "Lev", "Liubovi", "Liviu", "Luca", "Lucian", "Lungu", "Mahmoud", "Marat", "Marc", "Marcel", "Marian", "Marin", "Marius", "Maxim", "Mihai", "Mihail", "Mircea", "Miroslav", "Mohamad", "Mohamed", "Muhammad", "Mustafa", "Nicanor", "Nicolae", "Nicolai", "Nicolaie", "Nicon", "Nicu", "Octavian", "Oleg", "Oleksandr", "Pantelei", "Pavel", "Petru", "Piotr", "Radion", "Radislav", "Radu", "Renat", "Robert", "Rodion", "Roman", "Romeo", "Rostislav", "Ruslan", "Rustam", "Said", "Sandu", "Sava", "Savva", "Seghei", "Semion", "Serafim", "Sergei", "Sergey", "Serghei", "Sergiu", "Silvia", "Silviu", "Simion", "Spiridon", "Stanislav", "Stefan", "Stela", "Stelian", "Stepan", "Sveatoslav", "Svetlana", "Svetoslav", "Taras", "Teodor", "Timofei", "Toma", "Traian", "Trofim", "Tudor", "Vadim", "Valentin", "Valeri", "Valerii", "Valeriu", "Vasile", "Vasili", "Vasilie", "Veaceslav", "Veceaslav", "Veceslav", "Veniamin", "Vergiliu", "Victor", "Viorel", "Virgiliu", "Vitali", "Vitalie", "Vitalii", "Vlad", "Vladimer", "Vladimir", "Vladislav", "Vladlen", "Vsevolod", "Zahar", "Zaharia"];