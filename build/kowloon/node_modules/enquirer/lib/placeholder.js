'use strict';

var utils = require('./utils');

/**
 * Render a placeholder value with cursor and styling based on the
 * position of the cursor.
 *
 * @param {Object} `prompt` Prompt instance.
 * @param {String} `input` Input string.
 * @param {String} `initial` The initial user-provided value.
 * @param {Number} `pos` Current cursor position.
 * @param {Boolean} `showCursor` Render a simulated cursor using the inverse primary style.
 * @return {String} Returns the styled placeholder string.
 * @api public
 */

module.exports = function (prompt) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  prompt.cursorHide();
  var _options$input = options.input,
    input = _options$input === void 0 ? '' : _options$input,
    _options$initial = options.initial,
    initial = _options$initial === void 0 ? '' : _options$initial,
    pos = options.pos,
    _options$showCursor = options.showCursor,
    showCursor = _options$showCursor === void 0 ? true : _options$showCursor,
    color = options.color;
  var style = color || prompt.styles.placeholder;
  var inverse = utils.inverse(prompt.styles.primary);
  var blinker = function blinker(str) {
    return inverse(prompt.styles.black(str));
  };
  var output = input;
  var _char = ' ';
  var reverse = blinker(_char);
  if (prompt.blink && prompt.blink.off === true) {
    blinker = function blinker(str) {
      return str;
    };
    reverse = '';
  }
  if (showCursor && pos === 0 && initial === '' && input === '') {
    return blinker(_char);
  }
  if (showCursor && pos === 0 && (input === initial || input === '')) {
    return blinker(initial[0]) + style(initial.slice(1));
  }
  initial = utils.isPrimitive(initial) ? "".concat(initial) : '';
  input = utils.isPrimitive(input) ? "".concat(input) : '';
  var placeholder = initial && initial.startsWith(input) && initial !== input;
  var cursor = placeholder ? blinker(initial[input.length]) : reverse;
  if (pos !== input.length && showCursor === true) {
    output = input.slice(0, pos) + blinker(input[pos]) + input.slice(pos + 1);
    cursor = '';
  }
  if (showCursor === false) {
    cursor = '';
  }
  if (placeholder) {
    var raw = prompt.styles.unstyle(output + cursor);
    return output + cursor + style(initial.slice(raw.length));
  }
  return output + cursor;
};