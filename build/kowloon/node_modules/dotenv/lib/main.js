"use strict";

var fs = require('fs');
var path = require('path');
var os = require('os');
var packageJson = require('../package.json');
var version = packageJson.version;
var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;

// Parser src into an Object
function parse(src) {
  var obj = {};

  // Convert buffer to string
  var lines = src.toString();

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n');
  var match;
  while ((match = LINE.exec(lines)) != null) {
    var key = match[1];

    // Default undefined or null to empty string
    var value = match[2] || '';

    // Remove whitespace
    value = value.trim();

    // Check if double quoted
    var maybeQuote = value[0];

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2');

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n');
      value = value.replace(/\\r/g, '\r');
    }

    // Add to object
    obj[key] = value;
  }
  return obj;
}
function _log(message) {
  console.log("[dotenv@".concat(version, "][DEBUG] ").concat(message));
}
function _resolveHome(envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;
}

// Populates process.env from .env file
function config(options) {
  var dotenvPath = path.resolve(process.cwd(), '.env');
  var encoding = 'utf8';
  var debug = Boolean(options && options.debug);
  var override = Boolean(options && options.override);
  if (options) {
    if (options.path != null) {
      dotenvPath = _resolveHome(options.path);
    }
    if (options.encoding != null) {
      encoding = options.encoding;
    }
  }
  try {
    // Specifying an encoding returns a string instead of a buffer
    var parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {
      encoding: encoding
    }));
    Object.keys(parsed).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
        process.env[key] = parsed[key];
      } else {
        if (override === true) {
          process.env[key] = parsed[key];
        }
        if (debug) {
          if (override === true) {
            _log("\"".concat(key, "\" is already defined in `process.env` and WAS overwritten"));
          } else {
            _log("\"".concat(key, "\" is already defined in `process.env` and was NOT overwritten"));
          }
        }
      }
    });
    return {
      parsed: parsed
    };
  } catch (e) {
    if (debug) {
      _log("Failed to load ".concat(dotenvPath, " ").concat(e.message));
    }
    return {
      error: e
    };
  }
}
var DotenvModule = {
  config: config,
  parse: parse
};
module.exports.config = DotenvModule.config;
module.exports.parse = DotenvModule.parse;
module.exports = DotenvModule;