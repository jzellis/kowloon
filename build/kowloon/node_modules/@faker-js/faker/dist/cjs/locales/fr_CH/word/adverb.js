"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var s = Object.defineProperty;
var i = Object.getOwnPropertyDescriptor;
var u = Object.getOwnPropertyNames;
var m = Object.prototype.hasOwnProperty;
var o = function o(t, e) {
    for (var a in e) s(t, a, {
      get: e[a],
      enumerable: !0
    });
  },
  p = function p(t, e, a, r) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(u(e)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !m.call(t, n) && n !== a && s(t, n, {
            get: function get() {
              return e[n];
            },
            enumerable: !(r = i(e, n)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return t;
  };
var d = function d(t) {
  return p(s({}, "__esModule", {
    value: !0
  }), t);
};
var c = {};
o(c, {
  "default": function _default() {
    return l;
  }
});
module.exports = d(c);
var l = ["admirablement", "ainsi", "aussi", "bien", "comme", "comment", "debout", "doucement", "\xE9galement", "ensemble", "expr\xE8s", "franco", "gratis", "impromptu", "incognito", "lentement", "mal", "mieux", "pis", "plut\xF4t", "presque", "recta", "vite", "volontiers", "\xE0 peine", "\xE0 peu pr\xE8s", "absolument", "\xE0 demi", "assez", "autant", "autrement", "approximativement", "beaucoup", "carr\xE9ment", "combien", "compl\xE8tement", "davantage", "diablement", "divinement", "dr\xF4lement", "encore", "enti\xE8rement", "environ", "extr\xEAmement", "fort", "grandement", "gu\xE8re", "infiniment", "insuffisamment", "joliment", "m\xEAme", "moins", "pas mal", "passablement", "peu", "plus", "prou", "quasi", "quasiment", "quelque", "rudement", "si", "suffisamment", "tant", "tellement", "terriblement", "totalement", "tout", "tout \xE0 fait", "tr\xE8s", "trop", "trop peu", "un peu", "alors", "apr\xE8s", "apr\xE8s-demain", "aujourd'hui", "auparavant", "aussit\xF4t", "autrefois", "avant", "avant-hier", "bient\xF4t", "cependant", "d'abord", "d\xE9j\xE0", "demain", "depuis", "derechef", "d\xE9sormais", "dor\xE9navant", "enfin", "ensuite", "entre-temps", "hier", "jadis", "jamais", "longtemps", "lors", "maintenant", "nagu\xE8re", "parfois", "premi\xE8rement", "puis", "quand ?", "quelquefois", "sit\xF4t", "soudain", "souvent", "subito", "tant\xF4t", "tard", "t\xF4t", "toujours", "ailleurs", "alentour", "arri\xE8re", "au-del\xE0", "au-dessous", "au-dessus", "au-devant", "autour", "\xE7a", "c\xE9ans", "ci", "contre", "de\xE7\xE0", "dedans", "dehors", "derri\xE8re", "dessous", "dessus", "devant", "ici", "l\xE0", "l\xE0-haut", "loin", "o\xF9", "outre", "partout", "pr\xE8s", "proche", "sus", "y", "apparemment", "assur\xE9ment", "bon", "certainement", "certes", "en v\xE9rit\xE9", "oui", "peut-\xEAtre", "pr\xE9cis\xE9ment", "probablement", "sans doute", "soit", "toutefois", "vraiment", "vraisemblablement"];