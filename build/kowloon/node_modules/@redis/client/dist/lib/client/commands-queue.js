"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _RedisCommandsQueue_instances, _a, _RedisCommandsQueue_flushQueue, _RedisCommandsQueue_maxLength, _RedisCommandsQueue_waitingToBeSent, _RedisCommandsQueue_waitingForReply, _RedisCommandsQueue_onShardedChannelMoved, _RedisCommandsQueue_pubSub, _RedisCommandsQueue_chainInExecution, _RedisCommandsQueue_decoder, _RedisCommandsQueue_pushPubSubCommand;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var LinkedList = require("yallist");
var errors_1 = require("../errors");
var decoder_1 = require("./RESP2/decoder");
var encoder_1 = require("./RESP2/encoder");
var pub_sub_1 = require("./pub-sub");
var PONG = Buffer.from('pong');
var RedisCommandsQueue = /*#__PURE__*/function () {
  function RedisCommandsQueue(maxLength, onShardedChannelMoved) {
    var _this = this;
    _classCallCheck(this, RedisCommandsQueue);
    _RedisCommandsQueue_instances.add(this);
    _RedisCommandsQueue_maxLength.set(this, void 0);
    _RedisCommandsQueue_waitingToBeSent.set(this, new LinkedList());
    _RedisCommandsQueue_waitingForReply.set(this, new LinkedList());
    _RedisCommandsQueue_onShardedChannelMoved.set(this, void 0);
    _RedisCommandsQueue_pubSub.set(this, new pub_sub_1.PubSub());
    _RedisCommandsQueue_chainInExecution.set(this, void 0);
    _RedisCommandsQueue_decoder.set(this, new decoder_1["default"]({
      returnStringsAsBuffers: function returnStringsAsBuffers() {
        var _classPrivateFieldGe;
        return !!((_classPrivateFieldGe = __classPrivateFieldGet(_this, _RedisCommandsQueue_waitingForReply, "f").head) !== null && _classPrivateFieldGe !== void 0 && _classPrivateFieldGe.value.returnBuffers) || __classPrivateFieldGet(_this, _RedisCommandsQueue_pubSub, "f").isActive;
      },
      onReply: function onReply(reply) {
        if (__classPrivateFieldGet(_this, _RedisCommandsQueue_pubSub, "f").isActive && Array.isArray(reply)) {
          if (__classPrivateFieldGet(_this, _RedisCommandsQueue_pubSub, "f").handleMessageReply(reply)) return;
          var isShardedUnsubscribe = pub_sub_1.PubSub.isShardedUnsubscribe(reply);
          if (isShardedUnsubscribe && !__classPrivateFieldGet(_this, _RedisCommandsQueue_waitingForReply, "f").length) {
            var channel = reply[1].toString();
            __classPrivateFieldGet(_this, _RedisCommandsQueue_onShardedChannelMoved, "f").call(_this, channel, __classPrivateFieldGet(_this, _RedisCommandsQueue_pubSub, "f").removeShardedListeners(channel));
            return;
          } else if (isShardedUnsubscribe || pub_sub_1.PubSub.isStatusReply(reply)) {
            var head = __classPrivateFieldGet(_this, _RedisCommandsQueue_waitingForReply, "f").head.value;
            if (Number.isNaN(head.channelsCounter) && reply[2] === 0 || --head.channelsCounter === 0) {
              __classPrivateFieldGet(_this, _RedisCommandsQueue_waitingForReply, "f").shift().resolve();
            }
            return;
          }
          if (PONG.equals(reply[0])) {
            var _classPrivateFieldGe2 = __classPrivateFieldGet(_this, _RedisCommandsQueue_waitingForReply, "f").shift(),
              _resolve = _classPrivateFieldGe2.resolve,
              returnBuffers = _classPrivateFieldGe2.returnBuffers,
              buffer = reply[1].length === 0 ? reply[0] : reply[1];
            _resolve(returnBuffers ? buffer : buffer.toString());
            return;
          }
        }
        var _classPrivateFieldGe3 = __classPrivateFieldGet(_this, _RedisCommandsQueue_waitingForReply, "f").shift(),
          resolve = _classPrivateFieldGe3.resolve,
          reject = _classPrivateFieldGe3.reject;
        if (reply instanceof errors_1.ErrorReply) {
          reject(reply);
        } else {
          resolve(reply);
        }
      }
    }));
    __classPrivateFieldSet(this, _RedisCommandsQueue_maxLength, maxLength, "f");
    __classPrivateFieldSet(this, _RedisCommandsQueue_onShardedChannelMoved, onShardedChannelMoved, "f");
  }
  _createClass(RedisCommandsQueue, [{
    key: "isPubSubActive",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").isActive;
    }
  }, {
    key: "addCommand",
    value: function addCommand(args, options) {
      var _options$signal,
        _this2 = this;
      if (__classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, "f") && __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").length + __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").length >= __classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, "f")) {
        return Promise.reject(new Error('The queue is full'));
      } else if (options !== null && options !== void 0 && (_options$signal = options.signal) !== null && _options$signal !== void 0 && _options$signal.aborted) {
        return Promise.reject(new errors_1.AbortError());
      }
      return new Promise(function (resolve, reject) {
        var node = new LinkedList.Node({
          args: args,
          chainId: options === null || options === void 0 ? void 0 : options.chainId,
          returnBuffers: options === null || options === void 0 ? void 0 : options.returnBuffers,
          resolve: resolve,
          reject: reject
        });
        if (options !== null && options !== void 0 && options.signal) {
          var listener = function listener() {
            __classPrivateFieldGet(_this2, _RedisCommandsQueue_waitingToBeSent, "f").removeNode(node);
            node.value.reject(new errors_1.AbortError());
          };
          node.value.abort = {
            signal: options.signal,
            listener: listener
          };
          // AbortSignal type is incorrent
          options.signal.addEventListener('abort', listener, {
            once: true
          });
        }
        if (options !== null && options !== void 0 && options.asap) {
          __classPrivateFieldGet(_this2, _RedisCommandsQueue_waitingToBeSent, "f").unshiftNode(node);
        } else {
          __classPrivateFieldGet(_this2, _RedisCommandsQueue_waitingToBeSent, "f").pushNode(node);
        }
      });
    }
  }, {
    key: "subscribe",
    value: function subscribe(type, channels, listener, returnBuffers) {
      return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").subscribe(type, channels, listener, returnBuffers));
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(type, channels, listener, returnBuffers) {
      return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").unsubscribe(type, channels, listener, returnBuffers));
    }
  }, {
    key: "resubscribe",
    value: function resubscribe() {
      var _this3 = this;
      var commands = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").resubscribe();
      if (!commands.length) return;
      return Promise.all(commands.map(function (command) {
        return __classPrivateFieldGet(_this3, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(_this3, command);
      }));
    }
  }, {
    key: "extendPubSubChannelListeners",
    value: function extendPubSubChannelListeners(type, channel, listeners) {
      return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").extendChannelListeners(type, channel, listeners));
    }
  }, {
    key: "extendPubSubListeners",
    value: function extendPubSubListeners(type, listeners) {
      return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").extendTypeListeners(type, listeners));
    }
  }, {
    key: "getPubSubListeners",
    value: function getPubSubListeners(type) {
      return __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").getTypeListeners(type);
    }
  }, {
    key: "getCommandToSend",
    value: function getCommandToSend() {
      var toSend = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").shift();
      if (!toSend) return;
      var encoded;
      try {
        encoded = (0, encoder_1["default"])(toSend.args);
      } catch (err) {
        toSend.reject(err);
        return;
      }
      __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").push({
        resolve: toSend.resolve,
        reject: toSend.reject,
        channelsCounter: toSend.channelsCounter,
        returnBuffers: toSend.returnBuffers
      });
      __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, toSend.chainId, "f");
      return encoded;
    }
  }, {
    key: "onReplyChunk",
    value: function onReplyChunk(chunk) {
      __classPrivateFieldGet(this, _RedisCommandsQueue_decoder, "f").write(chunk);
    }
  }, {
    key: "flushWaitingForReply",
    value: function flushWaitingForReply(err) {
      __classPrivateFieldGet(this, _RedisCommandsQueue_decoder, "f").reset();
      __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").reset();
      __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f"), err);
      if (!__classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, "f")) return;
      while (((_classPrivateFieldGe4 = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").head) === null || _classPrivateFieldGe4 === void 0 ? void 0 : _classPrivateFieldGe4.value.chainId) === __classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, "f")) {
        var _classPrivateFieldGe4;
        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").shift();
      }
      __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, undefined, "f");
    }
  }, {
    key: "flushAll",
    value: function flushAll(err) {
      __classPrivateFieldGet(this, _RedisCommandsQueue_decoder, "f").reset();
      __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").reset();
      __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f"), err);
      __classPrivateFieldGet(RedisCommandsQueue, _a, "m", _RedisCommandsQueue_flushQueue).call(RedisCommandsQueue, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f"), err);
    }
  }]);
  return RedisCommandsQueue;
}();
exports["default"] = RedisCommandsQueue;
_a = RedisCommandsQueue, _RedisCommandsQueue_maxLength = new WeakMap(), _RedisCommandsQueue_waitingToBeSent = new WeakMap(), _RedisCommandsQueue_waitingForReply = new WeakMap(), _RedisCommandsQueue_onShardedChannelMoved = new WeakMap(), _RedisCommandsQueue_pubSub = new WeakMap(), _RedisCommandsQueue_chainInExecution = new WeakMap(), _RedisCommandsQueue_decoder = new WeakMap(), _RedisCommandsQueue_instances = new WeakSet(), _RedisCommandsQueue_flushQueue = function _RedisCommandsQueue_flushQueue(queue, err) {
  while (queue.length) {
    queue.shift().reject(err);
  }
}, _RedisCommandsQueue_pushPubSubCommand = function _RedisCommandsQueue_pushPubSubCommand(command) {
  var _this4 = this;
  if (command === undefined) return;
  return new Promise(function (_resolve2, _reject) {
    __classPrivateFieldGet(_this4, _RedisCommandsQueue_waitingToBeSent, "f").push({
      args: command.args,
      channelsCounter: command.channelsCounter,
      returnBuffers: true,
      resolve: function resolve() {
        command.resolve();
        _resolve2();
      },
      reject: function reject(err) {
        var _command$reject;
        (_command$reject = command.reject) === null || _command$reject === void 0 ? void 0 : _command$reject.call(command);
        _reject(err);
      }
    });
  });
};