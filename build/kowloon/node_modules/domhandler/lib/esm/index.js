"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  DomHandler: true
};
exports["default"] = exports.DomHandler = void 0;
var _domelementtype = require("domelementtype");
var _node = require("./node.js");
Object.keys(_node).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _node[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _node[key];
    }
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Default options
var defaultOpts = {
  withStartIndices: false,
  withEndIndices: false,
  xmlMode: false
};
var DomHandler = /*#__PURE__*/function () {
  /**
   * @param callback Called once parsing has completed.
   * @param options Settings for the handler.
   * @param elementCB Callback whenever a tag is closed.
   */
  function DomHandler(callback, options, elementCB) {
    _classCallCheck(this, DomHandler);
    /** The elements of the DOM */
    this.dom = [];
    /** The root element for the DOM */
    this.root = new _node.Document(this.dom);
    /** Indicated whether parsing has been completed. */
    this.done = false;
    /** Stack of open tags. */
    this.tagStack = [this.root];
    /** A data node that is still being written to. */
    this.lastNode = null;
    /** Reference to the parser instance. Used for location information. */
    this.parser = null;
    // Make it possible to skip arguments, for backwards-compatibility
    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts;
    }
    if (_typeof(callback) === "object") {
      options = callback;
      callback = undefined;
    }
    this.callback = callback !== null && callback !== void 0 ? callback : null;
    this.options = options !== null && options !== void 0 ? options : defaultOpts;
    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
  }
  _createClass(DomHandler, [{
    key: "onparserinit",
    value: function onparserinit(parser) {
      this.parser = parser;
    }
    // Resets the handler back to starting state
  }, {
    key: "onreset",
    value: function onreset() {
      this.dom = [];
      this.root = new _node.Document(this.dom);
      this.done = false;
      this.tagStack = [this.root];
      this.lastNode = null;
      this.parser = null;
    }
    // Signals the handler that parsing is done
  }, {
    key: "onend",
    value: function onend() {
      if (this.done) return;
      this.done = true;
      this.parser = null;
      this.handleCallback(null);
    }
  }, {
    key: "onerror",
    value: function onerror(error) {
      this.handleCallback(error);
    }
  }, {
    key: "onclosetag",
    value: function onclosetag() {
      this.lastNode = null;
      var elem = this.tagStack.pop();
      if (this.options.withEndIndices) {
        elem.endIndex = this.parser.endIndex;
      }
      if (this.elementCB) this.elementCB(elem);
    }
  }, {
    key: "onopentag",
    value: function onopentag(name, attribs) {
      var type = this.options.xmlMode ? _domelementtype.ElementType.Tag : undefined;
      var element = new _node.Element(name, attribs, undefined, type);
      this.addNode(element);
      this.tagStack.push(element);
    }
  }, {
    key: "ontext",
    value: function ontext(data) {
      var lastNode = this.lastNode;
      if (lastNode && lastNode.type === _domelementtype.ElementType.Text) {
        lastNode.data += data;
        if (this.options.withEndIndices) {
          lastNode.endIndex = this.parser.endIndex;
        }
      } else {
        var node = new _node.Text(data);
        this.addNode(node);
        this.lastNode = node;
      }
    }
  }, {
    key: "oncomment",
    value: function oncomment(data) {
      if (this.lastNode && this.lastNode.type === _domelementtype.ElementType.Comment) {
        this.lastNode.data += data;
        return;
      }
      var node = new _node.Comment(data);
      this.addNode(node);
      this.lastNode = node;
    }
  }, {
    key: "oncommentend",
    value: function oncommentend() {
      this.lastNode = null;
    }
  }, {
    key: "oncdatastart",
    value: function oncdatastart() {
      var text = new _node.Text("");
      var node = new _node.CDATA([text]);
      this.addNode(node);
      text.parent = node;
      this.lastNode = text;
    }
  }, {
    key: "oncdataend",
    value: function oncdataend() {
      this.lastNode = null;
    }
  }, {
    key: "onprocessinginstruction",
    value: function onprocessinginstruction(name, data) {
      var node = new _node.ProcessingInstruction(name, data);
      this.addNode(node);
    }
  }, {
    key: "handleCallback",
    value: function handleCallback(error) {
      if (typeof this.callback === "function") {
        this.callback(error, this.dom);
      } else if (error) {
        throw error;
      }
    }
  }, {
    key: "addNode",
    value: function addNode(node) {
      var parent = this.tagStack[this.tagStack.length - 1];
      var previousSibling = parent.children[parent.children.length - 1];
      if (this.options.withStartIndices) {
        node.startIndex = this.parser.startIndex;
      }
      if (this.options.withEndIndices) {
        node.endIndex = this.parser.endIndex;
      }
      parent.children.push(node);
      if (previousSibling) {
        node.prev = previousSibling;
        previousSibling.next = node;
      }
      node.parent = parent;
      this.lastNode = null;
    }
  }]);
  return DomHandler;
}();
exports.DomHandler = DomHandler;
var _default = DomHandler;
exports["default"] = _default;