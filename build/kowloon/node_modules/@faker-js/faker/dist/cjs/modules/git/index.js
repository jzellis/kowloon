"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var h = Object.defineProperty;
var d = Object.getOwnPropertyDescriptor;
var y = Object.getOwnPropertyNames;
var b = Object.prototype.hasOwnProperty;
var D = function D(a, e) {
    for (var t in e) h(a, t, {
      get: e[t],
      enumerable: !0
    });
  },
  F = function F(a, e, t, r) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(y(e)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !b.call(a, n) && n !== t && h(a, n, {
            get: function get() {
              return e[n];
            },
            enumerable: !(r = d(e, n)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var I = function I(a) {
  return F(h({}, "__esModule", {
    value: !0
  }), a);
};
var T = {};
D(T, {
  GitModule: function GitModule() {
    return c;
  }
});
module.exports = I(T);
var l = require("../../errors/faker-error"),
  u = require("../../internal/deprecated");
var N = Intl != null && Intl.DateTimeFormat ? new Intl.DateTimeFormat("en", {
    weekday: "short",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    hourCycle: "h24",
    minute: "2-digit",
    second: "2-digit",
    year: "numeric",
    timeZone: "UTC"
  }) : null,
  $ = Intl != null && Intl.NumberFormat ? new Intl.NumberFormat("en", {
    minimumIntegerDigits: 4,
    maximumFractionDigits: 0,
    useGrouping: !1,
    signDisplay: "always"
  }) : null;
var c = /*#__PURE__*/function () {
  function c(e) {
    _classCallCheck(this, c);
    this.faker = e;
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(c.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var t = _step2.value;
        t === "constructor" || typeof this[t] != "function" || (this[t] = this[t].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(c, [{
    key: "branch",
    value: function branch() {
      var e = this.faker.hacker.noun().replace(" ", "-"),
        t = this.faker.hacker.verb().replace(" ", "-");
      return "".concat(e, "-").concat(t);
    }
  }, {
    key: "commitEntry",
    value: function commitEntry() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _e$merge = e.merge,
        t = _e$merge === void 0 ? this.faker.datatype["boolean"]({
          probability: .2
        }) : _e$merge,
        _e$eol = e.eol,
        r = _e$eol === void 0 ? "CRLF" : _e$eol,
        n = e.refDate,
        i = ["commit ".concat(this.faker.git.commitSha())];
      t && i.push("Merge: ".concat(this.commitSha({
        length: 7
      }), " ").concat(this.commitSha({
        length: 7
      })));
      var s = this.faker.person.firstName(),
        o = this.faker.person.lastName(),
        f = this.faker.person.fullName({
          firstName: s,
          lastName: o
        }),
        g = this.faker.internet.userName({
          firstName: s,
          lastName: o
        });
      var m = this.faker.helpers.arrayElement([f, g]);
      var p = this.faker.internet.email({
        firstName: s,
        lastName: o
      });
      m = m.replace(/^[\.,:;"\\']|[\<\>\n]|[\.,:;"\\']$/g, ""), i.push("Author: ".concat(m, " <").concat(p, ">"), "Date: ".concat(this.commitDate({
        refDate: n
      })), "", "\xA0\xA0\xA0\xA0".concat(this.commitMessage()), "");
      var k = r === "CRLF" ? "\r\n" : "\n";
      return i.join(k);
    }
  }, {
    key: "commitMessage",
    value: function commitMessage() {
      return "".concat(this.faker.hacker.verb(), " ").concat(this.faker.hacker.adjective(), " ").concat(this.faker.hacker.noun());
    }
  }, {
    key: "commitDate",
    value: function commitDate() {
      var _ref;
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _e$refDate = e.refDate,
        t = _e$refDate === void 0 ? this.faker.defaultRefDate() : _e$refDate;
      if (!Intl || !Intl.DateTimeFormat || !Intl.NumberFormat) throw new l.FakerError("This method requires an environment which supports Intl.NumberFormat and Intl.DateTimeFormat");
      var r = N.format(this.faker.date.recent({
        days: 1,
        refDate: t
      })).replace(/,/g, "").split(" ");
      return (_ref = [r[4], r[3]], r[3] = _ref[0], r[4] = _ref[1]), r.push($.format(this.faker.number["int"]({
        min: -11,
        max: 12
      }) * 100)), r.join(" ");
    }
  }, {
    key: "commitSha",
    value: function commitSha() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _e$length = e.length,
        t = _e$length === void 0 ? 40 : _e$length;
      return this.faker.string.hexadecimal({
        length: t,
        casing: "lower",
        prefix: ""
      });
    }
  }, {
    key: "shortSha",
    value: function shortSha() {
      return (0, u.deprecated)({
        deprecated: "faker.git.shortSha()",
        proposed: "faker.git.commitSha({ length: 7 })",
        since: "8.0",
        until: "9.0"
      }), this.commitSha({
        length: 7
      });
    }
  }]);
  return c;
}();
0 && (module.exports = {
  GitModule: GitModule
});