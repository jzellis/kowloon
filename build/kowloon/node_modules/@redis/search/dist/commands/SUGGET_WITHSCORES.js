"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformReply = exports.transformArguments = exports.IS_READ_ONLY = void 0;
var SUGGET_1 = require("./SUGGET");
var SUGGET_2 = require("./SUGGET");
Object.defineProperty(exports, "IS_READ_ONLY", {
  enumerable: true,
  get: function get() {
    return SUGGET_2.IS_READ_ONLY;
  }
});
function transformArguments(key, prefix, options) {
  return [].concat(_toConsumableArray((0, SUGGET_1.transformArguments)(key, prefix, options)), ['WITHSCORES']);
}
exports.transformArguments = transformArguments;
function transformReply(rawReply) {
  if (rawReply === null) return null;
  var transformedReply = [];
  for (var i = 0; i < rawReply.length; i += 2) {
    transformedReply.push({
      suggestion: rawReply[i],
      score: Number(rawReply[i + 1])
    });
  }
  return transformedReply;
}
exports.transformReply = transformReply;