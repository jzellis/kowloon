"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pushQueryArguments = void 0;
var CONFIG_GET = require("./CONFIG_GET");
var CONFIG_SET = require("./CONFIG_SET");
;
var DELETE = require("./DELETE");
var EXPLAIN = require("./EXPLAIN");
var LIST = require("./LIST");
var PROFILE = require("./PROFILE");
var QUERY = require("./QUERY");
var RO_QUERY = require("./RO_QUERY");
var SLOWLOG = require("./SLOWLOG");
exports["default"] = {
  CONFIG_GET: CONFIG_GET,
  configGet: CONFIG_GET,
  CONFIG_SET: CONFIG_SET,
  configSet: CONFIG_SET,
  DELETE: DELETE,
  "delete": DELETE,
  EXPLAIN: EXPLAIN,
  explain: EXPLAIN,
  LIST: LIST,
  list: LIST,
  PROFILE: PROFILE,
  profile: PROFILE,
  QUERY: QUERY,
  query: QUERY,
  RO_QUERY: RO_QUERY,
  roQuery: RO_QUERY,
  SLOWLOG: SLOWLOG,
  slowLog: SLOWLOG
};
function pushQueryArguments(args, graph, query, options, compact) {
  args.push(graph);
  if (typeof options === 'number') {
    args.push(query);
    pushTimeout(args, options);
  } else {
    args.push(options !== null && options !== void 0 && options.params ? "CYPHER ".concat(queryParamsToString(options.params), " ").concat(query) : query);
    if ((options === null || options === void 0 ? void 0 : options.TIMEOUT) !== undefined) {
      pushTimeout(args, options.TIMEOUT);
    }
  }
  if (compact) {
    args.push('--compact');
  }
  return args;
}
exports.pushQueryArguments = pushQueryArguments;
function pushTimeout(args, timeout) {
  args.push('TIMEOUT', timeout.toString());
}
function queryParamsToString(params) {
  var parts = [];
  for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      key = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    parts.push("".concat(key, "=").concat(queryParamToString(value)));
  }
  return parts.join(' ');
}
function queryParamToString(param) {
  if (param === null) {
    return 'null';
  }
  switch (_typeof(param)) {
    case 'string':
      return "\"".concat(param.replace(/["\\]/g, '\\$&'), "\"");
    case 'number':
    case 'boolean':
      return param.toString();
  }
  if (Array.isArray(param)) {
    return "[".concat(param.map(queryParamToString).join(','), "]");
  } else if (_typeof(param) === 'object') {
    var body = [];
    for (var _i2 = 0, _Object$entries2 = Object.entries(param); _i2 < _Object$entries2.length; _i2++) {
      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
        key = _Object$entries2$_i[0],
        value = _Object$entries2$_i[1];
      body.push("".concat(key, ":").concat(queryParamToString(value)));
    }
    return "{".concat(body.join(','), "}");
  } else {
    throw new TypeError("Unexpected param type ".concat(_typeof(param), " ").concat(param));
  }
}