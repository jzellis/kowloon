"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorReply = exports.ReconnectStrategyError = exports.RootNodesUnavailableError = exports.SocketClosedUnexpectedlyError = exports.DisconnectsClientError = exports.ClientOfflineError = exports.ClientClosedError = exports.ConnectionTimeoutError = exports.WatchError = exports.AbortError = void 0;
var AbortError = /*#__PURE__*/function (_Error) {
  _inherits(AbortError, _Error);
  var _super = _createSuper(AbortError);
  function AbortError() {
    _classCallCheck(this, AbortError);
    return _super.call(this, 'The command was aborted');
  }
  return _createClass(AbortError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.AbortError = AbortError;
var WatchError = /*#__PURE__*/function (_Error2) {
  _inherits(WatchError, _Error2);
  var _super2 = _createSuper(WatchError);
  function WatchError() {
    _classCallCheck(this, WatchError);
    return _super2.call(this, 'One (or more) of the watched keys has been changed');
  }
  return _createClass(WatchError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.WatchError = WatchError;
var ConnectionTimeoutError = /*#__PURE__*/function (_Error3) {
  _inherits(ConnectionTimeoutError, _Error3);
  var _super3 = _createSuper(ConnectionTimeoutError);
  function ConnectionTimeoutError() {
    _classCallCheck(this, ConnectionTimeoutError);
    return _super3.call(this, 'Connection timeout');
  }
  return _createClass(ConnectionTimeoutError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.ConnectionTimeoutError = ConnectionTimeoutError;
var ClientClosedError = /*#__PURE__*/function (_Error4) {
  _inherits(ClientClosedError, _Error4);
  var _super4 = _createSuper(ClientClosedError);
  function ClientClosedError() {
    _classCallCheck(this, ClientClosedError);
    return _super4.call(this, 'The client is closed');
  }
  return _createClass(ClientClosedError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.ClientClosedError = ClientClosedError;
var ClientOfflineError = /*#__PURE__*/function (_Error5) {
  _inherits(ClientOfflineError, _Error5);
  var _super5 = _createSuper(ClientOfflineError);
  function ClientOfflineError() {
    _classCallCheck(this, ClientOfflineError);
    return _super5.call(this, 'The client is offline');
  }
  return _createClass(ClientOfflineError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.ClientOfflineError = ClientOfflineError;
var DisconnectsClientError = /*#__PURE__*/function (_Error6) {
  _inherits(DisconnectsClientError, _Error6);
  var _super6 = _createSuper(DisconnectsClientError);
  function DisconnectsClientError() {
    _classCallCheck(this, DisconnectsClientError);
    return _super6.call(this, 'Disconnects client');
  }
  return _createClass(DisconnectsClientError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.DisconnectsClientError = DisconnectsClientError;
var SocketClosedUnexpectedlyError = /*#__PURE__*/function (_Error7) {
  _inherits(SocketClosedUnexpectedlyError, _Error7);
  var _super7 = _createSuper(SocketClosedUnexpectedlyError);
  function SocketClosedUnexpectedlyError() {
    _classCallCheck(this, SocketClosedUnexpectedlyError);
    return _super7.call(this, 'Socket closed unexpectedly');
  }
  return _createClass(SocketClosedUnexpectedlyError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.SocketClosedUnexpectedlyError = SocketClosedUnexpectedlyError;
var RootNodesUnavailableError = /*#__PURE__*/function (_Error8) {
  _inherits(RootNodesUnavailableError, _Error8);
  var _super8 = _createSuper(RootNodesUnavailableError);
  function RootNodesUnavailableError() {
    _classCallCheck(this, RootNodesUnavailableError);
    return _super8.call(this, 'All the root nodes are unavailable');
  }
  return _createClass(RootNodesUnavailableError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.RootNodesUnavailableError = RootNodesUnavailableError;
var ReconnectStrategyError = /*#__PURE__*/function (_Error9) {
  _inherits(ReconnectStrategyError, _Error9);
  var _super9 = _createSuper(ReconnectStrategyError);
  function ReconnectStrategyError(originalError, socketError) {
    var _this;
    _classCallCheck(this, ReconnectStrategyError);
    _this = _super9.call(this, originalError.message);
    Object.defineProperty(_assertThisInitialized(_this), "originalError", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_assertThisInitialized(_this), "socketError", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this.originalError = originalError;
    _this.socketError = socketError;
    return _this;
  }
  return _createClass(ReconnectStrategyError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.ReconnectStrategyError = ReconnectStrategyError;
var ErrorReply = /*#__PURE__*/function (_Error10) {
  _inherits(ErrorReply, _Error10);
  var _super10 = _createSuper(ErrorReply);
  function ErrorReply(message) {
    var _this2;
    _classCallCheck(this, ErrorReply);
    _this2 = _super10.call(this, message);
    _this2.stack = undefined;
    return _this2;
  }
  return _createClass(ErrorReply);
}( /*#__PURE__*/_wrapNativeSuper(Error));
exports.ErrorReply = ErrorReply;