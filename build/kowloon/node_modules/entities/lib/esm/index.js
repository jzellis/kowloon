"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntityLevel = exports.EncodingMode = exports.DecodingMode = void 0;
exports.decode = decode;
Object.defineProperty(exports, "decodeHTML", {
  enumerable: true,
  get: function get() {
    return _decode.decodeHTML;
  }
});
Object.defineProperty(exports, "decodeHTML4", {
  enumerable: true,
  get: function get() {
    return _decode.decodeHTML;
  }
});
Object.defineProperty(exports, "decodeHTML4Strict", {
  enumerable: true,
  get: function get() {
    return _decode.decodeHTMLStrict;
  }
});
Object.defineProperty(exports, "decodeHTML5", {
  enumerable: true,
  get: function get() {
    return _decode.decodeHTML;
  }
});
Object.defineProperty(exports, "decodeHTML5Strict", {
  enumerable: true,
  get: function get() {
    return _decode.decodeHTMLStrict;
  }
});
Object.defineProperty(exports, "decodeHTMLStrict", {
  enumerable: true,
  get: function get() {
    return _decode.decodeHTMLStrict;
  }
});
exports.decodeStrict = decodeStrict;
Object.defineProperty(exports, "decodeXML", {
  enumerable: true,
  get: function get() {
    return _decode.decodeXML;
  }
});
Object.defineProperty(exports, "decodeXMLStrict", {
  enumerable: true,
  get: function get() {
    return _decode.decodeXML;
  }
});
exports.encode = encode;
Object.defineProperty(exports, "encodeHTML", {
  enumerable: true,
  get: function get() {
    return _encode.encodeHTML;
  }
});
Object.defineProperty(exports, "encodeHTML4", {
  enumerable: true,
  get: function get() {
    return _encode.encodeHTML;
  }
});
Object.defineProperty(exports, "encodeHTML5", {
  enumerable: true,
  get: function get() {
    return _encode.encodeHTML;
  }
});
Object.defineProperty(exports, "encodeNonAsciiHTML", {
  enumerable: true,
  get: function get() {
    return _encode.encodeNonAsciiHTML;
  }
});
Object.defineProperty(exports, "encodeXML", {
  enumerable: true,
  get: function get() {
    return _escape.encodeXML;
  }
});
Object.defineProperty(exports, "escape", {
  enumerable: true,
  get: function get() {
    return _escape.escape;
  }
});
Object.defineProperty(exports, "escapeAttribute", {
  enumerable: true,
  get: function get() {
    return _escape.escapeAttribute;
  }
});
Object.defineProperty(exports, "escapeText", {
  enumerable: true,
  get: function get() {
    return _escape.escapeText;
  }
});
Object.defineProperty(exports, "escapeUTF8", {
  enumerable: true,
  get: function get() {
    return _escape.escapeUTF8;
  }
});
var _decode = require("./decode.js");
var _encode = require("./encode.js");
var _escape = require("./escape.js");
/** The level of entities to support. */
var EntityLevel;
exports.EntityLevel = EntityLevel;
(function (EntityLevel) {
  /** Support only XML entities. */
  EntityLevel[EntityLevel["XML"] = 0] = "XML";
  /** Support HTML entities, which are a superset of XML entities. */
  EntityLevel[EntityLevel["HTML"] = 1] = "HTML";
})(EntityLevel || (exports.EntityLevel = EntityLevel = {}));
/** Determines whether some entities are allowed to be written without a trailing `;`. */
var DecodingMode;
exports.DecodingMode = DecodingMode;
(function (DecodingMode) {
  /** Support legacy HTML entities. */
  DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
  /** Do not support legacy HTML entities. */
  DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
})(DecodingMode || (exports.DecodingMode = DecodingMode = {}));
var EncodingMode;
exports.EncodingMode = EncodingMode;
(function (EncodingMode) {
  /**
   * The output is UTF-8 encoded. Only characters that need escaping within
   * XML will be escaped.
   */
  EncodingMode[EncodingMode["UTF8"] = 0] = "UTF8";
  /**
   * The output consists only of ASCII characters. Characters that need
   * escaping within HTML, and characters that aren't ASCII characters will
   * be escaped.
   */
  EncodingMode[EncodingMode["ASCII"] = 1] = "ASCII";
  /**
   * Encode all characters that have an equivalent entity, as well as all
   * characters that are not ASCII characters.
   */
  EncodingMode[EncodingMode["Extensive"] = 2] = "Extensive";
  /**
   * Encode all characters that have to be escaped in HTML attributes,
   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
   */
  EncodingMode[EncodingMode["Attribute"] = 3] = "Attribute";
  /**
   * Encode all characters that have to be escaped in HTML text,
   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
   */
  EncodingMode[EncodingMode["Text"] = 4] = "Text";
})(EncodingMode || (exports.EncodingMode = EncodingMode = {}));
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 */
function decode(data) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;
  var opts = typeof options === "number" ? {
    level: options
  } : options;
  if (opts.level === EntityLevel.HTML) {
    if (opts.mode === DecodingMode.Strict) {
      return (0, _decode.decodeHTMLStrict)(data);
    }
    return (0, _decode.decodeHTML)(data);
  }
  return (0, _decode.decodeXML)(data);
}
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 * @deprecated Use `decode` with the `mode` set to `Strict`.
 */
function decodeStrict(data) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;
  var opts = typeof options === "number" ? {
    level: options
  } : options;
  if (opts.level === EntityLevel.HTML) {
    if (opts.mode === DecodingMode.Legacy) {
      return (0, _decode.decodeHTML)(data);
    }
    return (0, _decode.decodeHTMLStrict)(data);
  }
  return (0, _decode.decodeXML)(data);
}
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param options Encoding options.
 */
function encode(data) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;
  var opts = typeof options === "number" ? {
    level: options
  } : options;
  // Mode `UTF8` just escapes XML entities
  if (opts.mode === EncodingMode.UTF8) return (0, _escape.escapeUTF8)(data);
  if (opts.mode === EncodingMode.Attribute) return (0, _escape.escapeAttribute)(data);
  if (opts.mode === EncodingMode.Text) return (0, _escape.escapeText)(data);
  if (opts.level === EntityLevel.HTML) {
    if (opts.mode === EncodingMode.ASCII) {
      return (0, _encode.encodeNonAsciiHTML)(data);
    }
    return (0, _encode.encodeHTML)(data);
  }
  // ASCII and Extensive are equivalent
  return (0, _escape.encodeXML)(data);
}