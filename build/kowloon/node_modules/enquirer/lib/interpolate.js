'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var colors = require('ansi-colors');
var clean = function clean() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return typeof str === 'string' ? str.replace(/^['"]|['"]$/g, '') : '';
};

/**
 * This file contains the interpolation and rendering logic for
 * the Snippet prompt.
 */
var Item = /*#__PURE__*/_createClass(function Item(token) {
  _classCallCheck(this, Item);
  this.name = token.key;
  this.field = token.field || {};
  this.value = clean(token.initial || this.field.initial || '');
  this.message = token.message || this.name;
  this.cursor = 0;
  this.input = '';
  this.lines = [];
});
var tokenize = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var options,
      defaults,
      fn,
      unique,
      fields,
      input,
      tabstops,
      items,
      keys,
      line,
      i,
      next,
      peek,
      push,
      _loop,
      _ret,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
          defaults = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
          fn = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : function (token) {
            return token;
          };
          unique = new Set();
          fields = options.fields || [];
          input = options.template;
          tabstops = [];
          items = [];
          keys = [];
          line = 1;
          if (!(typeof input === 'function')) {
            _context2.next = 14;
            break;
          }
          _context2.next = 13;
          return input();
        case 13:
          input = _context2.sent;
        case 14:
          i = -1;
          next = function next() {
            return input[++i];
          };
          peek = function peek() {
            return input[i + 1];
          };
          push = function push(token) {
            token.line = line;
            tabstops.push(token);
          };
          push({
            type: 'bos',
            value: ''
          });
          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
            var value, n, token, ch, item, last;
            return _regeneratorRuntime().wrap(function _loop$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  value = next();
                  if (!/^[^\S\n ]$/.test(value)) {
                    _context.next = 4;
                    break;
                  }
                  push({
                    type: 'text',
                    value: value
                  });
                  return _context.abrupt("return", "continue");
                case 4:
                  if (!(value === '\n')) {
                    _context.next = 8;
                    break;
                  }
                  push({
                    type: 'newline',
                    value: value
                  });
                  line++;
                  return _context.abrupt("return", "continue");
                case 8:
                  if (!(value === '\\')) {
                    _context.next = 12;
                    break;
                  }
                  value += next();
                  push({
                    type: 'text',
                    value: value
                  });
                  return _context.abrupt("return", "continue");
                case 12:
                  if (!((value === '$' || value === '#' || value === '{') && peek() === '{')) {
                    _context.next = 39;
                    break;
                  }
                  n = next();
                  value += n;
                  token = {
                    type: 'template',
                    open: value,
                    inner: '',
                    close: '',
                    value: value
                  };
                case 16:
                  if (!(ch = next())) {
                    _context.next = 27;
                    break;
                  }
                  if (!(ch === '}')) {
                    _context.next = 22;
                    break;
                  }
                  if (peek() === '}') ch += next();
                  token.value += ch;
                  token.close = ch;
                  return _context.abrupt("break", 27);
                case 22:
                  if (ch === ':') {
                    token.initial = '';
                    token.key = token.inner;
                  } else if (token.initial !== void 0) {
                    token.initial += ch;
                  }
                  token.value += ch;
                  token.inner += ch;
                  _context.next = 16;
                  break;
                case 27:
                  token.template = token.open + (token.initial || token.inner) + token.close;
                  token.key = token.key || token.inner;
                  if (defaults.hasOwnProperty(token.key)) {
                    token.initial = defaults[token.key];
                  }
                  token = fn(token);
                  push(token);
                  keys.push(token.key);
                  unique.add(token.key);
                  item = items.find(function (item) {
                    return item.name === token.key;
                  });
                  token.field = fields.find(function (ch) {
                    return ch.name === token.key;
                  });
                  if (!item) {
                    item = new Item(token);
                    items.push(item);
                  }
                  item.lines.push(token.line - 1);
                  return _context.abrupt("return", "continue");
                case 39:
                  last = tabstops[tabstops.length - 1];
                  if (last.type === 'text' && last.line === line) {
                    last.value += value;
                  } else {
                    push({
                      type: 'text',
                      value: value
                    });
                  }
                case 41:
                case "end":
                  return _context.stop();
              }
            }, _loop);
          });
        case 20:
          if (!(i < input.length - 1)) {
            _context2.next = 27;
            break;
          }
          return _context2.delegateYield(_loop(), "t0", 22);
        case 22:
          _ret = _context2.t0;
          if (!(_ret === "continue")) {
            _context2.next = 25;
            break;
          }
          return _context2.abrupt("continue", 20);
        case 25:
          _context2.next = 20;
          break;
        case 27:
          push({
            type: 'eos',
            value: ''
          });
          return _context2.abrupt("return", {
            input: input,
            tabstops: tabstops,
            unique: unique,
            keys: keys,
            items: items
          });
        case 29:
        case "end":
          return _context2.stop();
      }
    }, _callee);
  }));
  return function tokenize() {
    return _ref.apply(this, arguments);
  };
}();
module.exports = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(prompt) {
    var options, required, defaults, _yield$tokenize, tabstops, items, keys, result, format, isValid, isVal;
    return _regeneratorRuntime().wrap(function _callee4$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          options = prompt.options;
          required = new Set(options.required === true ? [] : options.required || []);
          defaults = _objectSpread(_objectSpread({}, options.values), options.initial);
          _context6.next = 5;
          return tokenize(options, defaults);
        case 5:
          _yield$tokenize = _context6.sent;
          tabstops = _yield$tokenize.tabstops;
          items = _yield$tokenize.items;
          keys = _yield$tokenize.keys;
          result = createFn('result', prompt, options);
          format = createFn('format', prompt, options);
          isValid = createFn('validate', prompt, options, true);
          isVal = prompt.isValue.bind(prompt);
          return _context6.abrupt("return", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var state,
              submitted,
              index,
              validate,
              _iterator,
              _step,
              _loop2,
              _ret2,
              lines,
              len,
              done,
              _iterator2,
              _step2,
              item,
              _args5 = arguments;
            return _regeneratorRuntime().wrap(function _callee3$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  state = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
                  submitted = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : false;
                  index = 0;
                  state.required = required;
                  state.items = items;
                  state.keys = keys;
                  state.output = '';
                  validate = /*#__PURE__*/function () {
                    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value, state, item, index) {
                      var error;
                      return _regeneratorRuntime().wrap(function _callee2$(_context3) {
                        while (1) switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.next = 2;
                            return isValid(value, state, item, index);
                          case 2:
                            error = _context3.sent;
                            if (!(error === false)) {
                              _context3.next = 5;
                              break;
                            }
                            return _context3.abrupt("return", 'Invalid field ' + item.name);
                          case 5:
                            return _context3.abrupt("return", error);
                          case 6:
                          case "end":
                            return _context3.stop();
                        }
                      }, _callee2);
                    }));
                    return function validate(_x2, _x3, _x4, _x5) {
                      return _ref4.apply(this, arguments);
                    };
                  }();
                  _iterator = _createForOfIteratorHelper(tabstops);
                  _context5.prev = 9;
                  _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {
                    var token, value, key, item, val, field, message, error, res, before;
                    return _regeneratorRuntime().wrap(function _loop2$(_context4) {
                      while (1) switch (_context4.prev = _context4.next) {
                        case 0:
                          token = _step.value;
                          value = token.value;
                          key = token.key;
                          if (!(token.type !== 'template')) {
                            _context4.next = 6;
                            break;
                          }
                          if (value) state.output += value;
                          return _context4.abrupt("return", "continue");
                        case 6:
                          if (!(token.type === 'template')) {
                            _context4.next = 35;
                            break;
                          }
                          item = items.find(function (ch) {
                            return ch.name === key;
                          });
                          if (options.required === true) {
                            state.required.add(item.name);
                          }
                          val = [item.input, state.values[item.value], item.value, value].find(isVal);
                          field = item.field || {};
                          message = field.message || token.inner;
                          if (!submitted) {
                            _context4.next = 25;
                            break;
                          }
                          _context4.next = 15;
                          return validate(state.values[key], state, item, index);
                        case 15:
                          error = _context4.sent;
                          if (!(error && typeof error === 'string' || error === false)) {
                            _context4.next = 19;
                            break;
                          }
                          state.invalid.set(key, error);
                          return _context4.abrupt("return", "continue");
                        case 19:
                          state.invalid["delete"](key);
                          _context4.next = 22;
                          return result(state.values[key], state, item, index);
                        case 22:
                          res = _context4.sent;
                          state.output += colors.unstyle(res);
                          return _context4.abrupt("return", "continue");
                        case 25:
                          item.placeholder = false;
                          before = value;
                          _context4.next = 29;
                          return format(value, state, item, index);
                        case 29:
                          value = _context4.sent;
                          if (val !== value) {
                            state.values[key] = val;
                            value = prompt.styles.typing(val);
                            state.missing["delete"](message);
                          } else {
                            state.values[key] = void 0;
                            val = "<".concat(message, ">");
                            value = prompt.styles.primary(val);
                            item.placeholder = true;
                            if (state.required.has(key)) {
                              state.missing.add(message);
                            }
                          }
                          if (state.missing.has(message) && state.validating) {
                            value = prompt.styles.warning(val);
                          }
                          if (state.invalid.has(key) && state.validating) {
                            value = prompt.styles.danger(val);
                          }
                          if (index === state.index) {
                            if (before !== value) {
                              value = prompt.styles.underline(value);
                            } else {
                              value = prompt.styles.heading(colors.unstyle(value));
                            }
                          }
                          index++;
                        case 35:
                          if (value) {
                            state.output += value;
                          }
                        case 36:
                        case "end":
                          return _context4.stop();
                      }
                    }, _loop2);
                  });
                  _iterator.s();
                case 12:
                  if ((_step = _iterator.n()).done) {
                    _context5.next = 19;
                    break;
                  }
                  return _context5.delegateYield(_loop2(), "t0", 14);
                case 14:
                  _ret2 = _context5.t0;
                  if (!(_ret2 === "continue")) {
                    _context5.next = 17;
                    break;
                  }
                  return _context5.abrupt("continue", 17);
                case 17:
                  _context5.next = 12;
                  break;
                case 19:
                  _context5.next = 24;
                  break;
                case 21:
                  _context5.prev = 21;
                  _context5.t1 = _context5["catch"](9);
                  _iterator.e(_context5.t1);
                case 24:
                  _context5.prev = 24;
                  _iterator.f();
                  return _context5.finish(24);
                case 27:
                  lines = state.output.split('\n').map(function (l) {
                    return ' ' + l;
                  });
                  len = items.length;
                  done = 0;
                  _iterator2 = _createForOfIteratorHelper(items);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      item = _step2.value;
                      if (state.invalid.has(item.name)) {
                        item.lines.forEach(function (i) {
                          if (lines[i][0] !== ' ') return;
                          lines[i] = state.styles.danger(state.symbols.bullet) + lines[i].slice(1);
                        });
                      }
                      if (prompt.isValue(state.values[item.name])) {
                        done++;
                      }
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  state.completed = (done / len * 100).toFixed(0);
                  state.output = lines.join('\n');
                  return _context5.abrupt("return", state.output);
                case 35:
                case "end":
                  return _context5.stop();
              }
            }, _callee3, null, [[9, 21, 24, 27]]);
          })));
        case 14:
        case "end":
          return _context6.stop();
      }
    }, _callee4);
  }));
  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
function createFn(prop, prompt, options, fallback) {
  return function (value, state, item, index) {
    if (typeof item.field[prop] === 'function') {
      return item.field[prop].call(prompt, value, state, item, index);
    }
    return [fallback, value].find(function (v) {
      return prompt.isValue(v);
    });
  };
}