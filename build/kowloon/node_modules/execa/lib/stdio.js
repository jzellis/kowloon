'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var aliases = ['stdin', 'stdout', 'stderr'];
var hasAlias = function hasAlias(opts) {
  return aliases.some(function (alias) {
    return opts[alias] !== undefined;
  });
};
var normalizeStdio = function normalizeStdio(opts) {
  if (!opts) {
    return;
  }
  var stdio = opts.stdio;
  if (stdio === undefined) {
    return aliases.map(function (alias) {
      return opts[alias];
    });
  }
  if (hasAlias(opts)) {
    throw new Error("It's not possible to provide `stdio` in combination with one of ".concat(aliases.map(function (alias) {
      return "`".concat(alias, "`");
    }).join(', ')));
  }
  if (typeof stdio === 'string') {
    return stdio;
  }
  if (!Array.isArray(stdio)) {
    throw new TypeError("Expected `stdio` to be of type `string` or `Array`, got `".concat(_typeof(stdio), "`"));
  }
  var length = Math.max(stdio.length, aliases.length);
  return Array.from({
    length: length
  }, function (value, index) {
    return stdio[index];
  });
};
module.exports = normalizeStdio;

// `ipc` is pushed unless it is already present
module.exports.node = function (opts) {
  var stdio = normalizeStdio(opts);
  if (stdio === 'ipc') {
    return 'ipc';
  }
  if (stdio === undefined || typeof stdio === 'string') {
    return [stdio, stdio, stdio, 'ipc'];
  }
  if (stdio.includes('ipc')) {
    return stdio;
  }
  return [].concat(_toConsumableArray(stdio), ['ipc']);
};