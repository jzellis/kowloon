"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformArguments = void 0;
function transformArguments(mode, options) {
  var args = ['CLIENT', 'TRACKING', mode ? 'ON' : 'OFF'];
  if (mode) {
    if (options !== null && options !== void 0 && options.REDIRECT) {
      args.push('REDIRECT', options.REDIRECT.toString());
    }
    if (isBroadcast(options)) {
      args.push('BCAST');
      if (options !== null && options !== void 0 && options.PREFIX) {
        if (Array.isArray(options.PREFIX)) {
          var _iterator = _createForOfIteratorHelper(options.PREFIX),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var prefix = _step.value;
              args.push('PREFIX', prefix);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          args.push('PREFIX', options.PREFIX);
        }
      }
    } else if (isOptIn(options)) {
      args.push('OPTIN');
    } else if (isOptOut(options)) {
      args.push('OPTOUT');
    }
    if (options !== null && options !== void 0 && options.NOLOOP) {
      args.push('NOLOOP');
    }
  }
  return args;
}
exports.transformArguments = transformArguments;
function isBroadcast(options) {
  return (options === null || options === void 0 ? void 0 : options.BCAST) === true;
}
function isOptIn(options) {
  return (options === null || options === void 0 ? void 0 : options.OPTIN) === true;
}
function isOptOut(options) {
  return (options === null || options === void 0 ? void 0 : options.OPTOUT) === true;
}