"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var s = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var l = Object.getOwnPropertyNames;
var n = Object.prototype.hasOwnProperty;
var o = function o(d, e) {
    for (var r in e) s(d, r, {
      get: e[r],
      enumerable: !0
    });
  },
  t = function t(d, e, r, i) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(l(e)),
        _step;
      try {
        var _loop = function _loop() {
          var a = _step.value;
          !n.call(d, a) && a !== r && s(d, a, {
            get: function get() {
              return e[a];
            },
            enumerable: !(i = u(e, a)) || i.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return d;
  };
var C = function C(d) {
  return t(s({}, "__esModule", {
    value: !0
  }), d);
};
var h = {};
o(h, {
  "default": function _default() {
    return B;
  }
});
module.exports = C(h);
var B = ["de la Banque", "de la Barbe", "de Barchon", "Baron Horta", "aux Barques", "des Barricades", "Barth\xE9l\xE9my", "du Baudet", "Fr\xE9d\xE9ric Basse", "du B\xE9guinage", "de Berlaimont", "au Beurre", "Henri Beyaert", "de Bischoffsheim", "Blaes", "de la Blanchisserie", "des Blind\xE9s", "de la Bobine", "Bodeghem", "Bodenbroeck", "des Boeufs", "des Bogards", "du Bois \xE0 Br\xFBler", "au Bois de Construction", "du Bois Sauvage", "des Bo\xEEteux", "de Bon Secours", "du Borgendael", "Borgval", "Bortier", "des Bouchers", "rue des Bouchers", "du Boulet", "de la Bouqueti\xE8re", "de la Bourse", "de la Braie", "des Brasseurs", "Brederode", "Jacques Brel", "Breughel", "des Brigittines", "rue des Brigittines", "aux Briques", "des Brodeurs", "de la Buanderie", "Charles Buls", "des Cadeaux", "Camusel", "du Canal", "du Canon", "Cantersteen", "des Capucins", "Cardinal Mercier", "de la Caserne", "des Cendres", "du Centre", "Chair et Pain", "des Chaisiers", "de la Chancellerie", "des Chandeliers", "du Chantier", "du Chapelet", "des Chapeliers", "de la Chapelle", "du Char", "des Charpentiers", "des Chartreux", "du Chasseur", "de la Chaufferette", "\xE0 la Chaux", "du Ch\xEAne", "du Cheval", "du Chevreuil", "du Chien Marin", "aux Choux", "Christine", "de la Cigogne", "du Cirque", "de la Cl\xE9", "de la Coll\xE9giale", "de la Colline", "du Colombier", "des Colonies", "des Com\xE9diens", "des Commer\xE7ants", "du Commerce", "du Congr\xE8s", "Coppens", "Coudenberg", "Jo Cox", "de la Croix de Fer", "Cuerens", "des Cultes", "de Cureghem", "de la Cuve", "du Cypr\xE8s", "des Echelles", "de l' Eclipse", "de l' Economie", "de l' Ecuyer", "d' Egmont", "de l' Empereur", "de l' Enseignement", "de l' Epargne", "de l' Ep\xE9e", "des Eperonniers", "de l' Escalier", "des Escrimeurs", "d' Espagne", "de l' Etuve", "de l' Europe", "de l' Eventail", "de l' Ev\xEAque", "Evers", "des Fabriques", "des Faisans", "de la Faucille", "du Faucon", "de la Ferraille", "de la Fianc\xE9e", "de la Fid\xE9lit\xE9", "du Finist\xE8re", "de Flandre", "des Fleuristes", "aux Fleurs", "au Foin", "Fontainas", "de la Fontaine", "de la For\xEAt d'Houthulst", "Foss\xE9-aux-Loups", "des Foulons", "de la Fourche", "des Fripiers", "Froebel", "blanche", "noire", "verte", "pont de bois", "grand poire", "du march\xE9", "du lundi", "des m\xE9dias", "Robert Schuman", "du papier pli\xE9", "de la croix de fer", "cronque", "de l'Abbaye", "Adolphe Mille", "d'Assas", "du Bac", "de Paris", "La Bo\xE9tie", "du roi", "de la B\xFBcherie", "de Caumartin", "Charlemagne", "du Chat-qui-P\xEAche", "de la Chauss\xE9e-d'Antin", "du Dahomey", "Dauphine", "Delesseux", "du Faubourg Saint-Honor\xE9", "du Faubourg-Saint-Denis", "de la Ferronnerie", "des Francs-Bourgeois", "des Grands Augustins", "de la Harpe", "du Havre", "de la Huchette", "Joubert", "Laffitte", "Lepic", "des Lombards", "Marcadet", "Moli\xE8re", "Monsieur-le-Prince", "de Montmorency", "Montorgueil", "Mouffetard", "de Nesle", "Oberkampf", "de l'Od\xE9on", "d'Orsel", "de la Paix", "des Panoramas", "Pastourelle", "Pierre Charron", "de la Pompe", "de Presbourg", "de Provence", "de Richelieu", "de Rivoli", "des Rosiers", "Royale", "d'Abbeville", "Saint-Honor\xE9", "Saint-Bernard", "Saint-Denis", "Saint-Dominique", "Saint-Jacques", "Saint-S\xE9verin", "des Saussaies", "de Seine", "de Solf\xE9rino", "Du Sommerard", "de Tilsitt", "Vaneau", "de Vaugirard", "de la Victoire", "Zadkine"];