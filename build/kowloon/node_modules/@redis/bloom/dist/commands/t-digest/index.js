"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformDoublesReply = exports.transformDoubleReply = exports.pushCompressionArgument = void 0;
var ADD = require("./ADD");
var BYRANK = require("./BYRANK");
var BYREVRANK = require("./BYREVRANK");
var CDF = require("./CDF");
var CREATE = require("./CREATE");
var INFO = require("./INFO");
var MAX = require("./MAX");
var MERGE = require("./MERGE");
var MIN = require("./MIN");
var QUANTILE = require("./QUANTILE");
var RANK = require("./RANK");
var RESET = require("./RESET");
var REVRANK = require("./REVRANK");
var TRIMMED_MEAN = require("./TRIMMED_MEAN");
exports["default"] = {
  ADD: ADD,
  add: ADD,
  BYRANK: BYRANK,
  byRank: BYRANK,
  BYREVRANK: BYREVRANK,
  byRevRank: BYREVRANK,
  CDF: CDF,
  cdf: CDF,
  CREATE: CREATE,
  create: CREATE,
  INFO: INFO,
  info: INFO,
  MAX: MAX,
  max: MAX,
  MERGE: MERGE,
  merge: MERGE,
  MIN: MIN,
  min: MIN,
  QUANTILE: QUANTILE,
  quantile: QUANTILE,
  RANK: RANK,
  rank: RANK,
  RESET: RESET,
  reset: RESET,
  REVRANK: REVRANK,
  revRank: REVRANK,
  TRIMMED_MEAN: TRIMMED_MEAN,
  trimmedMean: TRIMMED_MEAN
};
function pushCompressionArgument(args, options) {
  if (options !== null && options !== void 0 && options.COMPRESSION) {
    args.push('COMPRESSION', options.COMPRESSION.toString());
  }
  return args;
}
exports.pushCompressionArgument = pushCompressionArgument;
function transformDoubleReply(reply) {
  switch (reply) {
    case 'inf':
      return Infinity;
    case '-inf':
      return -Infinity;
    case 'nan':
      return NaN;
    default:
      return parseFloat(reply);
  }
}
exports.transformDoubleReply = transformDoubleReply;
function transformDoublesReply(reply) {
  return reply.map(transformDoubleReply);
}
exports.transformDoublesReply = transformDoublesReply;