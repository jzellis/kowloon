"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var e = Object.defineProperty;
var o = Object.getOwnPropertyDescriptor;
var t = Object.getOwnPropertyNames;
var d = Object.prototype.hasOwnProperty;
var A = function A(i, a) {
    for (var l in a) e(i, l, {
      get: a[l],
      enumerable: !0
    });
  },
  s = function s(i, a, l, r) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(t(a)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !d.call(i, n) && n !== l && e(i, n, {
            get: function get() {
              return a[n];
            },
            enumerable: !(r = o(a, n)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var c = function c(i) {
  return s(e({}, "__esModule", {
    value: !0
  }), i);
};
var v = {};
A(v, {
  "default": function _default() {
    return u;
  }
});
module.exports = c(v);
var u = ["Aculina", "Ada", "Adela", "Adelaida", "Adelina", "Adriana", "Afanasi", "Agafia", "Agnesa", "Ala", "Albina", "Alea", "Alena", "Alesea", "Alevtina", "Alexandra", "Alexandrina", "Alina", "Aliona", "Alisa", "Alla", "Ana", "Ana-Maria", "Anastasia", "Andriana", "Angela", "Angelica", "Anghelina", "Anjela", "Anjelica", "Anna", "Antonina", "Argentina", "Ariadna", "Arina", "Aurelia", "Aurica", "Axenia", "Calina", "Carina", "Carolina", "Catalina", "Cezara", "Chira", "Claudia", "Clavdia", "Constanta", "Constantia", "Corina", "Cornelia", "Crina", "Cristiana", "Cristina", "Dana", "Daniela", "Daria", "Diana", "Didina", "Dina", "Doina", "Doinita", "Domnica", "Dora", "Doriana", "Dorina", "Dumitrita", "Ecaterina", "Efimia", "Efrosinia", "Elena", "Eleonora", "Elina", "Elisaveta", "Elizaveta", "Ella", "Elmira", "Elvira", "Ema", "Emilia", "Erica", "Eudochia", "Eugenia", "Eva", "Evdochia", "Evelina", "Evghenia", "Fedora", "Felicia", "Feodora", "Feodosia", "Fevronia", "Gabriela", "Galina", "Georgeta", "Gheorghina", "Greta", "Iana", "Ianina", "Ianna", "Iaroslava", "Ileana", "Ilia", "Ilinca", "Ilona", "Ina", "Inesa", "Inessa", "Inga", "Inna", "Ioana", "Ionela", "Ira", "Iraida", "Irena", "Irina", "Iryna", "Iulia", "Iuliana", "Ivana", "Ivanna", "Jana", "Janeta", "Janna", "Lada", "Larisa", "Laura", "Laurentia", "Leonora", "Lia", "Lidia", "Lilia", "Liliana", "Lina", "Liuba", "Liubov", "Liubovi", "Liudmila", "Liusea", "Livia", "Lora", "Lucia", "Lucica", "Lucretia", "Ludmila", "Luiza", "Luminita", "Magdalena", "Maia", "Malvina", "Marcela", "Margareta", "Margarita", "Maria", "Mariana", "Marianna", "Maricica", "Marina", "Marta", "Melania", "Melnic", "Mihaela", "Minodora", "Mirela", "Miroslava", "Nadejda", "Natalia", "Natasa", "Nelea", "Neli", "Nellea", "Nelli", "Neonila", "Nicolai", "Nicoleta", "Niculina", "Nina", "Nineli", "Nona", "Nonna", "Olena", "Olesea", "Olga", "Oliga", "Olimpiada", "Otilia", "Oxana", "Pantelei", "Parascovia", "Paulina", "Pavlina", "Pelaghia", "Polina", "Prascovia", "Rada", "Raisa", "Reghina", "Renata", "Rima", "Rimma", "Rita", "Rodica", "Romina", "Rosina", "Rotaru", "Ruslana", "Ruxanda", "Sabina", "Sanda", "Serafima", "Silvia", "Snejana", "Sofia", "Sorina", "Stela", "Steliana", "Stella", "Steluta", "Stepanida", "Svetlana", "Svitlana", "Taisia", "Tamara", "Tatiana", "Teodora", "Tetiana", "Uliana", "Valentina", "Valeria", "Valeriu", "Varvara", "Vasilina", "Vasilisa", "Veaceslav", "Vera", "Verginia", "Veronica", "Vica", "Victoria", "Violeta", "Violetta", "Violina", "Viorelia", "Viorica", "Virginia", "Vitalia", "Vitalina", "Vlada", "Vladilena", "Vladislava", "Vladlena", "Xenia", "Zina", "Zinaida", "Zinovia", "Zoia", "Zorina"];