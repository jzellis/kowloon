"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.IS_READ_ONLY = exports.FIRST_KEY_INDEX = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;
var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
var _1 = require(".");
var AggregateSteps;
(function (AggregateSteps) {
  AggregateSteps["GROUPBY"] = "GROUPBY";
  AggregateSteps["SORTBY"] = "SORTBY";
  AggregateSteps["APPLY"] = "APPLY";
  AggregateSteps["LIMIT"] = "LIMIT";
  AggregateSteps["FILTER"] = "FILTER";
})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));
var AggregateGroupByReducers;
(function (AggregateGroupByReducers) {
  AggregateGroupByReducers["COUNT"] = "COUNT";
  AggregateGroupByReducers["COUNT_DISTINCT"] = "COUNT_DISTINCT";
  AggregateGroupByReducers["COUNT_DISTINCTISH"] = "COUNT_DISTINCTISH";
  AggregateGroupByReducers["SUM"] = "SUM";
  AggregateGroupByReducers["MIN"] = "MIN";
  AggregateGroupByReducers["MAX"] = "MAX";
  AggregateGroupByReducers["AVG"] = "AVG";
  AggregateGroupByReducers["STDDEV"] = "STDDEV";
  AggregateGroupByReducers["QUANTILE"] = "QUANTILE";
  AggregateGroupByReducers["TOLIST"] = "TOLIST";
  AggregateGroupByReducers["TO_LIST"] = "TOLIST";
  AggregateGroupByReducers["FIRST_VALUE"] = "FIRST_VALUE";
  AggregateGroupByReducers["RANDOM_SAMPLE"] = "RANDOM_SAMPLE";
})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));
exports.FIRST_KEY_INDEX = 1;
exports.IS_READ_ONLY = true;
function transformArguments(index, query, options) {
  return pushAggregatehOptions(['FT.AGGREGATE', index, query], options);
}
exports.transformArguments = transformArguments;
function pushAggregatehOptions(args, options) {
  if (options !== null && options !== void 0 && options.VERBATIM) {
    args.push('VERBATIM');
  }
  if (options !== null && options !== void 0 && options.LOAD) {
    args.push('LOAD');
    (0, _1.pushArgumentsWithLength)(args, function () {
      if (Array.isArray(options.LOAD)) {
        var _iterator = _createForOfIteratorHelper(options.LOAD),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var load = _step.value;
            pushLoadField(args, load);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        pushLoadField(args, options.LOAD);
      }
    });
  }
  if (options !== null && options !== void 0 && options.STEPS) {
    var _iterator2 = _createForOfIteratorHelper(options.STEPS),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var step = _step2.value;
        switch (step.type) {
          case AggregateSteps.GROUPBY:
            args.push('GROUPBY');
            if (!step.properties) {
              args.push('0');
            } else {
              (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);
            }
            if (Array.isArray(step.REDUCE)) {
              var _iterator3 = _createForOfIteratorHelper(step.REDUCE),
                _step3;
              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var reducer = _step3.value;
                  pushGroupByReducer(args, reducer);
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            } else {
              pushGroupByReducer(args, step.REDUCE);
            }
            break;
          case AggregateSteps.SORTBY:
            (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);
            if (step.MAX) {
              args.push('MAX', step.MAX.toString());
            }
            break;
          case AggregateSteps.APPLY:
            args.push('APPLY', step.expression, 'AS', step.AS);
            break;
          case AggregateSteps.LIMIT:
            args.push('LIMIT', step.from.toString(), step.size.toString());
            break;
          case AggregateSteps.FILTER:
            args.push('FILTER', step.expression);
            break;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  (0, _1.pushParamsArgs)(args, options === null || options === void 0 ? void 0 : options.PARAMS);
  if (options !== null && options !== void 0 && options.DIALECT) {
    args.push('DIALECT', options.DIALECT.toString());
  }
  if ((options === null || options === void 0 ? void 0 : options.TIMEOUT) !== undefined) {
    args.push('TIMEOUT', options.TIMEOUT.toString());
  }
  return args;
}
exports.pushAggregatehOptions = pushAggregatehOptions;
function pushLoadField(args, toLoad) {
  if (typeof toLoad === 'string') {
    args.push(toLoad);
  } else {
    args.push(toLoad.identifier);
    if (toLoad.AS) {
      args.push('AS', toLoad.AS);
    }
  }
}
function pushGroupByReducer(args, reducer) {
  args.push('REDUCE', reducer.type);
  switch (reducer.type) {
    case AggregateGroupByReducers.COUNT:
      args.push('0');
      break;
    case AggregateGroupByReducers.COUNT_DISTINCT:
    case AggregateGroupByReducers.COUNT_DISTINCTISH:
    case AggregateGroupByReducers.SUM:
    case AggregateGroupByReducers.MIN:
    case AggregateGroupByReducers.MAX:
    case AggregateGroupByReducers.AVG:
    case AggregateGroupByReducers.STDDEV:
    case AggregateGroupByReducers.TOLIST:
      args.push('1', reducer.property);
      break;
    case AggregateGroupByReducers.QUANTILE:
      args.push('2', reducer.property, reducer.quantile.toString());
      break;
    case AggregateGroupByReducers.FIRST_VALUE:
      {
        (0, _1.pushArgumentsWithLength)(args, function () {
          args.push(reducer.property);
          if (reducer.BY) {
            args.push('BY');
            if (typeof reducer.BY === 'string') {
              args.push(reducer.BY);
            } else {
              args.push(reducer.BY.property);
              if (reducer.BY.direction) {
                args.push(reducer.BY.direction);
              }
            }
          }
        });
        break;
      }
    case AggregateGroupByReducers.RANDOM_SAMPLE:
      args.push('2', reducer.property, reducer.sampleSize.toString());
      break;
  }
  if (reducer.AS) {
    args.push('AS', reducer.AS);
  }
}
function transformReply(rawReply) {
  var results = [];
  for (var i = 1; i < rawReply.length; i++) {
    results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));
  }
  return {
    total: rawReply[0],
    results: results
  };
}
exports.transformReply = transformReply;