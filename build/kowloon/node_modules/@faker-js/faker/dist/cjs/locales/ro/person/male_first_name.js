"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var l = Object.getOwnPropertyNames;
var t = Object.prototype.hasOwnProperty;
var c = function c(a, i) {
    for (var e in i) r(a, e, {
      get: i[e],
      enumerable: !0
    });
  },
  m = function m(a, i, e, o) {
    if (i && _typeof(i) == "object" || typeof i == "function") {
      var _iterator = _createForOfIteratorHelper(l(i)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !t.call(a, n) && n !== e && r(a, n, {
            get: function get() {
              return i[n];
            },
            enumerable: !(o = u(i, n)) || o.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var d = function d(a) {
  return m(r({}, "__esModule", {
    value: !0
  }), a);
};
var A = {};
c(A, {
  "default": function _default() {
    return s;
  }
});
module.exports = d(A);
var s = ["Achim", "Adam", "Adelin", "Adonis", "Adrian", "Adi", "Agnos", "Albert", "Alex", "Alexandru", "Alexe", "Aleodor", "Alin", "Alistar", "Amedeu", "Amza", "Anatolie", "Andrei", "Angel", "Anghel", "Antim", "Anton", "Antonie", "Antoniu", "Arian", "Aristide", "Arsenie", "Augustin", "Aurel", "Aurelian", "Auric\u0103", "Avram", "Axinte", "Barbu", "Bartolomeu", "Basarab", "B\u0103nel", "Bebe", "Beniamin", "Benone", "Bernard", "Bogdan", "Br\u0103du\u021B", "Bucur", "Caius", "Camil", "Cantemir", "Carol", "Casian", "Cazimir", "C\u0103lin", "C\u0103t\u0103lin", "Cedrin", "Cezar", "Ciprian", "Claudiu", "Codin", "Codrin", "Codru\u021B", "Cornel", "Corneliu", "Corvin", "Constantin", "Cosmin", "Costache", "Costel", "Costin", "Crin", "Cristea", "Cristian", "Cristobal", "Cristofor", "Dacian", "Damian", "Dan", "Daniel", "Darius", "David", "Decebal", "Denis", "Dinu", "Dominic", "Dorel", "Dorian", "Dorin", "Dorinel", "Doru", "Drago\u0219", "Ducu", "Dumitru", "Edgar", "Edmond", "Eduard", "Eftimie", "Emil", "Emilian", "Emanoil", "Emanuel", "Emanuil", "Eremia", "Eric", "Ernest", "Eugen", "Eusebiu", "Eusta\u021Biu", "Fabian", "Felix", "Filip", "Fiodor", "Flaviu", "Florea", "Florentin", "Florian", "Florin", "Francisc", "Frederic", "Gabi", "Gabriel", "Gelu", "George", "Georgel", "Georgian", "Ghenadie", "Gheorghe", "Gheorghi\u021B\u0103", "Ghi\u021B\u0103", "Gic\u0103", "Gicu", "Giorgian", "Gra\u021Bian", "Gregorian", "Grigore", "Haralamb", "Haralambie", "Hora\u021Biu", "Horea", "Horia", "Iacob", "Iancu", "Ianis", "Ieremia", "Ilarie", "Ilarion", "Ilie", "Inocen\u021Biu", "Ioan", "Ion", "Ionel", "Ionic\u0103", "Ionu\u021B", "Iosif", "Irinel", "Iulian", "Iuliu", "Iurie", "Iustin", "Iustinian", "Ivan", "Jan", "Jean", "Jenel", "Ladislau", "Lasc\u0103r", "Lauren\u021Biu", "Laurian", "Laz\u0103r", "Leonard", "Leontin", "Lic\u0103", "Liviu", "Lorin", "Luca", "Lucen\u021Biu", "Lucian", "Lucre\u021Biu", "Ludovic", "Manole", "Marcel", "Marcu", "Marian", "Marin", "Marius", "Martin", "Matei", "Maxim", "Maximilian", "M\u0103d\u0103lin", "Mihai", "Mihail", "Mihnea", "Mircea", "Miron", "Mitic\u0103", "Mitru\u021B", "Mugur", "Mugurel", "Nae", "Narcis", "Nechifor", "Nelu", "Nichifor", "Nicoar\u0103", "Nicodim", "Nicolae", "Nicolaie", "Nicu", "Nicu\u021B\u0103", "Niculi\u021B\u0103", "Nicu\u0219or", "Norbert", "Norman", "Octav", "Octavian", "Octaviu", "Olimpian", "Olimpiu", "Oliviu", "Ovidiu", "Pamfil", "Panait", "Panagachie", "Paul", "Pavel", "P\u0103tru", "Petre", "Petric\u0103", "Petri\u0219or", "Petru", "Petru\u021B", "Pompiliu", "Radu", "Rafael", "Rare\u0219", "Raul", "R\u0103ducu", "R\u0103zvan", "Relu", "Remus", "Robert", "Romeo", "Romulus", "Sabin", "Sandu", "Sava", "Sebastian", "Sergiu", "Sever", "Severin", "Silvian", "Silviu", "Simi", "Simion", "Sinic\u0103", "Sorin", "Stan", "Stancu", "Stelian", "\u0218erban", "\u0218tefan", "Teodor", "Teofil", "Teohari", "Theodor", "Tiberiu", "Timotei", "Titus", "Todor", "Toma", "Traian", "Tudor", "Valentin", "Valeriu", "Valter", "Vasile", "Vasilic\u0103", "Veniamin", "Vicen\u021Biu", "Victor", "Vincen\u021Biu", "Viorel", "Visarion", "Vlad", "Vladimir", "Vlaicu", "Voicu", "Zamfir", "Zeno"];