"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "aliases", {
  enumerable: true,
  get: function get() {
    return _cssSelect.aliases;
  }
});
exports.filter = filter;
Object.defineProperty(exports, "filters", {
  enumerable: true,
  get: function get() {
    return _cssSelect.filters;
  }
});
exports.is = is;
Object.defineProperty(exports, "pseudos", {
  enumerable: true,
  get: function get() {
    return _cssSelect.pseudos;
  }
});
exports.select = select;
exports.some = some;
var _cssWhat = require("css-what");
var _cssSelect = require("css-select");
var DomUtils = _interopRequireWildcard(require("domutils"));
var boolbase = _interopRequireWildcard(require("boolbase"));
var _helpers = require("./helpers.js");
var _positionals = require("./positionals.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; } // Re-export pseudo extension points
var UNIVERSAL_SELECTOR = {
  type: _cssWhat.SelectorType.Universal,
  namespace: null
};
var SCOPE_PSEUDO = {
  type: _cssWhat.SelectorType.Pseudo,
  name: "scope",
  data: null
};
function is(element, selector) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return some([element], selector, options);
}
function some(elements, selector) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (typeof selector === "function") return elements.some(selector);
  var _groupSelectors = (0, _helpers.groupSelectors)((0, _cssWhat.parse)(selector)),
    _groupSelectors2 = _slicedToArray(_groupSelectors, 2),
    plain = _groupSelectors2[0],
    filtered = _groupSelectors2[1];
  return plain.length > 0 && elements.some((0, _cssSelect._compileToken)(plain, options)) || filtered.some(function (sel) {
    return filterBySelector(sel, elements, options).length > 0;
  });
}
function filterByPosition(filter, elems, data, options) {
  var num = typeof data === "string" ? parseInt(data, 10) : NaN;
  switch (filter) {
    case "first":
    case "lt":
      // Already done in `getLimit`
      return elems;
    case "last":
      return elems.length > 0 ? [elems[elems.length - 1]] : elems;
    case "nth":
    case "eq":
      return isFinite(num) && Math.abs(num) < elems.length ? [num < 0 ? elems[elems.length + num] : elems[num]] : [];
    case "gt":
      return isFinite(num) ? elems.slice(num + 1) : [];
    case "even":
      return elems.filter(function (_, i) {
        return i % 2 === 0;
      });
    case "odd":
      return elems.filter(function (_, i) {
        return i % 2 === 1;
      });
    case "not":
      {
        var filtered = new Set(filterParsed(data, elems, options));
        return elems.filter(function (e) {
          return !filtered.has(e);
        });
      }
  }
}
function filter(selector, elements) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return filterParsed((0, _cssWhat.parse)(selector), elements, options);
}
/**
 * Filter a set of elements by a selector.
 *
 * Will return elements in the original order.
 *
 * @param selector Selector to filter by.
 * @param elements Elements to filter.
 * @param options Options for selector.
 */
function filterParsed(selector, elements, options) {
  if (elements.length === 0) return [];
  var _groupSelectors3 = (0, _helpers.groupSelectors)(selector),
    _groupSelectors4 = _slicedToArray(_groupSelectors3, 2),
    plainSelectors = _groupSelectors4[0],
    filteredSelectors = _groupSelectors4[1];
  var found;
  if (plainSelectors.length) {
    var filtered = filterElements(elements, plainSelectors, options);
    // If there are no filters, just return
    if (filteredSelectors.length === 0) {
      return filtered;
    }
    // Otherwise, we have to do some filtering
    if (filtered.length) {
      found = new Set(filtered);
    }
  }
  for (var i = 0; i < filteredSelectors.length && (found === null || found === void 0 ? void 0 : found.size) !== elements.length; i++) {
    var filteredSelector = filteredSelectors[i];
    var missing = found ? elements.filter(function (e) {
      return DomUtils.isTag(e) && !found.has(e);
    }) : elements;
    if (missing.length === 0) break;
    var _filtered = filterBySelector(filteredSelector, elements, options);
    if (_filtered.length) {
      if (!found) {
        /*
         * If we haven't found anything before the last selector,
         * just return what we found now.
         */
        if (i === filteredSelectors.length - 1) {
          return _filtered;
        }
        found = new Set(_filtered);
      } else {
        _filtered.forEach(function (el) {
          return found.add(el);
        });
      }
    }
  }
  return typeof found !== "undefined" ? found.size === elements.length ? elements :
  // Filter elements to preserve order
  elements.filter(function (el) {
    return found.has(el);
  }) : [];
}
function filterBySelector(selector, elements, options) {
  var _a;
  if (selector.some(_cssWhat.isTraversal)) {
    /*
     * Get root node, run selector with the scope
     * set to all of our nodes.
     */
    var root = (_a = options.root) !== null && _a !== void 0 ? _a : (0, _helpers.getDocumentRoot)(elements[0]);
    var opts = _objectSpread(_objectSpread({}, options), {}, {
      context: elements,
      relativeSelector: false
    });
    selector.push(SCOPE_PSEUDO);
    return findFilterElements(root, selector, opts, true, elements.length);
  }
  // Performance optimization: If we don't have to traverse, just filter set.
  return findFilterElements(elements, selector, options, false, elements.length);
}
function select(selector, root) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;
  if (typeof selector === "function") {
    return find(root, selector);
  }
  var _groupSelectors5 = (0, _helpers.groupSelectors)((0, _cssWhat.parse)(selector)),
    _groupSelectors6 = _slicedToArray(_groupSelectors5, 2),
    plain = _groupSelectors6[0],
    filtered = _groupSelectors6[1];
  var results = filtered.map(function (sel) {
    return findFilterElements(root, sel, options, true, limit);
  });
  // Plain selectors can be queried in a single go
  if (plain.length) {
    results.push(findElements(root, plain, options, limit));
  }
  if (results.length === 0) {
    return [];
  }
  // If there was only a single selector, just return the result
  if (results.length === 1) {
    return results[0];
  }
  // Sort results, filtering for duplicates
  return DomUtils.uniqueSort(results.reduce(function (a, b) {
    return [].concat(_toConsumableArray(a), _toConsumableArray(b));
  }));
}
/**
 *
 * @param root Element(s) to search from.
 * @param selector Selector to look for.
 * @param options Options for querying.
 * @param queryForSelector Query multiple levels deep for the initial selector, even if it doesn't contain a traversal.
 */
function findFilterElements(root, selector, options, queryForSelector, totalLimit) {
  var filterIndex = selector.findIndex(_positionals.isFilter);
  var sub = selector.slice(0, filterIndex);
  var filter = selector[filterIndex];
  // If we are at the end of the selector, we can limit the number of elements to retrieve.
  var partLimit = selector.length - 1 === filterIndex ? totalLimit : Infinity;
  /*
   * Set the number of elements to retrieve.
   * Eg. for :first, we only have to get a single element.
   */
  var limit = (0, _positionals.getLimit)(filter.name, filter.data, partLimit);
  if (limit === 0) return [];
  /*
   * Skip `findElements` call if our selector starts with a positional
   * pseudo.
   */
  var elemsNoLimit = sub.length === 0 && !Array.isArray(root) ? DomUtils.getChildren(root).filter(DomUtils.isTag) : sub.length === 0 ? (Array.isArray(root) ? root : [root]).filter(DomUtils.isTag) : queryForSelector || sub.some(_cssWhat.isTraversal) ? findElements(root, [sub], options, limit) : filterElements(root, [sub], options);
  var elems = elemsNoLimit.slice(0, limit);
  var result = filterByPosition(filter.name, elems, filter.data, options);
  if (result.length === 0 || selector.length === filterIndex + 1) {
    return result;
  }
  var remainingSelector = selector.slice(filterIndex + 1);
  var remainingHasTraversal = remainingSelector.some(_cssWhat.isTraversal);
  if (remainingHasTraversal) {
    if ((0, _cssWhat.isTraversal)(remainingSelector[0])) {
      var type = remainingSelector[0].type;
      if (type === _cssWhat.SelectorType.Sibling || type === _cssWhat.SelectorType.Adjacent) {
        // If we have a sibling traversal, we need to also look at the siblings.
        result = (0, _cssSelect.prepareContext)(result, DomUtils, true);
      }
      // Avoid a traversal-first selector error.
      remainingSelector.unshift(UNIVERSAL_SELECTOR);
    }
    options = _objectSpread(_objectSpread({}, options), {}, {
      // Avoid absolutizing the selector
      relativeSelector: false,
      /*
       * Add a custom root func, to make sure traversals don't match elements
       * that aren't a part of the considered tree.
       */
      rootFunc: function rootFunc(el) {
        return result.includes(el);
      }
    });
  } else if (options.rootFunc && options.rootFunc !== boolbase.trueFunc) {
    options = _objectSpread(_objectSpread({}, options), {}, {
      rootFunc: boolbase.trueFunc
    });
  }
  /*
   * If we have another filter, recursively call `findFilterElements`,
   * with the `recursive` flag disabled. We only have to look for more
   * elements when we see a traversal.
   *
   * Otherwise,
   */
  return remainingSelector.some(_positionals.isFilter) ? findFilterElements(result, remainingSelector, options, false, totalLimit) : remainingHasTraversal ?
  // Query existing elements to resolve traversal.
  findElements(result, [remainingSelector], options, totalLimit) :
  // If we don't have any more traversals, simply filter elements.
  filterElements(result, [remainingSelector], options);
}
function findElements(root, sel, options, limit) {
  var query = (0, _cssSelect._compileToken)(sel, options, root);
  return find(root, query, limit);
}
function find(root, query) {
  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  var elems = (0, _cssSelect.prepareContext)(root, DomUtils, query.shouldTestNextSiblings);
  return DomUtils.find(function (node) {
    return DomUtils.isTag(node) && query(node);
  }, elems, true, limit);
}
function filterElements(elements, sel, options) {
  var els = (Array.isArray(elements) ? elements : [elements]).filter(DomUtils.isTag);
  if (els.length === 0) return els;
  var query = (0, _cssSelect._compileToken)(sel, options);
  return query === boolbase.trueFunc ? els : els.filter(query);
}