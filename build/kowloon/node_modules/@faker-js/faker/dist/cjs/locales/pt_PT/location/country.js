"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var u = Object.getOwnPropertyNames;
var l = Object.prototype.hasOwnProperty;
var t = function t(i, a) {
    for (var n in a) r(i, n, {
      get: a[n],
      enumerable: !0
    });
  },
  d = function d(i, a, n, e) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(u(a)),
        _step;
      try {
        var _loop = function _loop() {
          var o = _step.value;
          !l.call(i, o) && o !== n && r(i, o, {
            get: function get() {
              return a[o];
            },
            enumerable: !(e = s(a, o)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var c = function c(i) {
  return d(r({}, "__esModule", {
    value: !0
  }), i);
};
var g = {};
t(g, {
  "default": function _default() {
    return m;
  }
});
module.exports = c(g);
var m = ["\xC1frica do Sul", "\xC1ustria", "\xCDndia", "Afeganist\xE3o", "Alb\xE2nia", "Alemanha", "Andorra", "Angola", "Anguila", "Ant\xE1rctida", "Ant\xEDgua e Barbuda", "Antilhas Neerlandesas", "Ar\xE1bia Saudita", "Arg\xE9lia", "Argentina", "Arm\xE9nia", "Aruba", "Austr\xE1lia", "Azerbaij\xE3o", "B\xE9lgica", "B\xF3snia e Herzegovina", "Baamas", "Bangladeche", "Bar\xE9m", "Barbados", "Belize", "Benim", "Bermudas", "Bielorr\xFAssia", "Birm\xE2nia", "Bol\xEDvia", "Botsuana", "Brasil", "Brunei", "Bulg\xE1ria", "Bur\xFAndi", "Burquina Faso", "But\xE3o", "Cabo Verde", "Camar\xF5es", "Camboja", "Canad\xE1", "Catar", "Cazaquist\xE3o", "Chade", "Chile", "China", "Chipre", "Col\xF4mbia", "Comores", "Congo-Brazzaville", "Congo-Kinshasa", "Coreia do Norte", "Coreia do Sul", "Costa Rica", "Costa do Marfim", "Cro\xE1cia", "Cuba", "Dinamarca", "Dom\xEDnica", "Egipto", "Emiratos \xC1rabes Unidos", "Equador", "Eritreia", "Eslov\xE1quia", "Eslov\xE9nia", "Espanha", "Est\xF3nia", "Estados Unidos", "Eti\xF3pia", "Faro\xE9", "Fiji", "Filipinas", "Finl\xE2ndia", "Fran\xE7a", "G\xE2mbia", "Gab\xE3o", "Gana", "Ge\xF3rgia", "Ge\xF3rgia do Sul e Sandwich do Sul", "Gibraltar", "Gr\xE9cia", "Granada", "Gronel\xE2ndia", "Guadalupe", "Guame", "Guatemala", "Guiana", "Guiana Francesa", "Guin\xE9", "Guin\xE9 Equatorial", "Guin\xE9-Bissau", "Haiti", "Honduras", "Hong Kong", "Hungria", "I\xE9men", "Ilha Bouvet", "Ilha Norfolk", "Ilha do Natal", "Ilhas Caim\xE3o", "Ilhas Cook", "Ilhas Falkland", "Ilhas Heard e McDonald", "Ilhas Marshall", "Ilhas Menores Distantes dos Estados Unidos", "Ilhas Salom\xE3o", "Ilhas Turcas e Caicos", "Ilhas Virgens Americanas", "Ilhas Virgens Brit\xE2nicas", "Ilhas dos Cocos", "Indon\xE9sia", "Ir\xE3o", "Iraque", "Irlanda", "Isl\xE2ndia", "Israel", "It\xE1lia", "Jamaica", "Jap\xE3o", "Jibuti", "Jord\xE2nia", "Jugosl\xE1via", "Kuwait", "L\xEDbano", "L\xEDbia", "Laos", "Lesoto", "Let\xF3nia", "Lib\xE9ria", "Listenstaine", "Litu\xE2nia", "Luxemburgo", "M\xE9xico", "M\xF3naco", "Macau", "Maced\xF3nia", "Madag\xE1scar", "Mal\xE1sia", "Mal\xE1vi", "Maldivas", "Mali", "Malta", "Marianas do Norte", "Marrocos", "Martinica", "Maur\xEDcia", "Maurit\xE2nia", "Mayotte", "Micron\xE9sia", "Mo\xE7ambique", "Mold\xE1via", "Mong\xF3lia", "Monserrate", "N\xEDger", "Nam\xEDbia", "Nauru", "Nepal", "Nicar\xE1gua", "Nig\xE9ria", "Niue", "Noruega", "Nova Caled\xF3nia", "Nova Zel\xE2ndia", "Om\xE3", "Pa\xEDses Baixos", "Palau", "Panam\xE1", "Papua-Nova Guin\xE9", "Paquist\xE3o", "Paraguai", "Peru", "Pitcairn", "Pol\xF3nia", "Polin\xE9sia Francesa", "Porto Rico", "Portugal", "Qu\xE9nia", "Quirguizist\xE3o", "Quirib\xE1ti", "R\xFAssia", "Reino Unido", "Rep\xFAblica Centro-Africana", "Rep\xFAblica Checa", "Rep\xFAblica Dominicana", "Reuni\xE3o", "Rom\xE9nia", "Ruanda", "S\xE3o Crist\xF3v\xE3o e Neves", "S\xE3o Marinho", "S\xE3o Pedro e Miquelon", "S\xE3o Tom\xE9 e Pr\xEDncipe", "S\xE3o Vicente e Granadinas", "S\xEDria", "Salvador", "Samoa", "Samoa Americana", "Santa Helena", "Santa L\xFAcia", "Sara Ocidental", "Seicheles", "Senegal", "Serra Leoa", "Singapura", "Som\xE1lia", "Sri Lanca", "Su\xE9cia", "Su\xED\xE7a", "Suazil\xE2ndia", "Sud\xE3o", "Suriname", "Svalbard e Jan Mayen", "Tail\xE2ndia", "Taiwan", "Tajiquist\xE3o", "Tanz\xE2nia", "Territ\xF3rio Brit\xE2nico do Oceano \xCDndico", "Territ\xF3rios Austrais Franceses", "Timor Leste", "Togo", "Tokelau", "Tonga", "Trindade e Tobago", "Tun\xEDsia", "Turquemenist\xE3o", "Turquia", "Tuvalu", "Ucr\xE2nia", "Uganda", "Uruguai", "Usbequist\xE3o", "Vanuatu", "Vaticano", "Venezuela", "Vietname", "Wallis e Futuna", "Z\xE2mbia", "Zimbabu\xE9"];