"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformArguments = void 0;
function transformArguments(host, port, key, destinationDb, timeout, options) {
  var args = ['MIGRATE', host, port.toString()],
    isKeyArray = Array.isArray(key);
  if (isKeyArray) {
    args.push('');
  } else {
    args.push(key);
  }
  args.push(destinationDb.toString(), timeout.toString());
  if (options !== null && options !== void 0 && options.COPY) {
    args.push('COPY');
  }
  if (options !== null && options !== void 0 && options.REPLACE) {
    args.push('REPLACE');
  }
  if (options !== null && options !== void 0 && options.AUTH) {
    if (options.AUTH.username) {
      args.push('AUTH2', options.AUTH.username, options.AUTH.password);
    } else {
      args.push('AUTH', options.AUTH.password);
    }
  }
  if (isKeyArray) {
    args.push.apply(args, ['KEYS'].concat(_toConsumableArray(key)));
  }
  return args;
}
exports.transformArguments = transformArguments;