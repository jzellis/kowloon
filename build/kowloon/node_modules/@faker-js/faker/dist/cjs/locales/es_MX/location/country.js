"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var l = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var d = function d(i, a) {
    for (var e in a) r(i, e, {
      get: a[e],
      enumerable: !0
    });
  },
  t = function t(i, a, e, o) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(l(a)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !s.call(i, n) && n !== e && r(i, n, {
            get: function get() {
              return a[n];
            },
            enumerable: !(o = u(a, n)) || o.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var m = function m(i) {
  return t(r({}, "__esModule", {
    value: !0
  }), i);
};
var g = {};
d(g, {
  "default": function _default() {
    return c;
  }
});
module.exports = m(g);
var c = ["Afganist\xE1n", "Albania", "Argelia", "Andorra", "Angola", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbay\xE1n", "Bahamas", "Barein", "Bangladesh", "Barbados", "Bielorusia", "B\xE9lgica", "Belice", "Bermuda", "But\xE1n", "Bolivia", "Bosnia Herzegovina", "Botswana", "Brasil", "Bulgaria", "Burkina Faso", "Burundi", "Camboya", "Camer\xFAn", "Canada", "Cabo Verde", "Islas Caim\xE1n", "Chad", "Chile", "China", "Isla de Navidad", "Colombia", "Comodos", "Congo", "Costa Rica", "Costa de Marfil", "Croacia", "Cuba", "Chipre", "Rep\xFAblica Checa", "Dinamarca", "Dominica", "Rep\xFAblica Dominicana", "Ecuador", "Egipto", "El Salvador", "Guinea Ecuatorial", "Eritrea", "Estonia", "Etiop\xEDa", "Islas Faro", "Fiji", "Finlandia", "Francia", "Gab\xF3n", "Gambia", "Georgia", "Alemania", "Ghana", "Grecia", "Groenlandia", "Granada", "Guadalupe", "Guam", "Guatemala", "Guinea", "Guinea-Bisau", "Guayana", "Haiti", "Honduras", "Hong Kong", "Hungria", "Islandia", "India", "Indonesia", "Iran", "Irak", "Irlanda", "Italia", "Jamaica", "Jap\xF3n", "Jordania", "Kazajistan", "Kenia", "Kiribati", "Corea", "Kuwait", "Letonia", "L\xEDbano", "Liberia", "Liechtenstein", "Lituania", "Luxemburgo", "Macao", "Macedonia", "Madagascar", "Malawi", "Malasia", "Maldivas", "Mali", "Malta", "Martinica", "Mauritania", "M\xE9xico", "Micronesia", "Moldavia", "M\xF3naco", "Mongolia", "Montenegro", "Montserrat", "Marruecos", "Mozambique", "Namibia", "Nauru", "Nepal", "Pa\xEDses Bajos", "Nueva Zelanda", "Nicaragua", "Niger", "Nigeria", "Noruega", "Om\xE1n", "Pakistan", "Panam\xE1", "Pap\xFAa Nueva Guinea", "Paraguay", "Per\xFA", "Filipinas", "Poland", "Portugal", "Puerto Rico", "Rusia", "Ruanda", "Samoa", "San Marino", "Santo Tom\xE9 y Principe", "Arabia Saud\xED", "Senegal", "Serbia", "Seychelles", "Sierra Leona", "Singapur", "Eslovaquia", "Eslovenia", "Somalia", "Espa\xF1a", "Sri Lanka", "Sud\xE1n", "Suriname", "Suecia", "Suiza", "Siria", "Taiwan", "Tajikistan", "Tanzania", "Tailandia", "Timor-Leste", "Togo", "Tonga", "Trinidad y Tobago", "Tunez", "Turquia", "Uganda", "Ucrania", "Emiratos \xC1rabes Unidos", "Reino Unido", "Estados Unidos de Am\xE9rica", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"];