"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "aliases", {
  enumerable: true,
  get: function get() {
    return _aliases.aliases;
  }
});
exports.compilePseudoSelector = compilePseudoSelector;
Object.defineProperty(exports, "filters", {
  enumerable: true,
  get: function get() {
    return _filters.filters;
  }
});
Object.defineProperty(exports, "pseudos", {
  enumerable: true,
  get: function get() {
    return _pseudos.pseudos;
  }
});
var _cssWhat = require("css-what");
var _filters = require("./filters.js");
var _pseudos = require("./pseudos.js");
var _aliases = require("./aliases.js");
var _subselects = require("./subselects.js");
function compilePseudoSelector(next, selector, options, context, compileToken) {
  var _a;
  var name = selector.name,
    data = selector.data;
  if (Array.isArray(data)) {
    if (!(name in _subselects.subselects)) {
      throw new Error("Unknown pseudo-class :".concat(name, "(").concat(data, ")"));
    }
    return _subselects.subselects[name](next, data, options, context, compileToken);
  }
  var userPseudo = (_a = options.pseudos) === null || _a === void 0 ? void 0 : _a[name];
  var stringPseudo = typeof userPseudo === "string" ? userPseudo : _aliases.aliases[name];
  if (typeof stringPseudo === "string") {
    if (data != null) {
      throw new Error("Pseudo ".concat(name, " doesn't have any arguments"));
    }
    // The alias has to be parsed here, to make sure options are respected.
    var alias = (0, _cssWhat.parse)(stringPseudo);
    return _subselects.subselects["is"](next, alias, options, context, compileToken);
  }
  if (typeof userPseudo === "function") {
    (0, _pseudos.verifyPseudoArgs)(userPseudo, name, data, 1);
    return function (elem) {
      return userPseudo(elem, data) && next(elem);
    };
  }
  if (name in _filters.filters) {
    return _filters.filters[name](next, data, options, context);
  }
  if (name in _pseudos.pseudos) {
    var pseudo = _pseudos.pseudos[name];
    (0, _pseudos.verifyPseudoArgs)(pseudo, name, data, 2);
    return function (elem) {
      return pseudo(elem, options, data) && next(elem);
    };
  }
  throw new Error("Unknown pseudo-class :".concat(name));
}