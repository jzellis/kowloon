"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Graph_instances, _Graph_client, _Graph_name, _Graph_metadata, _Graph_setMetadataPromise, _Graph_updateMetadata, _Graph_setMetadata, _Graph_cleanMetadataArray, _Graph_getMetadata, _Graph_getMetadataAsync, _Graph_parseReply, _Graph_parseValue, _Graph_parseEdge, _Graph_parseNode, _Graph_parseProperties;
Object.defineProperty(exports, "__esModule", {
  value: true
});
// https://github.com/RedisGraph/RedisGraph/blob/master/src/resultset/formatters/resultset_formatter.h#L20
var GraphValueTypes;
(function (GraphValueTypes) {
  GraphValueTypes[GraphValueTypes["UNKNOWN"] = 0] = "UNKNOWN";
  GraphValueTypes[GraphValueTypes["NULL"] = 1] = "NULL";
  GraphValueTypes[GraphValueTypes["STRING"] = 2] = "STRING";
  GraphValueTypes[GraphValueTypes["INTEGER"] = 3] = "INTEGER";
  GraphValueTypes[GraphValueTypes["BOOLEAN"] = 4] = "BOOLEAN";
  GraphValueTypes[GraphValueTypes["DOUBLE"] = 5] = "DOUBLE";
  GraphValueTypes[GraphValueTypes["ARRAY"] = 6] = "ARRAY";
  GraphValueTypes[GraphValueTypes["EDGE"] = 7] = "EDGE";
  GraphValueTypes[GraphValueTypes["NODE"] = 8] = "NODE";
  GraphValueTypes[GraphValueTypes["PATH"] = 9] = "PATH";
  GraphValueTypes[GraphValueTypes["MAP"] = 10] = "MAP";
  GraphValueTypes[GraphValueTypes["POINT"] = 11] = "POINT";
})(GraphValueTypes || (GraphValueTypes = {}));
var Graph = /*#__PURE__*/function () {
  function Graph(client, name) {
    _classCallCheck(this, Graph);
    _Graph_instances.add(this);
    _Graph_client.set(this, void 0);
    _Graph_name.set(this, void 0);
    _Graph_metadata.set(this, void 0);
    _Graph_setMetadataPromise.set(this, void 0);
    __classPrivateFieldSet(this, _Graph_client, client, "f");
    __classPrivateFieldSet(this, _Graph_name, name, "f");
  }
  _createClass(Graph, [{
    key: "query",
    value: function () {
      var _query2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_query, options) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseReply);
              _context.t1 = this;
              _context.next = 4;
              return __classPrivateFieldGet(this, _Graph_client, "f").graph.query(__classPrivateFieldGet(this, _Graph_name, "f"), _query, options, true);
            case 4:
              _context.t2 = _context.sent;
              return _context.abrupt("return", _context.t0.call.call(_context.t0, _context.t1, _context.t2));
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function query(_x, _x2) {
        return _query2.apply(this, arguments);
      }
      return query;
    }()
  }, {
    key: "roQuery",
    value: function () {
      var _roQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(query, options) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseReply);
              _context2.t1 = this;
              _context2.next = 4;
              return __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), query, options, true);
            case 4:
              _context2.t2 = _context2.sent;
              return _context2.abrupt("return", _context2.t0.call.call(_context2.t0, _context2.t1, _context2.t2));
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function roQuery(_x3, _x4) {
        return _roQuery.apply(this, arguments);
      }
      return roQuery;
    }()
  }]);
  return Graph;
}();
exports["default"] = Graph;
_Graph_client = new WeakMap(), _Graph_name = new WeakMap(), _Graph_metadata = new WeakMap(), _Graph_setMetadataPromise = new WeakMap(), _Graph_instances = new WeakSet(), _Graph_updateMetadata = function _Graph_updateMetadata() {
  var _classPrivateFieldGe,
    _this = this;
  __classPrivateFieldSet(this, _Graph_setMetadataPromise, (_classPrivateFieldGe = __classPrivateFieldGet(this, _Graph_setMetadataPromise, "f")) !== null && _classPrivateFieldGe !== void 0 ? _classPrivateFieldGe : __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_setMetadata).call(this)["finally"](function () {
    return __classPrivateFieldSet(_this, _Graph_setMetadataPromise, undefined, "f");
  }), "f");
  return __classPrivateFieldGet(this, _Graph_setMetadataPromise, "f");
}, _Graph_setMetadata =
/*#__PURE__*/
// DO NOT use directly, use #updateMetadata instead
function () {
  var _Graph_setMetadata2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var _yield$Promise$all, _yield$Promise$all2, labels, relationshipTypes, propertyKeys;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return Promise.all([__classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), 'CALL db.labels()'), __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), 'CALL db.relationshipTypes()'), __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), 'CALL db.propertyKeys()')]);
        case 2:
          _yield$Promise$all = _context3.sent;
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
          labels = _yield$Promise$all2[0];
          relationshipTypes = _yield$Promise$all2[1];
          propertyKeys = _yield$Promise$all2[2];
          __classPrivateFieldSet(this, _Graph_metadata, {
            labels: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_cleanMetadataArray).call(this, labels.data),
            relationshipTypes: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_cleanMetadataArray).call(this, relationshipTypes.data),
            propertyKeys: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_cleanMetadataArray).call(this, propertyKeys.data)
          }, "f");
          return _context3.abrupt("return", __classPrivateFieldGet(this, _Graph_metadata, "f"));
        case 9:
        case "end":
          return _context3.stop();
      }
    }, _callee3, this);
  }));
  function _Graph_setMetadata() {
    return _Graph_setMetadata2.apply(this, arguments);
  }
  return _Graph_setMetadata;
}(), _Graph_cleanMetadataArray = function _Graph_cleanMetadataArray(arr) {
  return arr.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      value = _ref2[0];
    return value;
  });
}, _Graph_getMetadata = function _Graph_getMetadata(key, id) {
  var _classPrivateFieldGe2, _classPrivateFieldGe3;
  return (_classPrivateFieldGe2 = (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _Graph_metadata, "f")) === null || _classPrivateFieldGe3 === void 0 ? void 0 : _classPrivateFieldGe3[key][id]) !== null && _classPrivateFieldGe2 !== void 0 ? _classPrivateFieldGe2 : __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_getMetadataAsync).call(this, key, id);
}, _Graph_getMetadataAsync =
/*#__PURE__*/
// DO NOT use directly, use #getMetadata instead
function () {
  var _Graph_getMetadataAsync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, id) {
    var value;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_updateMetadata).call(this);
        case 2:
          _context4.t0 = key;
          _context4.t1 = id;
          value = _context4.sent[_context4.t0][_context4.t1];
          if (!(value === undefined)) {
            _context4.next = 7;
            break;
          }
          throw new Error("Cannot find value from ".concat(key, "[").concat(id, "]"));
        case 7:
          return _context4.abrupt("return", value);
        case 8:
        case "end":
          return _context4.stop();
      }
    }, _callee4, this);
  }));
  function _Graph_getMetadataAsync(_x5, _x6) {
    return _Graph_getMetadataAsync2.apply(this, arguments);
  }
  return _Graph_getMetadataAsync;
}(), _Graph_parseReply = /*#__PURE__*/function () {
  var _Graph_parseReply2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(reply) {
    var _this2 = this;
    var promises, parsed;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          if (reply.data) {
            _context5.next = 2;
            break;
          }
          return _context5.abrupt("return", reply);
        case 2:
          promises = [], parsed = {
            metadata: reply.metadata,
            data: reply.data.map(function (row) {
              var data = {};
              for (var i = 0; i < row.length; i++) {
                data[reply.headers[i][1]] = __classPrivateFieldGet(_this2, _Graph_instances, "m", _Graph_parseValue).call(_this2, row[i], promises);
              }
              return data;
            })
          };
          if (!promises.length) {
            _context5.next = 6;
            break;
          }
          _context5.next = 6;
          return Promise.all(promises);
        case 6:
          return _context5.abrupt("return", parsed);
        case 7:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  function _Graph_parseReply(_x7) {
    return _Graph_parseReply2.apply(this, arguments);
  }
  return _Graph_parseReply;
}(), _Graph_parseValue = function _Graph_parseValue(_ref3, promises) {
  var _this3 = this;
  var _ref4 = _slicedToArray(_ref3, 2),
    valueType = _ref4[0],
    value = _ref4[1];
  switch (valueType) {
    case GraphValueTypes.NULL:
      return null;
    case GraphValueTypes.STRING:
    case GraphValueTypes.INTEGER:
      return value;
    case GraphValueTypes.BOOLEAN:
      return value === 'true';
    case GraphValueTypes.DOUBLE:
      return parseFloat(value);
    case GraphValueTypes.ARRAY:
      return value.map(function (x) {
        return __classPrivateFieldGet(_this3, _Graph_instances, "m", _Graph_parseValue).call(_this3, x, promises);
      });
    case GraphValueTypes.EDGE:
      return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseEdge).call(this, value, promises);
    case GraphValueTypes.NODE:
      return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseNode).call(this, value, promises);
    case GraphValueTypes.PATH:
      return {
        nodes: value[0][1].map(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
            node = _ref6[1];
          return __classPrivateFieldGet(_this3, _Graph_instances, "m", _Graph_parseNode).call(_this3, node, promises);
        }),
        edges: value[1][1].map(function (_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
            edge = _ref8[1];
          return __classPrivateFieldGet(_this3, _Graph_instances, "m", _Graph_parseEdge).call(_this3, edge, promises);
        })
      };
    case GraphValueTypes.MAP:
      var map = {};
      for (var i = 0; i < value.length; i++) {
        map[value[i++]] = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseValue).call(this, value[i], promises);
      }
      return map;
    case GraphValueTypes.POINT:
      return {
        latitude: parseFloat(value[0]),
        longitude: parseFloat(value[1])
      };
    default:
      throw new Error("unknown scalar type: ".concat(valueType));
  }
}, _Graph_parseEdge = function _Graph_parseEdge(_ref9, promises) {
  var _ref10 = _slicedToArray(_ref9, 5),
    id = _ref10[0],
    relationshipTypeId = _ref10[1],
    sourceId = _ref10[2],
    destinationId = _ref10[3],
    properties = _ref10[4];
  var edge = {
    id: id,
    sourceId: sourceId,
    destinationId: destinationId,
    properties: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseProperties).call(this, properties, promises)
  };
  var relationshipType = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_getMetadata).call(this, 'relationshipTypes', relationshipTypeId);
  if (relationshipType instanceof Promise) {
    promises.push(relationshipType.then(function (value) {
      return edge.relationshipType = value;
    }));
  } else {
    edge.relationshipType = relationshipType;
  }
  return edge;
}, _Graph_parseNode = function _Graph_parseNode(_ref11, promises) {
  var _this4 = this;
  var _ref12 = _slicedToArray(_ref11, 3),
    id = _ref12[0],
    labelIds = _ref12[1],
    properties = _ref12[2];
  var labels = new Array(labelIds.length);
  var _loop = function _loop(i) {
    var value = __classPrivateFieldGet(_this4, _Graph_instances, "m", _Graph_getMetadata).call(_this4, 'labels', labelIds[i]);
    if (value instanceof Promise) {
      promises.push(value.then(function (value) {
        return labels[i] = value;
      }));
    } else {
      labels[i] = value;
    }
  };
  for (var i = 0; i < labelIds.length; i++) {
    _loop(i);
  }
  return {
    id: id,
    labels: labels,
    properties: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseProperties).call(this, properties, promises)
  };
}, _Graph_parseProperties = function _Graph_parseProperties(raw, promises) {
  var _this5 = this;
  var parsed = {};
  var _iterator = _createForOfIteratorHelper(raw),
    _step;
  try {
    var _loop2 = function _loop2() {
      var _step$value = _slicedToArray(_step.value, 3),
        id = _step$value[0],
        type = _step$value[1],
        value = _step$value[2];
      var parsedValue = __classPrivateFieldGet(_this5, _Graph_instances, "m", _Graph_parseValue).call(_this5, [type, value], promises),
        key = __classPrivateFieldGet(_this5, _Graph_instances, "m", _Graph_getMetadata).call(_this5, 'propertyKeys', id);
      if (key instanceof Promise) {
        promises.push(key.then(function (key) {
          return parsed[key] = parsedValue;
        }));
      } else {
        parsed[key] = parsedValue;
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return parsed;
};