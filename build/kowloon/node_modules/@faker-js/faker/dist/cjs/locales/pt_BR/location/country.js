"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var l = Object.getOwnPropertyDescriptor;
var u = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var t = function t(i, a) {
    for (var n in a) r(i, n, {
      get: a[n],
      enumerable: !0
    });
  },
  d = function d(i, a, n, e) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(u(a)),
        _step;
      try {
        var _loop = function _loop() {
          var o = _step.value;
          !s.call(i, o) && o !== n && r(i, o, {
            get: function get() {
              return a[o];
            },
            enumerable: !(e = l(a, o)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var c = function c(i) {
  return d(r({}, "__esModule", {
    value: !0
  }), i);
};
var m = {};
t(m, {
  "default": function _default() {
    return g;
  }
});
module.exports = c(m);
var g = ["Afeganist\xE3o", "Alb\xE2nia", "Alg\xE9ria", "Samoa", "Andorra", "Angola", "Anguila", "Antigua and Barbada", "Argentina", "Arm\xEAnia", "Aruba", "Austr\xE1lia", "\xC1ustria", "Azerbaij\xE3o", "Bahamas", "Bar\xE9m", "Bangladesh", "Barbados", "B\xE9lgica", "Belize", "Benin", "Bermuda", "But\xE3o", "Bol\xEDvia", "B\xF4snia", "Botsuana", "Ilha Bouvet", "Brasil", "Arquip\xE9lago de Chagos", "Ilhas Virgens", "Brunei", "Bulg\xE1ria", "Burkina Faso", "Burundi", "Camboja", "Camar\xF5es", "Canad\xE1", "Cabo Verde", "Ilhas Caiman", "Rep\xFAblica da \xC1frica Central", "Chade", "Chile", "China", "Ilha do Natal", "Ilhas Cocos", "Col\xF4mbia", "Comores", "Congo", "Ilhas Cook", "Costa Rica", "Costa do Marfim", "Cro\xE1cia", "Cuba", "Chipre", "Rep\xFAblica Tcheca", "Dinamarca", "Jibuti", "Dominica", "Rep\xFAblica Dominicana", "Equador", "Egito", "El Salvador", "Guin\xE9 Equatorial", "Eritreia", "Est\xF4nia", "Eti\xF3pia", "Ilhas Faroe", "Malvinas", "Fiji", "Finl\xE2ndia", "Fran\xE7a", "Guin\xE9 Francesa", "Polin\xE9sia Francesa", "Gab\xE3o", "G\xE2mbia", "Georgia", "Alemanha", "Gana", "Gibraltar", "Gr\xE9cia", "Groel\xE2ndia", "Granada", "Guadalupe", "Guatemala", "Guernesey", "Guin\xE9", "Guin\xE9-Bissau", "Guiana", "Haiti", "Ilhas Heard e McDonald", "Vaticano", "Honduras", "Hong Kong", "Hungria", "Isl\xE2ndia", "\xCDndia", "Indon\xE9sia", "Ir\xE3", "Iraque", "Irlanda", "Ilha de Man", "Israel", "It\xE1lia", "Jamaica", "Jap\xE3o", "Jersey", "Jord\xE2nia", "Cazaquist\xE3o", "Qu\xEAnia", "Quiribati", "Coreia do Norte", "Coreia do Sul", "Kuwait", "Quirguist\xE3o", "Laos", "Latvia", "L\xEDbano", "Lesoto", "Lib\xE9ria", "L\xEDbia", "Liechtenstein", "Litu\xE2nia", "Luxemburgo", "Macao", "Maced\xF4nia", "Madagascar", "Malawi", "Mal\xE1sia", "Maldives", "Mali", "Malta", "Ilhas Marshall", "Martinica", "Maurit\xE2nia", "Maur\xEDcia", "Maiote", "M\xE9xico", "Micron\xE9sia", "Mold\xE1via", "M\xF4naco", "Mong\xF3lia", "Montenegro", "Montserrat", "Marrocos", "Mo\xE7ambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Antilhas Holandesas", "Pa\xEDses Baixos", "Nova Caledonia", "Nova Zel\xE2ndia", "Nicar\xE1gua", "Nig\xE9ria", "Niue", "Ilha Norfolk", "Marianas Setentrionais", "Noruega", "Om\xE3", "Paquist\xE3o", "Palau", "Territ\xF3rio da Palestina", "Panam\xE1", "Papua-Nova Guin\xE9", "Paraguai", "Peru", "Filipinas", "Pol\xF4nia", "Portugal", "Porto Rico", "Qatar", "Rom\xEAnia", "R\xFAssia", "Ruanda", "S\xE3o Bartolomeu", "Santa Helena", "Santa L\xFAcia", "S\xE3o Martinho", "S\xE3o Pedro e Miquel\xE3o", "S\xE3o Vicente e Granadinas", "San Marino", "Sao Tom\xE9 e Pr\xEDncipe", "Ar\xE1bia Saudita", "Senegal", "S\xE9rvia", "Seicheles", "Serra Leoa", "Singapura", "Eslov\xE1quia", "Eslov\xEAnia", "Ilhas Salom\xE3o", "Som\xE1lia", "\xC1frica do Sul", "Ilhas Ge\xF3rgia do Sul e Sandwich do Sul", "Espanha", "Sri Lanka", "Sud\xE3o", "Suriname", "Ilhas Svalbard & Jan Mayen", "Suazil\xE2ndia", "Su\xE9cia", "Su\xED\xE7a", "S\xEDria", "Taiwan", "Tajiquist\xE3o", "Tanz\xE2nia", "Tail\xE2ndia", "Timor-Leste", "Togo", "Toquelau", "Tonga", "Trinidad e Tobago", "Tun\xEDsia", "Turquia", "Turcomenist\xE3o", "Turcas e Caicos", "Tuvalu", "Uganda", "Ucr\xE2nia", "Emirados \xC1rabes Unidos", "Reino Unido", "Estados Unidos da Am\xE9rica", "Estados Unidos das Ilhas Virgens", "Uruguai", "Uzbequist\xE3o", "Vanuatu", "Venezuela", "Vietn\xE3", "Wallis e Futuna", "I\xEAmen", "Z\xE2mbia", "Zimb\xE1bue"];