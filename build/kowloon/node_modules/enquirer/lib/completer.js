'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var unique = function unique(arr) {
  return arr.filter(function (v, i) {
    return arr.lastIndexOf(v) === i;
  });
};
var compact = function compact(arr) {
  return unique(arr).filter(Boolean);
};
module.exports = function (action) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var _data$past = data.past,
    past = _data$past === void 0 ? [] : _data$past,
    _data$present = data.present,
    present = _data$present === void 0 ? '' : _data$present;
  var rest, prev;
  switch (action) {
    case 'prev':
    case 'undo':
      rest = past.slice(0, past.length - 1);
      prev = past[past.length - 1] || '';
      return {
        past: compact([value].concat(_toConsumableArray(rest))),
        present: prev
      };
    case 'next':
    case 'redo':
      rest = past.slice(1);
      prev = past[0] || '';
      return {
        past: compact([].concat(_toConsumableArray(rest), [value])),
        present: prev
      };
    case 'save':
      return {
        past: compact([].concat(_toConsumableArray(past), [value])),
        present: ''
      };
    case 'remove':
      prev = compact(past.filter(function (v) {
        return v !== value;
      }));
      present = '';
      if (prev.length) {
        present = prev.pop();
      }
      return {
        past: prev,
        present: present
      };
    default:
      {
        throw new Error("Invalid action: \"".concat(action, "\""));
      }
  }
};