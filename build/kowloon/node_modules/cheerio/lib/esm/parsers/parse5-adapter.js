"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWithParse5 = parseWithParse5;
exports.renderWithParse5 = renderWithParse5;
var _domhandler = require("domhandler");
var _parse = require("parse5");
var _parse5Htmlparser2TreeAdapter = require("parse5-htmlparser2-tree-adapter");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Parse the content with `parse5` in the context of the given `ParentNode`.
 *
 * @param content - The content to parse.
 * @param options - A set of options to use to parse.
 * @param isDocument - Whether to parse the content as a full HTML document.
 * @param context - The context in which to parse the content.
 * @returns The parsed content.
 */
function parseWithParse5(content, options, isDocument, context) {
  var opts = {
    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,
    treeAdapter: _parse5Htmlparser2TreeAdapter.adapter,
    sourceCodeLocationInfo: options.sourceCodeLocationInfo
  };
  return isDocument ? (0, _parse.parse)(content, opts) : (0, _parse.parseFragment)(context, content, opts);
}
var renderOpts = {
  treeAdapter: _parse5Htmlparser2TreeAdapter.adapter
};
/**
 * Renders the given DOM tree with `parse5` and returns the result as a string.
 *
 * @param dom - The DOM tree to render.
 * @returns The rendered document.
 */
function renderWithParse5(dom) {
  /*
   * `dom-serializer` passes over the special "root" node and renders the
   * node's children in its place. To mimic this behavior with `parse5`, an
   * equivalent operation must be applied to the input array.
   */
  var nodes = 'length' in dom ? dom : [dom];
  for (var index = 0; index < nodes.length; index += 1) {
    var node = nodes[index];
    if ((0, _domhandler.isDocument)(node)) {
      var _Array$prototype$spli;
      (_Array$prototype$spli = Array.prototype.splice).call.apply(_Array$prototype$spli, [nodes, index, 1].concat(_toConsumableArray(node.children)));
    }
  }
  var result = '';
  for (var _index = 0; _index < nodes.length; _index += 1) {
    var _node = nodes[_index];
    result += (0, _parse.serializeOuter)(_node, renderOpts);
  }
  return result;
}