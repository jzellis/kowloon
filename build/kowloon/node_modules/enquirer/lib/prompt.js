'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Events = require('events');
var colors = require('ansi-colors');
var _keypress = require('./keypress');
var timer = require('./timer');
var State = require('./state');
var theme = require('./theme');
var utils = require('./utils');
var ansi = require('./ansi');

/**
 * Base class for creating a new Prompt.
 * @param {Object} `options` Question object.
 */
var Prompt = /*#__PURE__*/function (_Events) {
  _inherits(Prompt, _Events);
  var _super = _createSuper(Prompt);
  function Prompt() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Prompt);
    _this = _super.call(this);
    _this.name = options.name;
    _this.type = options.type;
    _this.options = options;
    theme(_assertThisInitialized(_this));
    timer(_assertThisInitialized(_this));
    _this.state = new State(_assertThisInitialized(_this));
    _this.initial = [options.initial, options["default"]].find(function (v) {
      return v != null;
    });
    _this.stdout = options.stdout || process.stdout;
    _this.stdin = options.stdin || process.stdin;
    _this.scale = options.scale || 1;
    _this.term = _this.options.term || process.env.TERM_PROGRAM;
    _this.margin = margin(_this.options.margin);
    _this.setMaxListeners(0);
    setOptions(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Prompt, [{
    key: "keypress",
    value: function () {
      var _keypress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {
        var event,
          key,
          fn,
          _args = arguments;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              event = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              this.keypressed = true;
              key = _keypress.action(input, _keypress(input, event), this.options.actions);
              this.state.keypress = key;
              this.emit('keypress', input, key);
              this.emit('state', this.state.clone());
              fn = this.options[key.action] || this[key.action] || this.dispatch;
              if (!(typeof fn === 'function')) {
                _context.next = 11;
                break;
              }
              _context.next = 10;
              return fn.call(this, input, key);
            case 10:
              return _context.abrupt("return", _context.sent);
            case 11:
              this.alert();
            case 12:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function keypress(_x) {
        return _keypress2.apply(this, arguments);
      }
      return keypress;
    }()
  }, {
    key: "alert",
    value: function alert() {
      delete this.state.alert;
      if (this.options.show === false) {
        this.emit('alert');
      } else {
        this.stdout.write(ansi.code.beep);
      }
    }
  }, {
    key: "cursorHide",
    value: function cursorHide() {
      var _this2 = this;
      this.stdout.write(ansi.cursor.hide());
      utils.onExit(function () {
        return _this2.cursorShow();
      });
    }
  }, {
    key: "cursorShow",
    value: function cursorShow() {
      this.stdout.write(ansi.cursor.show());
    }
  }, {
    key: "write",
    value: function write(str) {
      if (!str) return;
      if (this.stdout && this.state.show !== false) {
        this.stdout.write(str);
      }
      this.state.buffer += str;
    }
  }, {
    key: "clear",
    value: function clear() {
      var lines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var buffer = this.state.buffer;
      this.state.buffer = '';
      if (!buffer && !lines || this.options.show === false) return;
      this.stdout.write(ansi.cursor.down(lines) + ansi.clear(buffer, this.width));
    }
  }, {
    key: "restore",
    value: function restore() {
      if (this.state.closed || this.options.show === false) return;
      var _this$sections = this.sections(),
        prompt = _this$sections.prompt,
        after = _this$sections.after,
        rest = _this$sections.rest;
      var cursor = this.cursor,
        _this$initial = this.initial,
        initial = _this$initial === void 0 ? '' : _this$initial,
        _this$input = this.input,
        input = _this$input === void 0 ? '' : _this$input,
        _this$value = this.value,
        value = _this$value === void 0 ? '' : _this$value;
      var size = this.state.size = rest.length;
      var state = {
        after: after,
        cursor: cursor,
        initial: initial,
        input: input,
        prompt: prompt,
        size: size,
        value: value
      };
      var codes = ansi.cursor.restore(state);
      if (codes) {
        this.stdout.write(codes);
      }
    }
  }, {
    key: "sections",
    value: function sections() {
      var _this$state = this.state,
        buffer = _this$state.buffer,
        input = _this$state.input,
        prompt = _this$state.prompt;
      prompt = colors.unstyle(prompt);
      var buf = colors.unstyle(buffer);
      var idx = buf.indexOf(prompt);
      var header = buf.slice(0, idx);
      var rest = buf.slice(idx);
      var lines = rest.split('\n');
      var first = lines[0];
      var last = lines[lines.length - 1];
      var promptLine = prompt + (input ? ' ' + input : '');
      var len = promptLine.length;
      var after = len < first.length ? first.slice(len + 1) : '';
      return {
        header: header,
        prompt: first,
        after: after,
        rest: lines.slice(1),
        last: last
      };
    }
  }, {
    key: "submit",
    value: function () {
      var _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var result, error;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.state.submitted = true;
              this.state.validating = true;

              // this will only be called when the prompt is directly submitted
              // without initializing, i.e. when the prompt is skipped, etc. Otherwize,
              // "options.onSubmit" is will be handled by the "initialize()" method.
              if (!this.options.onSubmit) {
                _context2.next = 5;
                break;
              }
              _context2.next = 5;
              return this.options.onSubmit.call(this, this.name, this.value, this);
            case 5:
              _context2.t0 = this.state.error;
              if (_context2.t0) {
                _context2.next = 10;
                break;
              }
              _context2.next = 9;
              return this.validate(this.value, this.state);
            case 9:
              _context2.t0 = _context2.sent;
            case 10:
              result = _context2.t0;
              if (!(result !== true)) {
                _context2.next = 23;
                break;
              }
              error = '\n' + this.symbols.pointer + ' ';
              if (typeof result === 'string') {
                error += result.trim();
              } else {
                error += 'Invalid input';
              }
              this.state.error = '\n' + this.styles.danger(error);
              this.state.submitted = false;
              _context2.next = 18;
              return this.render();
            case 18:
              _context2.next = 20;
              return this.alert();
            case 20:
              this.state.validating = false;
              this.state.error = void 0;
              return _context2.abrupt("return");
            case 23:
              this.state.validating = false;
              _context2.next = 26;
              return this.render();
            case 26:
              _context2.next = 28;
              return this.close();
            case 28:
              _context2.next = 30;
              return this.result(this.value);
            case 30:
              this.value = _context2.sent;
              this.emit('submit', this.value);
            case 32:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function submit() {
        return _submit.apply(this, arguments);
      }
      return submit;
    }()
  }, {
    key: "cancel",
    value: function () {
      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(err) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              this.state.cancelled = this.state.submitted = true;
              _context3.next = 3;
              return this.render();
            case 3:
              _context3.next = 5;
              return this.close();
            case 5:
              if (!(typeof this.options.onCancel === 'function')) {
                _context3.next = 8;
                break;
              }
              _context3.next = 8;
              return this.options.onCancel.call(this, this.name, this.value, this);
            case 8:
              _context3.t0 = this;
              _context3.next = 11;
              return this.error(err);
            case 11:
              _context3.t1 = _context3.sent;
              _context3.t0.emit.call(_context3.t0, 'cancel', _context3.t1);
            case 13:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function cancel(_x2) {
        return _cancel.apply(this, arguments);
      }
      return cancel;
    }()
  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var sections, lines;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              this.state.closed = true;
              try {
                sections = this.sections();
                lines = Math.ceil(sections.prompt.length / this.width);
                if (sections.rest) {
                  this.write(ansi.cursor.down(sections.rest.length));
                }
                this.write('\n'.repeat(lines));
              } catch (err) {/* do nothing */}
              this.emit('close');
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
  }, {
    key: "start",
    value: function start() {
      if (!this.stop && this.options.show !== false) {
        this.stop = _keypress.listen(this, this.keypress.bind(this));
        this.once('close', this.stop);
      }
    }
  }, {
    key: "skip",
    value: function () {
      var _skip = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              this.skipped = this.options.skip === true;
              if (!(typeof this.options.skip === 'function')) {
                _context5.next = 5;
                break;
              }
              _context5.next = 4;
              return this.options.skip.call(this, this.name, this.value);
            case 4:
              this.skipped = _context5.sent;
            case 5:
              return _context5.abrupt("return", this.skipped);
            case 6:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function skip() {
        return _skip.apply(this, arguments);
      }
      return skip;
    }()
  }, {
    key: "initialize",
    value: function () {
      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        var _this3 = this;
        var format, options, result, onSubmit, submit;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              format = this.format, options = this.options, result = this.result;
              this.format = function () {
                return format.call(_this3, _this3.value);
              };
              this.result = function () {
                return result.call(_this3, _this3.value);
              };
              if (!(typeof options.initial === 'function')) {
                _context7.next = 7;
                break;
              }
              _context7.next = 6;
              return options.initial.call(this, this);
            case 6:
              this.initial = _context7.sent;
            case 7:
              if (!(typeof options.onRun === 'function')) {
                _context7.next = 10;
                break;
              }
              _context7.next = 10;
              return options.onRun.call(this, this);
            case 10:
              // if "options.onSubmit" is defined, we wrap the "submit" method to guarantee
              // that "onSubmit" will always called first thing inside the submit
              // method, regardless of how it's handled in inheriting prompts.
              if (typeof options.onSubmit === 'function') {
                onSubmit = options.onSubmit.bind(this);
                submit = this.submit.bind(this);
                delete this.options.onSubmit;
                this.submit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                    while (1) switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return onSubmit(_this3.name, _this3.value, _this3);
                      case 2:
                        return _context6.abrupt("return", submit());
                      case 3:
                      case "end":
                        return _context6.stop();
                    }
                  }, _callee6);
                }));
              }
              _context7.next = 13;
              return this.start();
            case 13:
              _context7.next = 15;
              return this.render();
            case 15:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function initialize() {
        return _initialize.apply(this, arguments);
      }
      return initialize;
    }()
  }, {
    key: "render",
    value: function render() {
      throw new Error('expected prompt to have a custom render method');
    }
  }, {
    key: "run",
    value: function run() {
      var _this4 = this;
      return new Promise( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(resolve, reject) {
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                _this4.once('submit', resolve);
                _this4.once('cancel', reject);
                _context8.next = 4;
                return _this4.skip();
              case 4:
                if (!_context8.sent) {
                  _context8.next = 7;
                  break;
                }
                _this4.render = function () {};
                return _context8.abrupt("return", _this4.submit());
              case 7:
                _context8.next = 9;
                return _this4.initialize();
              case 9:
                _this4.emit('run');
              case 10:
              case "end":
                return _context8.stop();
            }
          }, _callee8);
        }));
        return function (_x3, _x4) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "element",
    value: function () {
      var _element = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(name, choice, i) {
        var options, state, symbols, timers, timer, value, val, res;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              options = this.options, state = this.state, symbols = this.symbols, timers = this.timers;
              timer = timers && timers[name];
              state.timer = timer;
              value = options[name] || state[name] || symbols[name];
              if (!(choice && choice[name] != null)) {
                _context9.next = 8;
                break;
              }
              _context9.t0 = choice[name];
              _context9.next = 11;
              break;
            case 8:
              _context9.next = 10;
              return value;
            case 10:
              _context9.t0 = _context9.sent;
            case 11:
              val = _context9.t0;
              if (!(val === '')) {
                _context9.next = 14;
                break;
              }
              return _context9.abrupt("return", val);
            case 14:
              _context9.next = 16;
              return this.resolve(val, state, choice, i);
            case 16:
              res = _context9.sent;
              if (!(!res && choice && choice[name])) {
                _context9.next = 19;
                break;
              }
              return _context9.abrupt("return", this.resolve(value, state, choice, i));
            case 19:
              return _context9.abrupt("return", res);
            case 20:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function element(_x5, _x6, _x7) {
        return _element.apply(this, arguments);
      }
      return element;
    }()
  }, {
    key: "prefix",
    value: function () {
      var _prefix = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var element, timer, state, style;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.element('prefix');
            case 2:
              _context10.t0 = _context10.sent;
              if (_context10.t0) {
                _context10.next = 5;
                break;
              }
              _context10.t0 = this.symbols;
            case 5:
              element = _context10.t0;
              timer = this.timers && this.timers.prefix;
              state = this.state;
              state.timer = timer;
              if (utils.isObject(element)) element = element[state.status] || element.pending;
              if (utils.hasColor(element)) {
                _context10.next = 13;
                break;
              }
              style = this.styles[state.status] || this.styles.pending;
              return _context10.abrupt("return", style(element));
            case 13:
              return _context10.abrupt("return", element);
            case 14:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function prefix() {
        return _prefix.apply(this, arguments);
      }
      return prefix;
    }()
  }, {
    key: "message",
    value: function () {
      var _message = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var message;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.element('message');
            case 2:
              message = _context11.sent;
              if (utils.hasColor(message)) {
                _context11.next = 5;
                break;
              }
              return _context11.abrupt("return", this.styles.strong(message));
            case 5:
              return _context11.abrupt("return", message);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function message() {
        return _message.apply(this, arguments);
      }
      return message;
    }()
  }, {
    key: "separator",
    value: function () {
      var _separator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        var element, timer, state, value, ele;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.element('separator');
            case 2:
              _context12.t0 = _context12.sent;
              if (_context12.t0) {
                _context12.next = 5;
                break;
              }
              _context12.t0 = this.symbols;
            case 5:
              element = _context12.t0;
              timer = this.timers && this.timers.separator;
              state = this.state;
              state.timer = timer;
              value = element[state.status] || element.pending || state.separator;
              _context12.next = 12;
              return this.resolve(value, state);
            case 12:
              ele = _context12.sent;
              if (utils.isObject(ele)) ele = ele[state.status] || ele.pending;
              if (utils.hasColor(ele)) {
                _context12.next = 16;
                break;
              }
              return _context12.abrupt("return", this.styles.muted(ele));
            case 16:
              return _context12.abrupt("return", ele);
            case 17:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function separator() {
        return _separator.apply(this, arguments);
      }
      return separator;
    }()
  }, {
    key: "pointer",
    value: function () {
      var _pointer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(choice, i) {
        var val, styles, focused, style, ele, styled;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.element('pointer', choice, i);
            case 2:
              val = _context13.sent;
              if (!(typeof val === 'string' && utils.hasColor(val))) {
                _context13.next = 5;
                break;
              }
              return _context13.abrupt("return", val);
            case 5:
              if (!val) {
                _context13.next = 14;
                break;
              }
              styles = this.styles;
              focused = this.index === i;
              style = focused ? styles.primary : function (val) {
                return val;
              };
              _context13.next = 11;
              return this.resolve(val[focused ? 'on' : 'off'] || val, this.state);
            case 11:
              ele = _context13.sent;
              styled = !utils.hasColor(ele) ? style(ele) : ele;
              return _context13.abrupt("return", focused ? styled : ' '.repeat(ele.length));
            case 14:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function pointer(_x8, _x9) {
        return _pointer.apply(this, arguments);
      }
      return pointer;
    }()
  }, {
    key: "indicator",
    value: function () {
      var _indicator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(choice, i) {
        var val, styles, enabled, style, ele;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.element('indicator', choice, i);
            case 2:
              val = _context14.sent;
              if (!(typeof val === 'string' && utils.hasColor(val))) {
                _context14.next = 5;
                break;
              }
              return _context14.abrupt("return", val);
            case 5:
              if (!val) {
                _context14.next = 11;
                break;
              }
              styles = this.styles;
              enabled = choice.enabled === true;
              style = enabled ? styles.success : styles.dark;
              ele = val[enabled ? 'on' : 'off'] || val;
              return _context14.abrupt("return", !utils.hasColor(ele) ? style(ele) : ele);
            case 11:
              return _context14.abrupt("return", '');
            case 12:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function indicator(_x10, _x11) {
        return _indicator.apply(this, arguments);
      }
      return indicator;
    }()
  }, {
    key: "body",
    value: function body() {
      return null;
    }
  }, {
    key: "footer",
    value: function footer() {
      if (this.state.status === 'pending') {
        return this.element('footer');
      }
    }
  }, {
    key: "header",
    value: function header() {
      if (this.state.status === 'pending') {
        return this.element('header');
      }
    }
  }, {
    key: "hint",
    value: function () {
      var _hint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
        var _hint2;
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              if (!(this.state.status === 'pending' && !this.isValue(this.state.input))) {
                _context15.next = 7;
                break;
              }
              _context15.next = 3;
              return this.element('hint');
            case 3:
              _hint2 = _context15.sent;
              if (utils.hasColor(_hint2)) {
                _context15.next = 6;
                break;
              }
              return _context15.abrupt("return", this.styles.muted(_hint2));
            case 6:
              return _context15.abrupt("return", _hint2);
            case 7:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function hint() {
        return _hint.apply(this, arguments);
      }
      return hint;
    }()
  }, {
    key: "error",
    value: function error(err) {
      return !this.state.submitted ? err || this.state.error : '';
    }
  }, {
    key: "format",
    value: function format(value) {
      return value;
    }
  }, {
    key: "result",
    value: function result(value) {
      return value;
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (this.options.required === true) {
        return this.isValue(value);
      }
      return true;
    }
  }, {
    key: "isValue",
    value: function isValue(value) {
      return value != null && value !== '';
    }
  }, {
    key: "resolve",
    value: function resolve(value) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return utils.resolve.apply(utils, [this, value].concat(args));
    }
  }, {
    key: "base",
    get: function get() {
      return Prompt.prototype;
    }
  }, {
    key: "style",
    get: function get() {
      return this.styles[this.state.status];
    }
  }, {
    key: "height",
    get: function get() {
      return this.options.rows || utils.height(this.stdout, 25);
    }
  }, {
    key: "width",
    get: function get() {
      return this.options.columns || utils.width(this.stdout, 80);
    }
  }, {
    key: "size",
    get: function get() {
      return {
        width: this.width,
        height: this.height
      };
    }
  }, {
    key: "cursor",
    get: function get() {
      return this.state.cursor;
    },
    set: function set(value) {
      this.state.cursor = value;
    }
  }, {
    key: "input",
    get: function get() {
      return this.state.input;
    },
    set: function set(value) {
      this.state.input = value;
    }
  }, {
    key: "value",
    get: function get() {
      var _this$state2 = this.state,
        input = _this$state2.input,
        value = _this$state2.value;
      var result = [value, input].find(this.isValue.bind(this));
      return this.isValue(result) ? result : this.initial;
    },
    set: function set(value) {
      this.state.value = value;
    }
  }], [{
    key: "prompt",
    get: function get() {
      var _this5 = this;
      return function (options) {
        return new _this5(options).run();
      };
    }
  }]);
  return Prompt;
}(Events);
function setOptions(prompt) {
  var isValidKey = function isValidKey(key) {
    return prompt[key] === void 0 || typeof prompt[key] === 'function';
  };
  var ignore = ['actions', 'choices', 'initial', 'margin', 'roles', 'styles', 'symbols', 'theme', 'timers', 'value'];
  var ignoreFn = ['body', 'footer', 'error', 'header', 'hint', 'indicator', 'message', 'prefix', 'separator', 'skip'];
  for (var _i = 0, _Object$keys = Object.keys(prompt.options); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    if (ignore.includes(key)) continue;
    if (/^on[A-Z]/.test(key)) continue;
    var option = prompt.options[key];
    if (typeof option === 'function' && isValidKey(key)) {
      if (!ignoreFn.includes(key)) {
        prompt[key] = option.bind(prompt);
      }
    } else if (typeof prompt[key] !== 'function') {
      prompt[key] = option;
    }
  }
}
function margin(value) {
  if (typeof value === 'number') {
    value = [value, value, value, value];
  }
  var arr = [].concat(value || []);
  var pad = function pad(i) {
    return i % 2 === 0 ? '\n' : ' ';
  };
  var res = [];
  for (var i = 0; i < 4; i++) {
    var _char = pad(i);
    if (arr[i]) {
      res.push(_char.repeat(arr[i]));
    } else {
      res.push('');
    }
  }
  return res;
}
module.exports = Prompt;