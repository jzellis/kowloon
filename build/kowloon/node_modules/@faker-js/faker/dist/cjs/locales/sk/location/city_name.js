"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var n = Object.defineProperty;
var r = Object.getOwnPropertyDescriptor;
var c = Object.getOwnPropertyNames;
var t = Object.prototype.hasOwnProperty;
var l = function l(o, a) {
    for (var i in a) n(o, i, {
      get: a[i],
      enumerable: !0
    });
  },
  k = function k(o, a, i, v) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(c(a)),
        _step;
      try {
        var _loop = function _loop() {
          var e = _step.value;
          !t.call(o, e) && e !== i && n(o, e, {
            get: function get() {
              return a[e];
            },
            enumerable: !(v = r(a, e)) || v.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return o;
  };
var s = function s(o) {
  return k(n({}, "__esModule", {
    value: !0
  }), o);
};
var B = {};
l(B, {
  "default": function _default() {
    return I;
  }
});
module.exports = s(B);
var I = ["B\xE1novce nad Bebravou", "Bansk\xE1 Bystrica", "Bansk\xE1 \u0160tiavnica", "Bardejov", "Bratislava I", "Bratislava II", "Bratislava III", "Bratislava IV", "Bratislava V", "Brezno", "Byt\u010Da", "\u010Cadca", "Detva", "Doln\xFD Kub\xEDn", "Dunajsk\xE1 Streda", "Galanta", "Gelnica", "Hlohovec", "Humenn\xE9", "Ilava", "Ke\u017Emarok", "Kom\xE1rno", "Ko\u0161ice I", "Ko\u0161ice II", "Ko\u0161ice III", "Ko\u0161ice IV", "Ko\u0161ice-okolie", "Krupina", "Kysuck\xE9 Nov\xE9 Mesto", "Levice", "Levo\u010Da", "Liptovsk\xFD Mikul\xE1\u0161", "Lu\u010Denec", "Malacky", "Martin", "Medzilaborce", "Michalovce", "Myjava", "N\xE1mestovo", "Nitra", "Nov\xE9 Mesto n.V\xE1hom", "Nov\xE9 Z\xE1mky", "Partiz\xE1nske", "Pezinok", "Pie\u0161\u0165any", "Polt\xE1r", "Poprad", "Pova\u017Esk\xE1 Bystrica", "Pre\u0161ov", "Prievidza", "P\xFAchov", "Rev\xFAca", "Rimavsk\xE1 Sobota", "Ro\u017E\u0148ava", "Ru\u017Eomberok", "Sabinov", "\u0160a\u013Ea", "Senec", "Senica", "Skalica", "Snina", "Sobrance", "Spi\u0161sk\xE1 Nov\xE1 Ves", "Star\xE1 \u013Dubov\u0148a", "Stropkov", "Svidn\xEDk", "Topo\u013E\u010Dany", "Trebi\u0161ov", "Tren\u010D\xEDn", "Trnava", "Tur\u010Dianske Teplice", "Tvrdo\u0161\xEDn", "Ve\u013Ek\xFD Krt\xED\u0161", "Vranov nad Top\u013Eou", "\u017Darnovica", "\u017Diar nad Hronom", "\u017Dilina", "Zlat\xE9 Moravce", "Zvolen"];