"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROOT_SELECTOR = void 0;
exports.checkForRemovedStyleOptions = checkForRemovedStyleOptions;
exports.cleanupStyles = cleanupStyles;
exports.injectStylesBeforeElement = exports.getContainerEl = void 0;
exports.setupHooks = setupHooks;
var ROOT_SELECTOR = '[data-cy-root]';
/**
 * Gets the root element used to mount the component.
 * @returns {HTMLElement} The root element
 * @throws {Error} If the root element is not found
 */
exports.ROOT_SELECTOR = ROOT_SELECTOR;
var getContainerEl = function getContainerEl() {
  var el = document.querySelector(ROOT_SELECTOR);
  if (el) {
    return el;
  }
  throw Error("No element found that matches selector ".concat(ROOT_SELECTOR, ". Please add a root element with data-cy-root attribute to your \"component-index.html\" file so that Cypress can attach your component to the DOM."));
};
exports.getContainerEl = getContainerEl;
function checkForRemovedStyleOptions(mountingOptions) {
  for (var _i = 0, _arr = ['cssFile', 'cssFiles', 'style', 'styles', 'stylesheet', 'stylesheets']; _i < _arr.length; _i++) {
    var key = _arr[_i];
    if (mountingOptions[key]) {
      Cypress.utils.throwErrByPath('mount.removed_style_mounting_options', key);
    }
  }
}
/**
 * Utility function to register CT side effects and run cleanup code during the "test:before:run" Cypress hook
 * @param optionalCallback Callback to be called before the next test runs
 */
function setupHooks(optionalCallback) {
  // We don't want CT side effects to run when e2e
  // testing so we early return.
  // System test to verify CT side effects do not pollute e2e: system-tests/test/e2e_with_mount_import_spec.ts
  if (Cypress.testingType !== 'component') {
    return;
  }
  // When running component specs, we cannot allow "cy.visit"
  // because it will wipe out our preparation work, and does not make much sense
  // thus we overwrite "cy.visit" to throw an error
  Cypress.Commands.overwrite('visit', function () {
    throw new Error('cy.visit from a component spec is not allowed');
  });
  Cypress.Commands.overwrite('session', function () {
    throw new Error('cy.session from a component spec is not allowed');
  });
  Cypress.Commands.overwrite('origin', function () {
    throw new Error('cy.origin from a component spec is not allowed');
  });
  // @ts-ignore
  Cypress.on('test:before:run', function () {
    optionalCallback === null || optionalCallback === void 0 ? void 0 : optionalCallback();
  });
}
/**
 * Remove any style or extra link elements from the iframe placeholder
 * left from any previous test
 *
 * Removed as of Cypress 11.0.0
 * @see https://on.cypress.io/migration-11-0-0-component-testing-updates
 */
function cleanupStyles() {
  Cypress.utils.throwErrByPath('mount.cleanup_styles');
}
/**
 * Injects custom style text or CSS file or 3rd party style resources
 * into the given document.
 *
 * Removed as of Cypress 11.0.0.
 * @see https://on.cypress.io/migration-11-0-0-component-testing-updates
 */
var injectStylesBeforeElement = function injectStylesBeforeElement(options, document, el) {
  Cypress.utils.throwErrByPath('mount.inject_styles_before_element');
};
exports.injectStylesBeforeElement = injectStylesBeforeElement;