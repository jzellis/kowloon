"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var l = Object.getOwnPropertyDescriptor;
var s = Object.getOwnPropertyNames;
var t = Object.prototype.hasOwnProperty;
var h = function h(a, e) {
    for (var i in e) o(a, i, {
      get: e[i],
      enumerable: !0
    });
  },
  c = function c(a, e, i, r) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(s(e)),
        _step;
      try {
        var _loop = function _loop() {
          var n = _step.value;
          !t.call(a, n) && n !== i && o(a, n, {
            get: function get() {
              return e[n];
            },
            enumerable: !(r = l(e, n)) || r.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return a;
  };
var d = function d(a) {
  return c(o({}, "__esModule", {
    value: !0
  }), a);
};
var u = {};
h(u, {
  "default": function _default() {
    return m;
  }
});
module.exports = d(u);
var m = ["Aaron", "Abeiku", "Adam", "Adrian", "Akwesi", "Albert", "Alex", "Alexander", "Andrew", "Anthony", "Antony", "Arthur", "Ben", "Benjamin", "Bernard", "Bless", "Blessing", "Bruce", "Carl", "Charles", "Christian", "Clifford", "Colins", "Daniel", "Danny", "David", "Denis", "Dennis", "Derrick", "Dominic", "Donald", "Douglas", "Duncan", "Edward", "Ekow", "Elliot", "Elliott", "Eyram", "Eric", "Fiifi", "Francis", "Frank", "Frederick", "George", "Gerald", "Gordon", "Graham", "Gregory", "Harry", "Henry", "Howard", "Isaac", "Akwasi", "Jack", "Jacob", "Jake", "James", "Jason", "Jeffrey", "Jeremy", "Joe", "Joel", "John", "Jonathan", "Joojo", "Joseph", "Josh", "Joshua", "Josiah", "Julian", "Justin", "Karl", "Kenneth", "Kevin", "Kofi", "Kojo", "Kujoe", "Kwabena", "Kwadwo", "Kwaku", "Kwame", "Kwamena", "Kwasi", "Kweku", "Kwesi", "Kyle", "Lawrence", "Leslie", "Louis", "Luke", "Malcolm", "Marcus", "Mark", "Martin", "Mathew", "Matthew", "Max", "Michael", "Nathan", "Nicholas", "Nigel", "Oliver", "Patrick", "Paul", "Peter", "Philip", "Phillip", "Promise", "Raymond", "Richard", "Robert", "Roger", "Ronald", "Russell", "Sam", "Samuel", "Shaun", "Simon", "Stanley", "Stephen", "Steven", "Terence", "Thomas", "Timothy", "Thank God", "Thy Will Be Done", "Tom", "Tony", "Victor", "Vincent", "William", "Yaw"];