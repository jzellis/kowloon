"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e7) { throw _e7; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e8) { didErr = true; err = _e8; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var k = Object.create;
var b = Object.defineProperty;
var C = Object.getOwnPropertyDescriptor;
var N = Object.getOwnPropertyNames;
var $ = Object.getPrototypeOf,
  E = Object.prototype.hasOwnProperty;
var w = function w(s, e) {
    for (var r in e) b(s, r, {
      get: e[r],
      enumerable: !0
    });
  },
  y = function y(s, e, r, n) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(N(e)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !E.call(s, i) && i !== r && b(s, i, {
            get: function get() {
              return e[i];
            },
            enumerable: !(n = C(e, i)) || n.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return s;
  };
var x = function x(s, e, r) {
    return r = s != null ? k($(s)) : {}, y(e || !s || !s.__esModule ? b(r, "default", {
      value: s,
      enumerable: !0
    }) : r, s);
  },
  F = function F(s) {
    return y(b({}, "__esModule", {
      value: !0
    }), s);
  };
var L = {};
w(L, {
  FinanceModule: function FinanceModule() {
    return p;
  }
});
module.exports = F(L);
var f = require("../../errors/faker-error"),
  d = require("../../internal/deprecated"),
  o = x(require("./iban"));
var p = /*#__PURE__*/function () {
  function p(e) {
    _classCallCheck(this, p);
    this.faker = e;
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(p.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var r = _step2.value;
        r === "constructor" || typeof this[r] != "function" || (this[r] = this[r].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(p, [{
    key: "account",
    value: function account(e) {
      return (0, d.deprecated)({
        deprecated: "faker.finance.account",
        proposed: "faker.finance.accountNumber",
        since: "8.0",
        until: "9.0"
      }), this.accountNumber(e);
    }
  }, {
    key: "accountNumber",
    value: function accountNumber() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        length: e
      });
      var _e = e,
        _e$length = _e.length,
        r = _e$length === void 0 ? 8 : _e$length;
      return this.faker.string.numeric({
        length: r,
        allowLeadingZeros: !0
      });
    }
  }, {
    key: "accountName",
    value: function accountName() {
      return [this.faker.helpers.arrayElement(this.faker.definitions.finance.account_type), "Account"].join(" ");
    }
  }, {
    key: "routingNumber",
    value: function routingNumber() {
      var e = this.faker.string.numeric({
        length: 8,
        allowLeadingZeros: !0
      });
      var r = 0;
      for (var n = 0; n < e.length; n += 3) r += Number(e[n]) * 3, r += Number(e[n + 1]) * 7, r += Number(e[n + 2]) || 0;
      return "".concat(e).concat(Math.ceil(r / 10) * 10 - r);
    }
  }, {
    key: "mask",
    value: function mask(e, r, n) {
      return (0, d.deprecated)({
        deprecated: "faker.finance.mask",
        proposed: "faker.finance.maskedNumber",
        since: "8.0",
        until: "9.0"
      }), this.maskedNumber({
        length: e,
        parens: r,
        ellipsis: n
      });
    }
  }, {
    key: "maskedNumber",
    value: function maskedNumber() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        length: e
      });
      var _e2 = e,
        r = _e2.ellipsis,
        _e2$length = _e2.length,
        n = _e2$length === void 0 ? 4 : _e2$length,
        i = _e2.parens;
      var t = "";
      for (var a = 0; a < n; a++) t = "".concat(t, "#");
      return t = r ? ["...", t].join("") : t, t = i ? ["(", t, ")"].join("") : t, t = this.faker.helpers.replaceSymbolWithNumber(t), t;
    }
  }, {
    key: "amount",
    value: function amount() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e3;
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
      typeof e == "number" && (e = {
        min: e
      });
      var _e3 = e,
        _e3$autoFormat = _e3.autoFormat,
        a = _e3$autoFormat === void 0 ? t : _e3$autoFormat,
        _e3$dec = _e3.dec,
        m = _e3$dec === void 0 ? n : _e3$dec,
        _e3$max = _e3.max,
        l = _e3$max === void 0 ? r : _e3$max,
        _e3$min = _e3.min,
        g = _e3$min === void 0 ? 0 : _e3$min,
        _e3$symbol = _e3.symbol,
        u = _e3$symbol === void 0 ? i : _e3$symbol,
        c = this.faker.number["float"]({
          max: l,
          min: g,
          precision: Math.pow(10, -m)
        });
      var h;
      return a ? h = c.toLocaleString(void 0, {
        minimumFractionDigits: m
      }) : h = c.toFixed(m), u + h;
    }
  }, {
    key: "transactionType",
    value: function transactionType() {
      return this.faker.helpers.arrayElement(this.faker.definitions.finance.transaction_type);
    }
  }, {
    key: "currency",
    value: function currency() {
      return this.faker.helpers.arrayElement(this.faker.definitions.finance.currency);
    }
  }, {
    key: "currencyCode",
    value: function currencyCode() {
      return this.currency().code;
    }
  }, {
    key: "currencyName",
    value: function currencyName() {
      return this.currency().name;
    }
  }, {
    key: "currencySymbol",
    value: function currencySymbol() {
      var e;
      for (; !e;) e = this.currency().symbol;
      return e;
    }
  }, {
    key: "bitcoinAddress",
    value: function bitcoinAddress() {
      var e = this.faker.number["int"]({
        min: 25,
        max: 39
      });
      var r = this.faker.helpers.arrayElement(["1", "3"]);
      return r += this.faker.string.alphanumeric({
        length: e,
        casing: "mixed",
        exclude: "0OIl"
      }), r;
    }
  }, {
    key: "litecoinAddress",
    value: function litecoinAddress() {
      var e = this.faker.number["int"]({
        min: 26,
        max: 33
      });
      var r = this.faker.helpers.arrayElement(["L", "M", "3"]);
      for (var n = 0; n < e - 1; n++) r += this.faker.helpers.arrayElement("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ".split(""));
      return r;
    }
  }, {
    key: "creditCardNumber",
    value: function creditCardNumber() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "string" && (e = {
        issuer: e
      });
      var _e4 = e,
        _e4$issuer = _e4.issuer,
        r = _e4$issuer === void 0 ? "" : _e4$issuer;
      var n;
      var i = this.faker.definitions.finance.credit_card,
        t = r.toLowerCase();
      if (t in i) n = this.faker.helpers.arrayElement(i[t]);else if (/#/.test(r)) n = r;else {
        var a = this.faker.helpers.objectValue(i);
        n = this.faker.helpers.arrayElement(a);
      }
      return n = n.replace(/\//g, ""), this.faker.helpers.replaceCreditCardSymbols(n);
    }
  }, {
    key: "creditCardCVV",
    value: function creditCardCVV() {
      return this.faker.string.numeric({
        length: 3,
        allowLeadingZeros: !0
      });
    }
  }, {
    key: "creditCardIssuer",
    value: function creditCardIssuer() {
      return this.faker.helpers.objectKey(this.faker.definitions.finance.credit_card);
    }
  }, {
    key: "pin",
    value: function pin() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        length: e
      });
      var _e5 = e,
        _e5$length = _e5.length,
        r = _e5$length === void 0 ? 4 : _e5$length;
      if (r < 1) throw new f.FakerError("minimum length is 1");
      return this.faker.string.numeric({
        length: r,
        allowLeadingZeros: !0
      });
    }
  }, {
    key: "ethereumAddress",
    value: function ethereumAddress() {
      return this.faker.string.hexadecimal({
        length: 40,
        casing: "lower"
      });
    }
  }, {
    key: "iban",
    value: function iban() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var r = arguments.length > 1 ? arguments[1] : undefined;
      typeof e == "boolean" && (e = {
        formatted: e
      });
      var _e6 = e,
        _e6$countryCode = _e6.countryCode,
        n = _e6$countryCode === void 0 ? r : _e6$countryCode,
        _e6$formatted = _e6.formatted,
        i = _e6$formatted === void 0 ? !1 : _e6$formatted,
        t = n ? o["default"].formats.find(function (u) {
          return u.country === n;
        }) : this.faker.helpers.arrayElement(o["default"].formats);
      if (!t) throw new f.FakerError("Country code ".concat(n, " not supported."));
      var a = "",
        m = 0;
      var _iterator3 = _createForOfIteratorHelper(t.bban),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var u = _step3.value;
          var c = u.count;
          for (m += u.count; c > 0;) u.type === "a" ? a += this.faker.helpers.arrayElement(o["default"].alpha) : u.type === "c" ? this.faker.datatype["boolean"](.8) ? a += this.faker.number["int"](9) : a += this.faker.helpers.arrayElement(o["default"].alpha) : c >= 3 && this.faker.datatype["boolean"](.3) ? this.faker.datatype["boolean"]() ? (a += this.faker.helpers.arrayElement(o["default"].pattern100), c -= 2) : (a += this.faker.helpers.arrayElement(o["default"].pattern10), c--) : a += this.faker.number["int"](9), c--;
          a = a.substring(0, m);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var l = 98 - o["default"].mod97(o["default"].toDigitString("".concat(a).concat(t.country, "00")));
      l < 10 && (l = "0".concat(l));
      var g = "".concat(t.country).concat(l).concat(a);
      return i ? g.match(/.{1,4}/g).join(" ") : g;
    }
  }, {
    key: "bic",
    value: function bic() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _e$includeBranchCode = e.includeBranchCode,
        r = _e$includeBranchCode === void 0 ? this.faker.datatype["boolean"]() : _e$includeBranchCode,
        n = this.faker.string.alpha({
          length: 4,
          casing: "upper"
        }),
        i = this.faker.helpers.arrayElement(o["default"].iso3166),
        t = this.faker.string.alphanumeric({
          length: 2,
          casing: "upper"
        }),
        a = r ? this.faker.datatype["boolean"]() ? this.faker.string.alphanumeric({
          length: 3,
          casing: "upper"
        }) : "XXX" : "";
      return "".concat(n).concat(i).concat(t).concat(a);
    }
  }, {
    key: "transactionDescription",
    value: function transactionDescription() {
      var e = this.amount(),
        r = this.faker.company.name(),
        n = this.transactionType(),
        i = this.accountNumber(),
        t = this.maskedNumber(),
        a = this.currencyCode();
      return "".concat(n, " transaction at ").concat(r, " using card ending with ***").concat(t, " for ").concat(a, " ").concat(e, " in account ***").concat(i);
    }
  }]);
  return p;
}();
0 && (module.exports = {
  FinanceModule: FinanceModule
});