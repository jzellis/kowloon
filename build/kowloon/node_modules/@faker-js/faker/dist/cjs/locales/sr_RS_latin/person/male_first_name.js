"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var n = Object.defineProperty;
var e = Object.getOwnPropertyDescriptor;
var j = Object.getOwnPropertyNames;
var v = Object.prototype.hasOwnProperty;
var d = function d(i, a) {
    for (var r in a) n(i, r, {
      get: a[r],
      enumerable: !0
    });
  },
  k = function k(i, a, r, l) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(j(a)),
        _step;
      try {
        var _loop = function _loop() {
          var o = _step.value;
          !v.call(i, o) && o !== r && n(i, o, {
            get: function get() {
              return a[o];
            },
            enumerable: !(l = e(a, o)) || l.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var t = function t(i) {
  return k(n({}, "__esModule", {
    value: !0
  }), i);
};
var s = {};
d(s, {
  "default": function _default() {
    return M;
  }
});
module.exports = t(s);
var M = ["Adam", "Aleksa", "Aleksandar", "Aleksej", "Aljo\u0161a", "Anastasije", "Andrej", "Andrija", "Anej", "Arsenije", "A\u0107im", "Berislav", "Blagoje", "Boban", "Bogdan", "Bogoljub", "Bojan", "Boris", "Borivoje", "Borjan", "Bo\u0161ko", "Bo\u017Ea", "Bo\u017Eidar", "Branimir", "Branislav", "Branko", "Budimir", "Cvijan", "Cvijetin", "Dabi\u017Eiv", "Damir", "Damjan", "Danilo", "Danko", "Darko", "David", "Davor", "Dejan", "Desimir", "Dimitrije", "Dragan", "Dragi\u0161a", "Dragoje", "Dragojlo", "Dragoljub", "Dragoslav", "Dragutin", "Dra\u017Ea", "Dra\u017Een", "Dren", "Du\u0161an", "Du\u0161ko", "Filip", "Filotije", "Gavrilo", "Georgije", "Gerasim", "Gligorije", "Gojko", "Golub", "Goran", "Gordan", "Grgur", "Grigorije", "Hvalimir", "Ignjat", "Igor", "Ilarion", "Ilija", "Ivan", "Ivica", "Ivo", "Jadranko", "Jakov", "Jezdimir", "Jovan", "Jugoslav", "Kalinik", "Kirilo", "Konstantin", "Kosta", "Kristijan", "Krsto", "Kuzman", "Lazar", "Ljubi\u0161a", "Ljubomir", "Luka", "Mali\u0161a", "Marinko", "Marjan", "Marko", "Mateja", "Mihailo", "Mihajlo", "Mija", "Mijat", "Mika", "Miladin", "Milan", "Milanko", "Mile", "Mileta", "Milisav", "Mili\u0107", "Miljan", "Milojica", "Milomir", "Milorad", "Milo\u0161", "Milutin", "Miodrag", "Miomir", "Mirko", "Miroslav", "Mitar", "Mi\u0161a", "Mi\u0161ko", "Mladen", "Momir", "Neboj\u0161a", "Nedeljko", "Nemanja", "Nenad", "Neven", "Nikola", "Nik\u0161a", "Novak", "Obrad", "Obren", "Ognjen", "Oliver", "Ostoja", "Paja", "Pavle", "Pera", "Perica", "Pero", "Petar", "Petko", "Predrag", "Prvoslav", "Radenko", "Radivoje", "Radi\u0161a", "Radmilo", "Radomir", "Radosav", "Radoslav", "Radovan", "Rado\u0161", "Radul", "Rajko", "Ranko", "Ratimir", "Ra\u0161ko", "Relja", "Rodoljub", "Sa\u0161a", "Simo", "Sini\u0161a", "Slavoljub", "Slobodan", "Srboljub", "Sredoje", "Stanislav", "Stanko", "Stefan", "Stevan", "Stojan", "Strahinja", "Svetislav", "Svetolik", "Svetomir", "Tadija", "Tihomir", "Tomislav", "Vanja", "Vasil", "Vasko", "Velibor", "Velimir", "Vidak", "Vladimir", "Vlastimir", "Vojin", "Vujadin", "Vuk", "Vukan", "Vuka\u0161in", "Vukota", "Zafir", "Zarije", "Zoran", "Zvonko", "\u010Caslav", "\u010Cedomir", "\u0110or\u0111e", "\u0110ura", "\u0110ura\u0111"];