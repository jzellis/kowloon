"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var t = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var o = Object.getOwnPropertyNames;
var d = Object.prototype.hasOwnProperty;
var i = function i(u, e) {
    for (var a in e) t(u, a, {
      get: e[a],
      enumerable: !0
    });
  },
  r = function r(u, e, a, n) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(o(e)),
        _step;
      try {
        var _loop = function _loop() {
          var q = _step.value;
          !d.call(u, q) && q !== a && t(u, q, {
            get: function get() {
              return e[q];
            },
            enumerable: !(n = s(e, q)) || n.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return u;
  };
var p = function p(u) {
  return r(t({}, "__esModule", {
    value: !0
  }), u);
};
var c = {};
i(c, {
  "default": function _default() {
    return m;
  }
});
module.exports = p(c);
var m = ["que", "afin que", "pour que", "de sorte que", "de fa\xE7on \xE0 ce que", "de mani\xE8re \xE0 ce que", "de peur que", "de crainte que", "puisque", "parce que", "comme", "vu que", "\xE9tant donn\xE9 que", "du fait que", "du moment que", "d\u2019autant que", "m\xEAme si", "quoique", "bien que", "si", "dans la mesure o\xF9", "\xE0 condition que", "pourvu que", "au cas o\xF9", "si bien que", "de fa\xE7on que", "au point que", "tant", "tellement", "assez", "trop", "avant que", "jusqu\u2019\xE0 ce que", "lorsque", "quand", "aussit\xF4t que", "sit\xF4t que", "d\xE8s que", "apr\xE8s que", "pendant que", "tant que", "alors que", "tandis que", "sans que"];