"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var e = Object.defineProperty;
var t = Object.getOwnPropertyDescriptor;
var o = Object.getOwnPropertyNames;
var u = Object.prototype.hasOwnProperty;
var y = function y(n, a) {
    for (var r in a) e(n, r, {
      get: a[r],
      enumerable: !0
    });
  },
  s = function s(n, a, r, l) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(o(a)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !u.call(n, i) && i !== r && e(n, i, {
            get: function get() {
              return a[i];
            },
            enumerable: !(l = t(a, i)) || l.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return n;
  };
var d = function d(n) {
  return s(e({}, "__esModule", {
    value: !0
  }), n);
};
var m = {};
y(m, {
  "default": function _default() {
    return k;
  }
});
module.exports = d(m);
var k = ["Afganistan", "Almanya", "Amerika Birle\u015Fik Devletleri", "Amerikan Samoa", "Andorra", "Angola", "Anguilla, \u0130ngiltere", "Antigua ve Barbuda", "Arjantin", "Arnavutluk", "Aruba, Hollanda", "Avustralya", "Avusturya", "Azerbaycan", "Bahama Adalar\u0131", "Bahreyn", "Banglade\u015F", "Barbados", "Bel\xE7ika", "Belize", "Benin", "Bermuda, \u0130ngiltere", "Beyaz Rusya", "Bhutan", "Birle\u015Fik Arap Emirlikleri", "Birmanya (Myanmar)", "Bolivya", "Bosna Hersek", "Botswana", "Brezilya", "Brunei", "Bulgaristan", "Burkina Faso", "Burundi", "Cape Verde", "Cayman Adalar\u0131, \u0130ngiltere", "Cebelitar\u0131k, \u0130ngiltere", "Cezayir", "Christmas Adas\u0131 , Avusturalya", "Cibuti", "\xC7ad", "\xC7ek Cumhuriyeti", "\xC7in", "Danimarka", "Do\u011Fu Timor", "Dominik Cumhuriyeti", "Dominika", "Ekvator", "Ekvator Ginesi", "El Salvador", "Endonezya", "Eritre", "Ermenistan", "Estonya", "Etiyopya", "Fas", "Fiji", "Fildi\u015Fi Sahili", "Filipinler", "Filistin", "Finlandiya", "Folkland Adalar\u0131, \u0130ngiltere", "Fransa", "Frans\u0131z Guyanas\u0131", "Frans\u0131z G\xFCney Eyaletleri (Kerguelen Adalar\u0131)", "Frans\u0131z Polinezyas\u0131", "Gabon", "Galler", "Gambiya", "Gana", "Gine", "Gine-Bissau", "Grenada", "Gr\xF6nland", "Guadalup, Fransa", "Guam, Amerika", "Guatemala", "Guyana", "G\xFCney Afrika", "G\xFCney Georgia ve G\xFCney Sandvi\xE7 Adalar\u0131, \u0130ngiltere", "G\xFCney K\u0131br\u0131s Rum Y\xF6netimi", "G\xFCney Kore", "G\xFCrcistan H", "Haiti", "H\u0131rvatistan", "Hindistan", "Hollanda", "Hollanda Antilleri", "Honduras", "Irak", "\u0130ngiltere", "\u0130ran", "\u0130rlanda", "\u0130spanya", "\u0130srail", "\u0130sve\xE7", "\u0130svi\xE7re", "\u0130talya", "\u0130zlanda", "Jamaika", "Japonya", "Johnston Atoll, Amerika", "K.K.T.C.", "Kambo\xE7ya", "Kamerun", "Kanada", "Kanarya Adalar\u0131", "Karada\u011F", "Katar", "Kazakistan", "Kenya", "K\u0131rg\u0131zistan", "Kiribati", "Kolombiya", "Komorlar", "Kongo", "Kongo Demokratik Cumhuriyeti", "Kosova", "Kosta Rika", "Kuveyt", "Kuzey \u0130rlanda", "Kuzey Kore", "Kuzey Maryana Adalar\u0131", "K\xFCba", "Laos", "Lesotho", "Letonya", "Liberya", "Libya", "Liechtenstein", "Litvanya", "L\xFCbnan", "L\xFCksemburg", "Macaristan", "Madagaskar", "Makau (Makao)", "Makedonya", "Malavi", "Maldiv Adalar\u0131", "Malezya", "Mali", "Malta", "Mar\u015Fal Adalar\u0131", "Martinik, Fransa", "Mauritius", "Mayotte, Fransa", "Meksika", "M\u0131s\u0131r", "Midway Adalar\u0131, Amerika", "Mikronezya", "Mo\u011Folistan", "Moldavya", "Monako", "Montserrat", "Moritanya", "Mozambik", "Namibia", "Nauru", "Nepal", "Nijer", "Nijerya", "Nikaragua", "Niue, Yeni Zelanda", "Norve\xE7", "Orta Afrika Cumhuriyeti", "\xD6zbekistan", "Pakistan", "Palau Adalar\u0131", "Palmyra Atoll, Amerika", "Panama", "Papua Yeni Gine", "Paraguay", "Peru", "Polonya", "Portekiz", "Porto Riko, Amerika", "Reunion, Fransa", "Romanya", "Ruanda", "Rusya Federasyonu", "Saint Helena, \u0130ngiltere", "Saint Martin, Fransa", "Saint Pierre ve Miquelon, Fransa", "Samoa", "San Marino", "Santa Kitts ve Nevis", "Santa Lucia", "Santa Vincent ve Grenadinler", "Sao Tome ve Principe", "Senegal", "Sey\u015Feller", "S\u0131rbistan", "Sierra Leone", "Singapur", "Slovakya", "Slovenya", "Solomon Adalar\u0131", "Somali", "Sri Lanka", "Sudan", "Surinam", "Suriye", "Suudi Arabistan", "Svalbard, Norve\xE7", "Svaziland", "\u015Eili", "Tacikistan", "Tanzanya", "Tayland", "Tayvan", "Togo", "Tonga", "Trinidad ve Tobago", "Tunus", "Turks ve Caicos Adalar\u0131, \u0130ngiltere", "Tuvalu", "T\xFCrkiye", "T\xFCrkmenistan", "Uganda", "Ukrayna", "Umman", "Uruguay", "\xDCrd\xFCn", "Vallis ve Futuna, Fransa", "Vanuatu", "Venezuela", "Vietnam", "Virgin Adalar\u0131, Amerika", "Virgin Adalar\u0131, \u0130ngiltere", "Wake Adalar\u0131, Amerika", "Yemen", "Yeni Kaledonya, Fransa", "Yeni Zelanda", "Yunanistan", "Zambiya", "Zimbabve"];