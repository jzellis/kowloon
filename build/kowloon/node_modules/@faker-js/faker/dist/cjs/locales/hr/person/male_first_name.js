"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var l = Object.getOwnPropertyDescriptor;
var k = Object.getOwnPropertyNames;
var v = Object.prototype.hasOwnProperty;
var d = function d(o, a) {
    for (var n in a) r(o, n, {
      get: a[n],
      enumerable: !0
    });
  },
  t = function t(o, a, n, e) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(k(a)),
        _step;
      try {
        var _loop = function _loop() {
          var i = _step.value;
          !v.call(o, i) && i !== n && r(o, i, {
            get: function get() {
              return a[i];
            },
            enumerable: !(e = l(a, i)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return o;
  };
var j = function j(o) {
  return t(r({}, "__esModule", {
    value: !0
  }), o);
};
var m = {};
d(m, {
  "default": function _default() {
    return M;
  }
});
module.exports = j(m);
var M = ["Adi", "Ado", "Andel", "Andelin", "Andelko", "Andelo", "Andi", "Andras", "Andrej", "Andrija", "Andro", "Anko", "Ante", "Antek", "Antonin", "Antonio", "Antun", "Bela", "Belimir", "Berti", "Boris", "Borko", "Borna", "Bo\u017Eidar", "Branimir", "Bruno", "\u010Caslav", "Dado", "Damil", "Damir", "Danijel", "Dario", "Darko", "David", "Davor", "Davorin", "Domagoj", "Donat", "Dra\u017Een", "Dr\u017Eimir", "Dr\u017Eislav", "Dubravko", "Duje", "Dujo", "Emil", "Emilijan", "Erik", "Fabijan", "Filip", "Franjo", "Gaj", "Ga\u0161par", "Goran", "Gordan", "Gradimir", "Grga", "Grgo", "Grgur", "Gvozden", "Hrvoj", "Hrvoje", "Ico", "Igor", "Ilija", "Ilko", "Ino", "Ivan", "Ive", "Ivek", "Ivica", "Ivo", "Jadran", "Jadranko", "Jadro", "Jakov", "Jan", "Janko", "Jasen", "Jasenko", "Josip", "Jo\u0161ko", "Joso", "Jo\u017Ea", "Jo\u017Ee", "Kre\u0161imir", "Kristijan", "Kruno", "Krunoslav", "Ladislav", "Ljudevit", "Lucijan", "Luka", "Marin", "Marko", "Martin", "Matan", "Mate", "Matej", "Matija", "Matko", "Mato", "Mihael", "Milan", "Mile", "Milivoj", "Miljenko", "Mimo", "Miran", "Mirko", "Miro", "Mislav", "Mladen", "Nedjeljko", "Neven", "Nikola", "Nino", "Ozren", "Pavel", "Pepo", "Pero", "Petar", "Pravdan", "Rino", "Robert", "Roberto", "Robi", "Roko", "Sanjin", "Sa\u0161a", "Slavek", "Slaven", "Slavko", "Sre\u0107ko", "Stanko", "\u0160tef", "Stipan", "Stipe", "Stjepan", "Stribor", "Svebor", "Tihomir", "Toma", "Tome", "Tomislav", "Tomo", "Ton\u010Di", "Tone", "Toni", "Tonko", "Trpimir", "Trpko", "Tvrtko", "Valentin", "Vanja", "Vatroslav", "Vedran", "Velimir", "Vijeko", "Vjekoslav", "Vjenceslav", "Vladek", "Vladislav", "Vlado", "Vlatko", "Zdenko", "Zdravko", "\u017Deljko", "Zoltan", "Zrinislav", "Zrinko", "Zvonimir"];