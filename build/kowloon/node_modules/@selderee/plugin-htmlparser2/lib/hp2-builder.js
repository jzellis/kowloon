"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hp2Builder = hp2Builder;
var _domhandler = require("domhandler");
var _selderee = require("selderee");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function hp2Builder(nodes) {
  return new _selderee.Picker(handleArray(nodes));
}
function handleArray(nodes) {
  var matchers = nodes.map(handleNode);
  return function (el) {
    for (var _len = arguments.length, tail = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      tail[_key - 1] = arguments[_key];
    }
    return matchers.flatMap(function (m) {
      return m.apply(void 0, [el].concat(tail));
    });
  };
}
function handleNode(node) {
  switch (node.type) {
    case 'terminal':
      {
        var result = [node.valueContainer];
        return function (el) {
          return result;
        };
      }
    case 'tagName':
      return handleTagName(node);
    case 'attrValue':
      return handleAttrValueName(node);
    case 'attrPresence':
      return handleAttrPresenceName(node);
    case 'pushElement':
      return handlePushElementNode(node);
    case 'popElement':
      return handlePopElementNode(node);
  }
}
function handleTagName(node) {
  var variants = {};
  var _iterator = _createForOfIteratorHelper(node.variants),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var variant = _step.value;
      variants[variant.value] = handleArray(variant.cont);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return function (el) {
    var continuation = variants[el.name];
    for (var _len2 = arguments.length, tail = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      tail[_key2 - 1] = arguments[_key2];
    }
    return continuation ? continuation.apply(void 0, [el].concat(tail)) : [];
  };
}
function handleAttrPresenceName(node) {
  var attrName = node.name;
  var continuation = handleArray(node.cont);
  return function (el) {
    for (var _len3 = arguments.length, tail = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      tail[_key3 - 1] = arguments[_key3];
    }
    return Object.prototype.hasOwnProperty.call(el.attribs, attrName) ? continuation.apply(void 0, [el].concat(tail)) : [];
  };
}
function handleAttrValueName(node) {
  var callbacks = [];
  var _iterator2 = _createForOfIteratorHelper(node.matchers),
    _step2;
  try {
    var _loop = function _loop() {
      var matcher = _step2.value;
      var predicate = matcher.predicate;
      var continuation = handleArray(matcher.cont);
      callbacks.push(function (attr, el) {
        for (var _len5 = arguments.length, tail = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
          tail[_key5 - 2] = arguments[_key5];
        }
        return predicate(attr) ? continuation.apply(void 0, [el].concat(tail)) : [];
      });
    };
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  var attrName = node.name;
  return function (el) {
    for (var _len4 = arguments.length, tail = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      tail[_key4 - 1] = arguments[_key4];
    }
    var attr = el.attribs[attrName];
    return attr || attr === '' ? callbacks.flatMap(function (cb) {
      return cb.apply(void 0, [attr, el].concat(tail));
    }) : [];
  };
}
function handlePushElementNode(node) {
  var continuation = handleArray(node.cont);
  var leftElementGetter = node.combinator === '+' ? getPrecedingElement : getParentElement;
  return function (el) {
    var next = leftElementGetter(el);
    if (next === null) {
      return [];
    }
    for (var _len6 = arguments.length, tail = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      tail[_key6 - 1] = arguments[_key6];
    }
    return continuation.apply(void 0, [next, el].concat(tail));
  };
}
var getPrecedingElement = function getPrecedingElement(el) {
  var prev = el.prev;
  if (prev === null) {
    return null;
  }
  return (0, _domhandler.isTag)(prev) ? prev : getPrecedingElement(prev);
};
var getParentElement = function getParentElement(el) {
  var parent = el.parent;
  return parent && (0, _domhandler.isTag)(parent) ? parent : null;
};
function handlePopElementNode(node) {
  var continuation = handleArray(node.cont);
  return function (el, next) {
    for (var _len7 = arguments.length, tail = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
      tail[_key7 - 2] = arguments[_key7];
    }
    return continuation.apply(void 0, [next].concat(tail));
  };
}