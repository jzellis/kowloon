"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var o = Object.defineProperty;
var l = Object.getOwnPropertyDescriptor;
var h = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var t = function t(i, a) {
    for (var n in a) o(i, n, {
      get: a[n],
      enumerable: !0
    });
  },
  u = function u(i, a, n, e) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(h(a)),
        _step;
      try {
        var _loop = function _loop() {
          var r = _step.value;
          !s.call(i, r) && r !== n && o(i, r, {
            get: function get() {
              return a[r];
            },
            enumerable: !(e = l(a, r)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var c = function c(i) {
  return u(o({}, "__esModule", {
    value: !0
  }), i);
};
var S = {};
t(S, {
  "default": function _default() {
    return m;
  }
});
module.exports = c(S);
var m = ["Abyssin", "American curl", "American shorthair", "American wirehair", "Anatoli", "Angora turc", "Asian", "Balinais", "Bengal", "Bleu russe", "Bobtail am\xE9ricain", "Bobtail des Kouriles", "Bobtail japonais", "Bombay", "Brazilian shorthair", "British longhair", "British shorthair", "Burmese", "Burmilla", "Californian rex", "Californian spangled", "Ceylan", "Chartreux", "Chantilly", "Chausie", "Colorpoint shorthair", "Cornish rex", "Cymric", "Devon rex", "Donskoy", "European shorthair", "Exotic shorthair", "German rex", "Havana brown", "Highland fold", "Himalayen", "Khao Manee", "Korat", "LaPerm", "Maine coon", "Mandarin", "Manx", "Mau arabe", "Mau \xE9gyptien", "Minskin", "Munchkin", "Nebelung", "Norv\xE9gien", "Ocicat", "Ojos azules", "Oriental shorthair", "Persan", "Peterbald", "Pixie-bob", "Ragamuffin", "Ragdoll", "Sacr\xE9 de Birmanie", "Safari", "Savannah", "Scottish fold", "Selkirk rex", "Serengeti", "Seychellois", "Siamois", "Sib\xE9rien", "Singapura", "Skookum", "Snowshoe", "Sokok\xE9", "Somali", "Sphynx", "Tha\xEF", "Tiffany", "Tonkinois", "Toyger", "Turc de Van", "Ural rex", "York chocolat"];