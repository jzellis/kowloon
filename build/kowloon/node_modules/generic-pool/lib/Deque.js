"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var DoublyLinkedList = require("./DoublyLinkedList");
var DequeIterator = require("./DequeIterator");
/**
 * DoublyLinkedList backed double ended queue
 * implements just enough to keep the Pool
 */
var Deque = /*#__PURE__*/function (_Symbol$iterator) {
  function Deque() {
    _classCallCheck(this, Deque);
    this._list = new DoublyLinkedList();
  }

  /**
   * removes and returns the first element from the queue
   * @return {any} [description]
   */
  _createClass(Deque, [{
    key: "shift",
    value: function shift() {
      if (this.length === 0) {
        return undefined;
      }
      var node = this._list.head;
      this._list.remove(node);
      return node.data;
    }

    /**
     * adds one elemts to the beginning of the queue
     * @param  {any} element [description]
     * @return {any}         [description]
     */
  }, {
    key: "unshift",
    value: function unshift(element) {
      var node = DoublyLinkedList.createNode(element);
      this._list.insertBeginning(node);
    }

    /**
     * adds one to the end of the queue
     * @param  {any} element [description]
     * @return {any}         [description]
     */
  }, {
    key: "push",
    value: function push(element) {
      var node = DoublyLinkedList.createNode(element);
      this._list.insertEnd(node);
    }

    /**
     * removes and returns the last element from the queue
     */
  }, {
    key: "pop",
    value: function pop() {
      if (this.length === 0) {
        return undefined;
      }
      var node = this._list.tail;
      this._list.remove(node);
      return node.data;
    }
  }, {
    key: _Symbol$iterator,
    value: function value() {
      return new DequeIterator(this._list);
    }
  }, {
    key: "iterator",
    value: function iterator() {
      return new DequeIterator(this._list);
    }
  }, {
    key: "reverseIterator",
    value: function reverseIterator() {
      return new DequeIterator(this._list, true);
    }

    /**
     * get a reference to the item at the head of the queue
     * @return {any} [description]
     */
  }, {
    key: "head",
    get: function get() {
      if (this.length === 0) {
        return undefined;
      }
      var node = this._list.head;
      return node.data;
    }

    /**
     * get a reference to the item at the tail of the queue
     * @return {any} [description]
     */
  }, {
    key: "tail",
    get: function get() {
      if (this.length === 0) {
        return undefined;
      }
      var node = this._list.tail;
      return node.data;
    }
  }, {
    key: "length",
    get: function get() {
      return this._list.length;
    }
  }]);
  return Deque;
}(Symbol.iterator);
module.exports = Deque;