"use strict";

var _COMMANDS;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _PubSub_instances, _a, _PubSub_channelsArray, _PubSub_listenersSet, _PubSub_subscribing, _PubSub_isActive, _PubSub_listeners, _PubSub_extendChannelListeners, _PubSub_unsubscribeCommand, _PubSub_updateIsActive, _PubSub_emitPubSubMessage;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PubSub = exports.PubSubType = void 0;
var PubSubType;
(function (PubSubType) {
  PubSubType["CHANNELS"] = "CHANNELS";
  PubSubType["PATTERNS"] = "PATTERNS";
  PubSubType["SHARDED"] = "SHARDED";
})(PubSubType = exports.PubSubType || (exports.PubSubType = {}));
var COMMANDS = (_COMMANDS = {}, _defineProperty(_COMMANDS, PubSubType.CHANNELS, {
  subscribe: Buffer.from('subscribe'),
  unsubscribe: Buffer.from('unsubscribe'),
  message: Buffer.from('message')
}), _defineProperty(_COMMANDS, PubSubType.PATTERNS, {
  subscribe: Buffer.from('psubscribe'),
  unsubscribe: Buffer.from('punsubscribe'),
  message: Buffer.from('pmessage')
}), _defineProperty(_COMMANDS, PubSubType.SHARDED, {
  subscribe: Buffer.from('ssubscribe'),
  unsubscribe: Buffer.from('sunsubscribe'),
  message: Buffer.from('smessage')
}), _COMMANDS);
var PubSub = /*#__PURE__*/function () {
  function PubSub() {
    var _PubSub_listeners$set;
    _classCallCheck(this, PubSub);
    _PubSub_instances.add(this);
    _PubSub_subscribing.set(this, 0);
    _PubSub_isActive.set(this, false);
    _PubSub_listeners.set(this, (_PubSub_listeners$set = {}, _defineProperty(_PubSub_listeners$set, PubSubType.CHANNELS, new Map()), _defineProperty(_PubSub_listeners$set, PubSubType.PATTERNS, new Map()), _defineProperty(_PubSub_listeners$set, PubSubType.SHARDED, new Map()), _PubSub_listeners$set));
  }
  _createClass(PubSub, [{
    key: "isActive",
    get: function get() {
      return __classPrivateFieldGet(this, _PubSub_isActive, "f");
    }
  }, {
    key: "subscribe",
    value: function subscribe(type, channels, listener, returnBuffers) {
      var _this = this;
      var _b;
      var args = [COMMANDS[type].subscribe],
        channelsArray = __classPrivateFieldGet(PubSub, _a, "m", _PubSub_channelsArray).call(PubSub, channels);
      var _iterator = _createForOfIteratorHelper(channelsArray),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _channel2 = _step.value;
          var channelListeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(_channel2);
          if (!channelListeners || channelListeners.unsubscribing) {
            args.push(_channel2);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (args.length === 1) {
        // all channels are already subscribed, add listeners without issuing a command
        var _iterator2 = _createForOfIteratorHelper(channelsArray),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var channel = _step2.value;
            __classPrivateFieldGet(PubSub, _a, "m", _PubSub_listenersSet).call(PubSub, __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(channel), returnBuffers).add(listener);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return;
      }
      __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
      __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
      return {
        args: args,
        channelsCounter: args.length - 1,
        resolve: function resolve() {
          var _b;
          __classPrivateFieldSet(_this, _PubSub_subscribing, (_b = __classPrivateFieldGet(_this, _PubSub_subscribing, "f"), _b--, _b), "f");
          var _iterator3 = _createForOfIteratorHelper(channelsArray),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _channel = _step3.value;
              var listeners = __classPrivateFieldGet(_this, _PubSub_listeners, "f")[type].get(_channel);
              if (!listeners) {
                listeners = {
                  unsubscribing: false,
                  buffers: new Set(),
                  strings: new Set()
                };
                __classPrivateFieldGet(_this, _PubSub_listeners, "f")[type].set(_channel, listeners);
              }
              __classPrivateFieldGet(PubSub, _a, "m", _PubSub_listenersSet).call(PubSub, listeners, returnBuffers).add(listener);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        },
        reject: function reject() {
          var _b;
          __classPrivateFieldSet(_this, _PubSub_subscribing, (_b = __classPrivateFieldGet(_this, _PubSub_subscribing, "f"), _b--, _b), "f");
          __classPrivateFieldGet(_this, _PubSub_instances, "m", _PubSub_updateIsActive).call(_this);
        }
      };
    }
  }, {
    key: "extendChannelListeners",
    value: function extendChannelListeners(type, channel, listeners) {
      var _this2 = this;
      var _b;
      if (!__classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_extendChannelListeners).call(this, type, channel, listeners)) return;
      __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
      __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
      return {
        args: [COMMANDS[type].subscribe, channel],
        channelsCounter: 1,
        resolve: function resolve() {
          var _b, _c;
          return __classPrivateFieldSet(_this2, _PubSub_subscribing, (_c = __classPrivateFieldGet(_this2, _PubSub_subscribing, "f"), _b = _c--, _c), "f"), _b;
        },
        reject: function reject() {
          var _b;
          __classPrivateFieldSet(_this2, _PubSub_subscribing, (_b = __classPrivateFieldGet(_this2, _PubSub_subscribing, "f"), _b--, _b), "f");
          __classPrivateFieldGet(_this2, _PubSub_instances, "m", _PubSub_updateIsActive).call(_this2);
        }
      };
    }
  }, {
    key: "extendTypeListeners",
    value: function extendTypeListeners(type, listeners) {
      var _this3 = this;
      var _b;
      var args = [COMMANDS[type].subscribe];
      var _iterator4 = _createForOfIteratorHelper(listeners),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _slicedToArray(_step4.value, 2),
            channel = _step4$value[0],
            channelListeners = _step4$value[1];
          if (__classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_extendChannelListeners).call(this, type, channel, channelListeners)) {
            args.push(channel);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      if (args.length === 1) return;
      __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
      __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
      return {
        args: args,
        channelsCounter: args.length - 1,
        resolve: function resolve() {
          var _b, _c;
          return __classPrivateFieldSet(_this3, _PubSub_subscribing, (_c = __classPrivateFieldGet(_this3, _PubSub_subscribing, "f"), _b = _c--, _c), "f"), _b;
        },
        reject: function reject() {
          var _b;
          __classPrivateFieldSet(_this3, _PubSub_subscribing, (_b = __classPrivateFieldGet(_this3, _PubSub_subscribing, "f"), _b--, _b), "f");
          __classPrivateFieldGet(_this3, _PubSub_instances, "m", _PubSub_updateIsActive).call(_this3);
        }
      };
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(type, channels, listener, returnBuffers) {
      var listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type];
      if (!channels) {
        return __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_unsubscribeCommand).call(this, [COMMANDS[type].unsubscribe],
        // cannot use `this.#subscribed` because there might be some `SUBSCRIBE` commands in the queue
        // cannot use `this.#subscribed + this.#subscribing` because some `SUBSCRIBE` commands might fail
        NaN, function () {
          return listeners.clear();
        });
      }
      var channelsArray = __classPrivateFieldGet(PubSub, _a, "m", _PubSub_channelsArray).call(PubSub, channels);
      if (!listener) {
        return __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_unsubscribeCommand).call(this, [COMMANDS[type].unsubscribe].concat(_toConsumableArray(channelsArray)), channelsArray.length, function () {
          var _iterator5 = _createForOfIteratorHelper(channelsArray),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var channel = _step5.value;
              listeners["delete"](channel);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        });
      }
      var args = [COMMANDS[type].unsubscribe];
      var _iterator6 = _createForOfIteratorHelper(channelsArray),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _channel4 = _step6.value;
          var sets = listeners.get(_channel4);
          if (sets) {
            var current = void 0,
              other = void 0;
            if (returnBuffers) {
              current = sets.buffers;
              other = sets.strings;
            } else {
              current = sets.strings;
              other = sets.buffers;
            }
            var currentSize = current.has(listener) ? current.size - 1 : current.size;
            if (currentSize !== 0 || other.size !== 0) continue;
            sets.unsubscribing = true;
          }
          args.push(_channel4);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      if (args.length === 1) {
        // all channels has other listeners,
        // delete the listeners without issuing a command
        var _iterator7 = _createForOfIteratorHelper(channelsArray),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var channel = _step7.value;
            __classPrivateFieldGet(PubSub, _a, "m", _PubSub_listenersSet).call(PubSub, listeners.get(channel), returnBuffers)["delete"](listener);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
        return;
      }
      return __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_unsubscribeCommand).call(this, args, args.length - 1, function () {
        var _iterator8 = _createForOfIteratorHelper(channelsArray),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _channel3 = _step8.value;
            var sets = listeners.get(_channel3);
            if (!sets) continue;
            (returnBuffers ? sets.buffers : sets.strings)["delete"](listener);
            if (sets.buffers.size === 0 && sets.strings.size === 0) {
              listeners["delete"](_channel3);
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      __classPrivateFieldSet(this, _PubSub_isActive, false, "f");
      __classPrivateFieldSet(this, _PubSub_subscribing, 0, "f");
    }
  }, {
    key: "resubscribe",
    value: function resubscribe() {
      var _this4 = this;
      var _b;
      var commands = [];
      for (var _i2 = 0, _Object$entries = Object.entries(__classPrivateFieldGet(this, _PubSub_listeners, "f")); _i2 < _Object$entries.length; _i2++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
          type = _Object$entries$_i[0],
          listeners = _Object$entries$_i[1];
        if (!listeners.size) continue;
        __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
        __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
        var callback = function callback() {
          var _b, _c;
          return __classPrivateFieldSet(_this4, _PubSub_subscribing, (_c = __classPrivateFieldGet(_this4, _PubSub_subscribing, "f"), _b = _c--, _c), "f"), _b;
        };
        commands.push({
          args: [COMMANDS[type].subscribe].concat(_toConsumableArray(listeners.keys())),
          channelsCounter: listeners.size,
          resolve: callback,
          reject: callback
        });
      }
      return commands;
    }
  }, {
    key: "handleMessageReply",
    value: function handleMessageReply(reply) {
      if (COMMANDS[PubSubType.CHANNELS].message.equals(reply[0])) {
        __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_emitPubSubMessage).call(this, PubSubType.CHANNELS, reply[2], reply[1]);
        return true;
      } else if (COMMANDS[PubSubType.PATTERNS].message.equals(reply[0])) {
        __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_emitPubSubMessage).call(this, PubSubType.PATTERNS, reply[3], reply[2], reply[1]);
        return true;
      } else if (COMMANDS[PubSubType.SHARDED].message.equals(reply[0])) {
        __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_emitPubSubMessage).call(this, PubSubType.SHARDED, reply[2], reply[1]);
        return true;
      }
      return false;
    }
  }, {
    key: "removeShardedListeners",
    value: function removeShardedListeners(channel) {
      var listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.SHARDED].get(channel);
      __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.SHARDED]["delete"](channel);
      __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_updateIsActive).call(this);
      return listeners;
    }
  }, {
    key: "getTypeListeners",
    value: function getTypeListeners(type) {
      return __classPrivateFieldGet(this, _PubSub_listeners, "f")[type];
    }
  }], [{
    key: "isStatusReply",
    value: function isStatusReply(reply) {
      return COMMANDS[PubSubType.CHANNELS].subscribe.equals(reply[0]) || COMMANDS[PubSubType.CHANNELS].unsubscribe.equals(reply[0]) || COMMANDS[PubSubType.PATTERNS].subscribe.equals(reply[0]) || COMMANDS[PubSubType.PATTERNS].unsubscribe.equals(reply[0]) || COMMANDS[PubSubType.SHARDED].subscribe.equals(reply[0]);
    }
  }, {
    key: "isShardedUnsubscribe",
    value: function isShardedUnsubscribe(reply) {
      return COMMANDS[PubSubType.SHARDED].unsubscribe.equals(reply[0]);
    }
  }]);
  return PubSub;
}();
exports.PubSub = PubSub;
_a = PubSub, _PubSub_subscribing = new WeakMap(), _PubSub_isActive = new WeakMap(), _PubSub_listeners = new WeakMap(), _PubSub_instances = new WeakSet(), _PubSub_channelsArray = function _PubSub_channelsArray(channels) {
  return Array.isArray(channels) ? channels : [channels];
}, _PubSub_listenersSet = function _PubSub_listenersSet(listeners, returnBuffers) {
  return returnBuffers ? listeners.buffers : listeners.strings;
}, _PubSub_extendChannelListeners = function _PubSub_extendChannelListeners(type, channel, listeners) {
  var existingListeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(channel);
  if (!existingListeners) {
    __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].set(channel, listeners);
    return true;
  }
  var _iterator9 = _createForOfIteratorHelper(listeners.buffers),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var listener = _step9.value;
      existingListeners.buffers.add(listener);
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  var _iterator10 = _createForOfIteratorHelper(listeners.strings),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var _listener = _step10.value;
      existingListeners.strings.add(_listener);
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
  return false;
}, _PubSub_unsubscribeCommand = function _PubSub_unsubscribeCommand(args, channelsCounter, removeListeners) {
  var _this5 = this;
  return {
    args: args,
    channelsCounter: channelsCounter,
    resolve: function resolve() {
      removeListeners();
      __classPrivateFieldGet(_this5, _PubSub_instances, "m", _PubSub_updateIsActive).call(_this5);
    },
    reject: undefined // use the same structure as `subscribe`
  };
}, _PubSub_updateIsActive = function _PubSub_updateIsActive() {
  __classPrivateFieldSet(this, _PubSub_isActive, __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.CHANNELS].size !== 0 || __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.PATTERNS].size !== 0 || __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.SHARDED].size !== 0 || __classPrivateFieldGet(this, _PubSub_subscribing, "f") !== 0, "f");
}, _PubSub_emitPubSubMessage = function _PubSub_emitPubSubMessage(type, message, channel, pattern) {
  var keyString = (pattern !== null && pattern !== void 0 ? pattern : channel).toString(),
    listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(keyString);
  if (!listeners) return;
  var _iterator11 = _createForOfIteratorHelper(listeners.buffers),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var listener = _step11.value;
      listener(message, channel);
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  if (!listeners.strings.size) return;
  var channelString = pattern ? channel.toString() : keyString,
    messageString = channelString === '__redis__:invalidate' ?
    // https://github.com/redis/redis/pull/7469
    // https://github.com/redis/redis/issues/7463
    message === null ? null : message.map(function (x) {
      return x.toString();
    }) : message.toString();
  var _iterator12 = _createForOfIteratorHelper(listeners.strings),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var _listener2 = _step12.value;
      _listener2(messageString, channelString);
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
};