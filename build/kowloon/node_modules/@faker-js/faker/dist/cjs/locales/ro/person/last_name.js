"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var r = Object.defineProperty;
var n = Object.getOwnPropertyDescriptor;
var c = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var t = function t(i, a) {
    for (var e in a) r(i, e, {
      get: a[e],
      enumerable: !0
    });
  },
  l = function l(i, a, e, o) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(c(a)),
        _step;
      try {
        var _loop = function _loop() {
          var u = _step.value;
          !s.call(i, u) && u !== e && r(i, u, {
            get: function get() {
              return a[u];
            },
            enumerable: !(o = n(a, u)) || o.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var M = function M(i) {
  return l(r({}, "__esModule", {
    value: !0
  }), i);
};
var h = {};
t(h, {
  "default": function _default() {
    return d;
  }
});
module.exports = M(h);
var d = ["Achim", "Adam", "Albu", "Aldea", "Alexa", "Alexandrescu", "Alexandru", "Alexe", "Andrei", "Anghel", "Antal", "Anton", "Apostol", "Ardelean", "Ardeleanu", "Avram", "Baciu", "Badea", "Balan", "Balint", "Banica", "Banu", "Barbu", "Barbulescu", "Bejan", "Biro", "Blaga", "Boboc", "Bodea", "Bogdan", "Bota", "Botezatu", "Bratu", "Bucur", "Buda", "Bunea", "Burlacu", "Calin", "Catana", "Cazacu", "Chiriac", "Chirila", "Chirita", "Chis", "Chivu", "Ciobanu", "Ciocan", "Cojocaru", "Coman", "Constantin", "Constantinescu", "Cornea", "Cosma", "Costache", "Costea", "Costin", "Covaci", "Cozma", "Craciun", "Cretu", "Crisan", "Cristea", "Cristescu", "Croitoru", "Cucu", "Damian", "Dan", "Danciu", "Danila", "Dascalu", "David", "Diaconescu", "Diaconu", "Dima", "Dinca", "Dinu", "Dobre", "Dobrescu", "Dogaru", "Dragan", "Draghici", "Dragoi", "Dragomir", "Dumitrache", "Dumitrascu", "Dumitrescu", "Dumitriu", "Dumitru", "Duta", "Enache", "Ene", "Farcas", "Filimon", "Filip", "Florea", "Florescu", "Fodor", "Fratila", "Gabor", "Gal", "Ganea", "Gavrila", "Georgescu", "Gheorghe", "Gheorghita", "Gheorghiu", "Gherman", "Ghita", "Giurgiu", "Grecu", "Grigoras", "Grigore", "Grigorescu", "Grosu", "Groza", "Horvath", "Iacob", "Iancu", "Ichim", "Ignat", "Ilie", "Iliescu", "Ion", "Ionescu", "Ionita", "Iordache", "Iorga", "Iosif", "Irimia", "Ispas", "Istrate", "Ivan", "Ivascu", "Kiss", "Kovacs", "Lazar", "Luca", "Lungu", "Lupu", "Macovei", "Maftei", "Man", "Manea", "Manolache", "Manole", "Marcu", "Marginean", "Marian", "Marin", "Marinescu", "Martin", "Mateescu", "Matei", "Maxim", "Mazilu", "Micu", "Mihai", "Mihaila", "Mihailescu", "Mihalache", "Mihalcea", "Milea", "Militaru", "Mircea", "Mirea", "Miron", "Miu", "Mocanu", "Moga", "Moise", "Moldovan", "Moldoveanu", "Molnar", "Morar", "Moraru", "Muntean", "Munteanu", "Muresan", "Musat", "Nagy", "Nastase", "Neacsu", "Neagoe", "Neagu", "Neamtu", "Nechita", "Necula", "Nedelcu", "Negoita", "Negrea", "Negru", "Nemes", "Nica", "Nicoara", "Nicolae", "Nicolescu", "Niculae", "Niculescu", "Nistor", "Nita", "Nitu", "Oancea", "Olariu", "Olaru", "Oltean", "Olteanu", "Oprea", "Opris", "Paduraru", "Pana", "Panait", "Paraschiv", "Parvu", "Pasca", "Pascu", "Patrascu", "Paun", "Pavel", "Petcu", "Peter", "Petre", "Petrea", "Petrescu", "Pintea", "Pintilie", "Pirvu", "Pop", "Popa", "Popescu", "Popovici", "Preda", "Prodan", "Puiu", "Radoi", "Radu", "Radulescu", "Roman", "Rosca", "Rosu", "Rotaru", "Rus", "Rusu", "Sabau", "Sandor", "Sandu", "Sarbu", "Sava", "Savu", "Serban", "Sima", "Simion", "Simionescu", "Simon", "Sirbu", "Soare", "Solomon", "Staicu", "Stan", "Stanciu", "Stancu", "Stanescu", "Stefan", "Stefanescu", "Stoian", "Stoica", "Stroe", "Suciu", "Szabo", "Szasz", "Szekely", "Tamas", "Tanase", "Tataru", "Teodorescu", "Toader", "Toma", "Tomescu", "Toth", "Trandafir", "Trif", "Trifan", "Tudor", "Tudorache", "Tudose", "Turcu", "Ungureanu", "Ursu", "Vaduva", "Varga", "Vasile", "Vasilescu", "Vasiliu", "Veres", "Vintila", "Visan", "Vlad", "Voicu", "Voinea", "Zaharia", "Zamfir"];