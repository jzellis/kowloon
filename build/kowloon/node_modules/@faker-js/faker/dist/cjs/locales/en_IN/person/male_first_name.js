"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var i = Object.defineProperty;
var d = Object.getOwnPropertyDescriptor;
var t = Object.getOwnPropertyNames;
var s = Object.prototype.hasOwnProperty;
var u = function u(n, a) {
    for (var r in a) i(n, r, {
      get: a[r],
      enumerable: !0
    });
  },
  m = function m(n, a, r, e) {
    if (a && _typeof(a) == "object" || typeof a == "function") {
      var _iterator = _createForOfIteratorHelper(t(a)),
        _step;
      try {
        var _loop = function _loop() {
          var h = _step.value;
          !s.call(n, h) && h !== r && i(n, h, {
            get: function get() {
              return a[h];
            },
            enumerable: !(e = d(a, h)) || e.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return n;
  };
var A = function A(n) {
  return m(i({}, "__esModule", {
    value: !0
  }), n);
};
var y = {};
u(y, {
  "default": function _default() {
    return k;
  }
});
module.exports = A(y);
var k = ["Aadi", "Aadidev", "Aadinath", "Aaditya", "Aagam", "Aagney", "Aamod", "Aanandaswarup", "Anand Swarup", "Aanjaneya", "Anjaneya", "Aaryan", "Aryan", "Aatmaj", "Aatreya", "Aayushmaan", "Aayushman", "Abhaidev", "Abhirath", "Abhisyanta", "Acaryatanaya", "Achalesvara", "Acharyanandana", "Acharyasuta", "Achintya", "Achyut", "Adheesh", "Adhiraj", "Adhrit", "Adikavi", "Adinath", "Aditeya", "Aditya", "Adityanandan", "Adityanandana", "Adripathi", "Advaya", "Agasti", "Agastya", "Agneya", "Aagneya", "Agnimitra", "Agniprava", "Agnivesh", "Ajit", "Ajeet", "Akroor", "Akshaj", "Akshat", "Akshayakeerti", "Alok", "Aalok", "Amaranaath", "Amarnath", "Amaresh", "Ameyatma", "Amish", "Amogh", "Amrit", "Anaadi", "Anagh", "Anal", "Anand", "Aanand", "Anang", "Anil", "Anilaabh", "Anilabh", "Anish", "Ankal", "Anunay", "Anurag", "Anuraag", "Archan", "Arindam", "Arjun", "Arnesh", "Arun", "Ashlesh", "Ashok", "Atmanand", "Atmananda", "Avadhesh", "Baalaaditya", "Baladitya", "Baalagopaal", "Balgopal", "Balagopal", "Bahula", "Bakula", "Balaaditya", "Balachandra", "Balagovind", "Bandhu", "Bandhul", "Bankim", "Bankimchandra", "Bhadrak", "Bhadraksh", "Bhadran", "Bhagavaan", "Bhagvan", "Bharadwaj", "Bhardwaj", "Bharat", "Bhargava", "Bhasvan", "Bhaasvan", "Bhaswar", "Bhaaswar", "Bhaumik", "Bhaves", "Bheeshma", "Bhisham", "Bhishma", "Bhima", "Bhoj", "Bhramar", "Bhudev", "Bhudeva", "Bhupati", "Bhoopati", "Bhoopat", "Bhupen", "Bhushan", "Bhooshan", "Bhushit", "Bhooshit", "Bhuvanesh", "Bhuvaneshwar", "Bodhan", "Brahma", "Brahmabrata", "Brahmanandam", "Brahmaanand", "Brahmdev", "Brajendra", "Brajesh", "Brijesh", "Birjesh", "Budhil", "Chakor", "Chakradhar", "Chakravartee", "Chakravarti", "Chanakya", "Chaanakya", "Chandak", "Chandan", "Chandraayan", "Chandrabhan", "Chandradev", "Chandraketu", "Chandramauli", "Chandramohan", "Chandran", "Chandranath", "Chapal", "Charak", "Charuchandra", "Chaaruchandra", "Charuvrat", "Chatur", "Chaturaanan", "Chaturbhuj", "Chetan", "Chaten", "Chaitan", "Chetanaanand", "Chidaakaash", "Chidaatma", "Chidambar", "Chidambaram", "Chidananda", "Chinmayanand", "Chinmayananda", "Chiranjeev", "Chiranjeeve", "Chitraksh", "Daiwik", "Damodara", "Dandak", "Dandapaani", "Darshan", "Datta", "Dayaamay", "Dayamayee", "Dayaananda", "Dayaanidhi", "Kin", "Deenabandhu", "Deepan", "Deepankar", "Dipankar", "Deependra", "Dipendra", "Deepesh", "Dipesh", "Deeptanshu", "Deeptendu", "Diptendu", "Deeptiman", "Deeptimoy", "Deeptimay", "Dev", "Deb", "Devadatt", "Devagya", "Devajyoti", "Devak", "Devdan", "Deven", "Devesh", "Deveshwar", "Devvrat", "Dhananjay", "Dhanapati", "Dhanpati", "Dhanesh", "Dhanu", "Dhanvin", "Dharmaketu", "Dhruv", "Dhyanesh", "Dhyaneshwar", "Digambar", "Digambara", "Dinakar", "Dinkar", "Dinesh", "Divaakar", "Divakar", "Deevakar", "Divjot", "Dron", "Drona", "Dwaipayan", "Dwaipayana", "Eekalabya", "Ekalavya", "Ekaksh", "Ekaaksh", "Ekaling", "Ekdant", "Ekadant", "Gajaadhar", "Gajadhar", "Gajbaahu", "Gajabahu", "Ganak", "Ganaka", "Ganapati", "Gandharv", "Gandharva", "Ganesh", "Gangesh", "Garud", "Garuda", "Gati", "Gatik", "Gaurang", "Gauraang", "Gauranga", "Gouranga", "Gautam", "Gautama", "Goutam", "Ghanaanand", "Ghanshyam", "Ghanashyam", "Giri", "Girik", "Girika", "Girindra", "Giriraaj", "Giriraj", "Girish", "Gopal", "Gopaal", "Gopi", "Gopee", "Gorakhnath", "Gorakhanatha", "Goswamee", "Goswami", "Gotum", "Govinda", "Gobinda", "Gudakesha", "Gudakesa", "Gurdev", "Guru", "Hari", "Harinarayan", "Harit", "Hiranmay", "Hiranmaya", "Inder", "Indra", "Jagadish", "Jagadisha", "Jagathi", "Jagdeep", "Jagdish", "Jagmeet", "Jahnu", "Jai", "Javas", "Jay", "Jitendra", "Jitender", "Jyotis", "Kailash", "Kamalesh", "Kamlesh", "Kanak", "Kanaka", "Kannan", "Kannen", "Karan", "Karthik", "Kartik", "Karunanidhi", "Kashyap", "Kiran", "Kirti", "Keerti", "Krishna", "Krishnadas", "Krishnadasa", "Kumar", "Lai", "Lakshman", "Laxman", "Lakshmidhar", "Lakshminath", "Lal", "Laal", "Mahendra", "Mohinder", "Mahesh", "Maheswar", "Manik", "Manikya", "Manoj", "Marut", "Mayoor", "Meghnad", "Meghnath", "Mohan", "Mukesh", "Mukul", "Nagabhushanam", "Nanda", "Narayan", "Narendra", "Narinder", "Naveen", "Navin", "Nawal", "Naval", "Nimit", "Niranjan", "Nirbhay", "Niro", "Param", "Paramartha", "Pran", "Pranay", "Prasad", "Prathamesh", "Prayag", "Prem", "Puneet", "Purushottam", "Rahul", "Raj", "Rajan", "Rajendra", "Rajiv", "Rakesh", "Ramesh", "Rameshwar", "Ranjit", "Ranjeet", "Ravi", "Ritesh", "Rohan", "Rohit", "Rudra", "Sachin", "Sameer", "Samir", "Sanjay", "Sanka", "Sarvin", "Satish", "Satyen", "Shankar", "Shantanu", "Sher", "Shiv", "Siddarth", "Siddhran", "Som", "Somu", "Somnath", "Subhash", "Subodh", "Suman", "Suresh", "Surya", "Suryakant", "Suryakanta", "Sushil", "Susheel", "Swami", "Swapnil", "Tapan", "Tarun", "Tej", "Tejas", "Trilochan", "Trilochana", "Trilok", "Trilokesh", "Triloki", "Triloki Nath", "Trilokanath", "Tushar", "Udai", "Udit", "Ujjawal", "Ujjwal", "Umang", "Upendra", "Uttam", "Vasudev", "Vasudeva", "Vedang", "Vedanga", "Vidhya", "Vidur", "Vidhur", "Vijay", "Vimal", "Vinay", "Vishnu", "Bishnu", "Vishwamitra", "Vyas", "Yogendra", "Yoginder", "Yogesh"];