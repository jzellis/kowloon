"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pseudos = void 0;
exports.verifyPseudoArgs = verifyPseudoArgs;
// While filters are precompiled, pseudos get called when they are needed
var pseudos = {
  empty: function empty(elem, _ref) {
    var adapter = _ref.adapter;
    return !adapter.getChildren(elem).some(function (elem) {
      return (
        // FIXME: `getText` call is potentially expensive.
        adapter.isTag(elem) || adapter.getText(elem) !== ""
      );
    });
  },
  "first-child": function firstChild(elem, _ref2) {
    var adapter = _ref2.adapter,
      equals = _ref2.equals;
    if (adapter.prevElementSibling) {
      return adapter.prevElementSibling(elem) == null;
    }
    var firstChild = adapter.getSiblings(elem).find(function (elem) {
      return adapter.isTag(elem);
    });
    return firstChild != null && equals(elem, firstChild);
  },
  "last-child": function lastChild(elem, _ref3) {
    var adapter = _ref3.adapter,
      equals = _ref3.equals;
    var siblings = adapter.getSiblings(elem);
    for (var i = siblings.length - 1; i >= 0; i--) {
      if (equals(elem, siblings[i])) return true;
      if (adapter.isTag(siblings[i])) break;
    }
    return false;
  },
  "first-of-type": function firstOfType(elem, _ref4) {
    var adapter = _ref4.adapter,
      equals = _ref4.equals;
    var siblings = adapter.getSiblings(elem);
    var elemName = adapter.getName(elem);
    for (var i = 0; i < siblings.length; i++) {
      var currentSibling = siblings[i];
      if (equals(elem, currentSibling)) return true;
      if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "last-of-type": function lastOfType(elem, _ref5) {
    var adapter = _ref5.adapter,
      equals = _ref5.equals;
    var siblings = adapter.getSiblings(elem);
    var elemName = adapter.getName(elem);
    for (var i = siblings.length - 1; i >= 0; i--) {
      var currentSibling = siblings[i];
      if (equals(elem, currentSibling)) return true;
      if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "only-of-type": function onlyOfType(elem, _ref6) {
    var adapter = _ref6.adapter,
      equals = _ref6.equals;
    var elemName = adapter.getName(elem);
    return adapter.getSiblings(elem).every(function (sibling) {
      return equals(elem, sibling) || !adapter.isTag(sibling) || adapter.getName(sibling) !== elemName;
    });
  },
  "only-child": function onlyChild(elem, _ref7) {
    var adapter = _ref7.adapter,
      equals = _ref7.equals;
    return adapter.getSiblings(elem).every(function (sibling) {
      return equals(elem, sibling) || !adapter.isTag(sibling);
    });
  }
};
exports.pseudos = pseudos;
function verifyPseudoArgs(func, name, subselect, argIndex) {
  if (subselect === null) {
    if (func.length > argIndex) {
      throw new Error("Pseudo-class :".concat(name, " requires an argument"));
    }
  } else if (func.length === argIndex) {
    throw new Error("Pseudo-class :".concat(name, " doesn't have any arguments"));
  }
}