"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLoad = getLoad;
var _options = _interopRequireWildcard(require("./options.js"));
var staticMethods = _interopRequireWildcard(require("./static.js"));
var _cheerio = require("./cheerio.js");
var _utils = require("./utils.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function getLoad(parse, render) {
  /**
   * Create a querying function, bound to a document created from the provided markup.
   *
   * Note that similar to web browser contexts, this operation may introduce
   * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to
   * switch to fragment mode and disable this.
   *
   * @param content - Markup to be loaded.
   * @param options - Options for the created instance.
   * @param isDocument - Allows parser to be switched to fragment mode.
   * @returns The loaded document.
   * @see {@link https://cheerio.js.org#loading} for additional usage information.
   */
  return function load(content, options) {
    var isDocument = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (content == null) {
      throw new Error('cheerio.load() expects a string');
    }
    var internalOpts = _objectSpread(_objectSpread({}, _options["default"]), (0, _options.flatten)(options));
    var initialRoot = parse(content, internalOpts, isDocument, null);
    /** Create an extended class here, so that extensions only live on one instance. */
    var LoadedCheerio = /*#__PURE__*/function (_Cheerio) {
      _inherits(LoadedCheerio, _Cheerio);
      var _super = _createSuper(LoadedCheerio);
      function LoadedCheerio() {
        _classCallCheck(this, LoadedCheerio);
        return _super.apply(this, arguments);
      }
      _createClass(LoadedCheerio, [{
        key: "_make",
        value: function _make(selector, context) {
          var cheerio = initialize(selector, context);
          cheerio.prevObject = this;
          return cheerio;
        }
      }, {
        key: "_parse",
        value: function _parse(content, options, isDocument, context) {
          return parse(content, options, isDocument, context);
        }
      }, {
        key: "_render",
        value: function _render(dom) {
          return render(dom, this.options);
        }
      }]);
      return LoadedCheerio;
    }(_cheerio.Cheerio);
    function initialize(selector, context) {
      var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : initialRoot;
      var opts = arguments.length > 3 ? arguments[3] : undefined;
      // $($)
      if (selector && (0, _utils.isCheerio)(selector)) return selector;
      var options = _objectSpread(_objectSpread({}, internalOpts), (0, _options.flatten)(opts));
      var r = typeof root === 'string' ? [parse(root, options, false, null)] : 'length' in root ? root : [root];
      var rootInstance = (0, _utils.isCheerio)(r) ? r : new LoadedCheerio(r, null, options);
      // Add a cyclic reference, so that calling methods on `_root` never fails.
      rootInstance._root = rootInstance;
      // $(), $(null), $(undefined), $(false)
      if (!selector) {
        return new LoadedCheerio(undefined, rootInstance, options);
      }
      var elements = typeof selector === 'string' && (0, _utils.isHtml)(selector) ?
      // $(<html>)
      parse(selector, options, false, null).children : isNode(selector) ?
      // $(dom)
      [selector] : Array.isArray(selector) ?
      // $([dom])
      selector : undefined;
      var instance = new LoadedCheerio(elements, rootInstance, options);
      if (elements) {
        return instance;
      }
      if (typeof selector !== 'string') {
        throw new Error('Unexpected type of selector');
      }
      // We know that our selector is a string now.
      var search = selector;
      var searchContext = !context ?
      // If we don't have a context, maybe we have a root, from loading
      rootInstance : typeof context === 'string' ? (0, _utils.isHtml)(context) ?
      // $('li', '<ul>...</ul>')
      new LoadedCheerio([parse(context, options, false, null)], rootInstance, options) : (
      // $('li', 'ul')
      search = "".concat(context, " ").concat(search), rootInstance) : (0, _utils.isCheerio)(context) ?
      // $('li', $)
      context :
      // $('li', node), $('li', [nodes])
      new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options);
      // If we still don't have a context, return
      if (!searchContext) return instance;
      /*
       * #id, .class, tag
       */
      return searchContext.find(search);
    }
    // Add in static methods & properties
    Object.assign(initialize, staticMethods, {
      load: load,
      // `_root` and `_options` are used in static methods.
      _root: initialRoot,
      _options: internalOpts,
      // Add `fn` for plugins
      fn: LoadedCheerio.prototype,
      // Add the prototype here to maintain `instanceof` behavior.
      prototype: LoadedCheerio.prototype
    });
    return initialize;
  };
}
function isNode(obj) {
  return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';
}