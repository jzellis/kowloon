"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e5) { throw _e5; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e6) { didErr = true; err = _e6; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var u = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var b = Object.getOwnPropertyNames;
var o = Object.prototype.hasOwnProperty;
var f = function f(i, e) {
    for (var r in e) u(i, r, {
      get: e[r],
      enumerable: !0
    });
  },
  d = function d(i, e, r, n) {
    if (e && _typeof(e) == "object" || typeof e == "function") {
      var _iterator = _createForOfIteratorHelper(b(e)),
        _step;
      try {
        var _loop = function _loop() {
          var t = _step.value;
          !o.call(i, t) && t !== r && u(i, t, {
            get: function get() {
              return e[t];
            },
            enumerable: !(n = s(e, t)) || n.enumerable
          });
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return i;
  };
var p = function p(i) {
  return d(u({}, "__esModule", {
    value: !0
  }), i);
};
var c = {};
f(c, {
  DatatypeModule: function DatatypeModule() {
    return m;
  }
});
module.exports = p(c);
var a = require("../../internal/deprecated");
var m = /*#__PURE__*/function () {
  function m(e) {
    _classCallCheck(this, m);
    this.faker = e;
    var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(m.prototype)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var r = _step2.value;
        r === "constructor" || typeof this[r] != "function" || (this[r] = this[r].bind(this));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(m, [{
    key: "number",
    value: function number() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 99999;
      (0, a.deprecated)({
        deprecated: "faker.datatype.number()",
        proposed: "faker.number.int()",
        since: "8.0",
        until: "9.0"
      }), typeof e == "number" && (e = {
        max: e
      });
      var _e = e,
        _e$min = _e.min,
        r = _e$min === void 0 ? 0 : _e$min,
        _e$max = _e.max,
        n = _e$max === void 0 ? r + 99999 : _e$max,
        _e$precision = _e.precision,
        t = _e$precision === void 0 ? 1 : _e$precision;
      return this.faker.number["float"]({
        min: r,
        max: n,
        precision: t
      });
    }
  }, {
    key: "float",
    value: function float() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, a.deprecated)({
        deprecated: "faker.datatype.float()",
        proposed: "faker.number.float()",
        since: "8.0",
        until: "9.0"
      }), typeof e == "number" && (e = {
        precision: e
      });
      var _e2 = e,
        _e2$min = _e2.min,
        r = _e2$min === void 0 ? 0 : _e2$min,
        _e2$max = _e2.max,
        n = _e2$max === void 0 ? r + 99999 : _e2$max,
        _e2$precision = _e2.precision,
        t = _e2$precision === void 0 ? .01 : _e2$precision;
      return this.faker.number["float"]({
        min: r,
        max: n,
        precision: t
      });
    }
  }, {
    key: "datetime",
    value: function datetime() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, a.deprecated)({
        deprecated: "faker.datatype.datetime({ min, max })",
        proposed: "faker.date.between({ from, to }) or faker.date.anytime()",
        since: "8.0",
        until: "9.0"
      });
      var r = 864e13;
      var n = typeof e == "number" ? void 0 : e.min,
        t = typeof e == "number" ? e : e.max;
      return (n == null || n < r * -1) && (n = Date.UTC(1990, 0)), (t == null || t > r) && (t = Date.UTC(2100, 0)), this.faker.date.between({
        from: n,
        to: t
      });
    }
  }, {
    key: "string",
    value: function string() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, a.deprecated)({
        deprecated: "faker.datatype.string()",
        proposed: "faker.string.sample()",
        since: "8.0",
        until: "9.0"
      }), typeof e == "number" && (e = {
        length: e
      });
      var _e3 = e,
        _e3$length = _e3.length,
        r = _e3$length === void 0 ? 10 : _e3$length;
      return this.faker.string.sample(r);
    }
  }, {
    key: "uuid",
    value: function uuid() {
      return (0, a.deprecated)({
        deprecated: "faker.datatype.uuid()",
        proposed: "faker.string.uuid()",
        since: "8.0",
        until: "9.0"
      }), this.faker.string.uuid();
    }
  }, {
    key: "boolean",
    value: function boolean() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      typeof e == "number" && (e = {
        probability: e
      });
      var _e4 = e,
        _e4$probability = _e4.probability,
        r = _e4$probability === void 0 ? .5 : _e4$probability;
      return r <= 0 ? !1 : r >= 1 ? !0 : this.faker.number["float"]() < r;
    }
  }, {
    key: "hexadecimal",
    value: function hexadecimal() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return (0, a.deprecated)({
        deprecated: "faker.datatype.hexadecimal()",
        proposed: "faker.string.hexadecimal() or faker.number.hex()",
        since: "8.0",
        until: "9.0"
      }), this.faker.string.hexadecimal(_objectSpread(_objectSpread({}, e), {}, {
        casing: e["case"]
      }));
    }
  }, {
    key: "json",
    value: function json() {
      var _this = this;
      (0, a.deprecated)({
        deprecated: "faker.datatype.json()",
        proposed: "your own function to generate complex objects",
        since: "8.0",
        until: "9.0"
      });
      var e = ["foo", "bar", "bike", "a", "b", "name", "prop"],
        r = {};
      return e.forEach(function (n) {
        r[n] = _this["boolean"]() ? _this.faker.string.sample() : _this.faker.number["int"]();
      }), JSON.stringify(r);
    }
  }, {
    key: "array",
    value: function array() {
      var _this2 = this;
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      return (0, a.deprecated)({
        deprecated: "faker.datatype.array()",
        proposed: "your own function to build complex arrays",
        since: "8.0",
        until: "9.0"
      }), this.faker.helpers.multiple(function () {
        return _this2["boolean"]() ? _this2.faker.string.sample() : _this2.faker.number["int"]();
      }, {
        count: e
      });
    }
  }, {
    key: "bigInt",
    value: function bigInt(e) {
      return (0, a.deprecated)({
        deprecated: "faker.datatype.bigInt()",
        proposed: "faker.number.bigInt()",
        since: "8.0",
        until: "9.0"
      }), this.faker.number.bigInt(e);
    }
  }]);
  return m;
}();
0 && (module.exports = {
  DatatypeModule: DatatypeModule
});