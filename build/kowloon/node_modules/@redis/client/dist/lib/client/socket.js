"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function (receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = void 0 && (void 0).__classPrivateFieldSet || function (receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_isSocketUnrefed, _RedisSocket_reconnectStrategy, _RedisSocket_shouldReconnect, _RedisSocket_connect, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_disconnect, _RedisSocket_isCorked;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var events_1 = require("events");
var net = require("net");
var tls = require("tls");
var errors_1 = require("../errors");
var utils_1 = require("../utils");
var RedisSocket = /*#__PURE__*/function (_events_1$EventEmitte) {
  _inherits(RedisSocket, _events_1$EventEmitte);
  var _super = _createSuper(RedisSocket);
  function RedisSocket(initiator, options) {
    var _this;
    _classCallCheck(this, RedisSocket);
    _this = _super.call(this);
    _RedisSocket_instances.add(_assertThisInitialized(_this));
    _RedisSocket_initiator.set(_assertThisInitialized(_this), void 0);
    _RedisSocket_options.set(_assertThisInitialized(_this), void 0);
    _RedisSocket_socket.set(_assertThisInitialized(_this), void 0);
    _RedisSocket_isOpen.set(_assertThisInitialized(_this), false);
    _RedisSocket_isReady.set(_assertThisInitialized(_this), false);
    // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used
    // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain
    _RedisSocket_writableNeedDrain.set(_assertThisInitialized(_this), false);
    _RedisSocket_isSocketUnrefed.set(_assertThisInitialized(_this), false);
    _RedisSocket_isCorked.set(_assertThisInitialized(_this), false);
    __classPrivateFieldSet(_assertThisInitialized(_this), _RedisSocket_initiator, initiator, "f");
    __classPrivateFieldSet(_assertThisInitialized(_this), _RedisSocket_options, __classPrivateFieldGet(RedisSocket, _a, "m", _RedisSocket_initiateOptions).call(RedisSocket, options), "f");
    return _this;
  }
  _createClass(RedisSocket, [{
    key: "isOpen",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisSocket_isOpen, "f");
    }
  }, {
    key: "isReady",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisSocket_isReady, "f");
    }
  }, {
    key: "writableNeedDrain",
    get: function get() {
      return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, "f");
    }
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, "f")) {
                _context.next = 2;
                break;
              }
              throw new Error('Socket already opened');
            case 2:
              __classPrivateFieldSet(this, _RedisSocket_isOpen, true, "f");
              return _context.abrupt("return", __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_connect).call(this));
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function connect() {
        return _connect.apply(this, arguments);
      }
      return connect;
    }()
  }, {
    key: "writeCommand",
    value: function writeCommand(args) {
      if (!__classPrivateFieldGet(this, _RedisSocket_socket, "f")) {
        throw new errors_1.ClientClosedError();
      }
      var _iterator = _createForOfIteratorHelper(args),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var toWrite = _step.value;
          __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, "f").write(toWrite), "f");
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, "f")) {
        throw new errors_1.ClientClosedError();
      }
      __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
      __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_disconnect).call(this);
    }
  }, {
    key: "quit",
    value: function () {
      var _quit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fn) {
        var reply;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (__classPrivateFieldGet(this, _RedisSocket_isOpen, "f")) {
                _context2.next = 2;
                break;
              }
              throw new errors_1.ClientClosedError();
            case 2:
              __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
              _context2.next = 5;
              return fn();
            case 5:
              reply = _context2.sent;
              __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_disconnect).call(this);
              return _context2.abrupt("return", reply);
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function quit(_x) {
        return _quit.apply(this, arguments);
      }
      return quit;
    }()
  }, {
    key: "cork",
    value: function cork() {
      var _this2 = this;
      if (!__classPrivateFieldGet(this, _RedisSocket_socket, "f") || __classPrivateFieldGet(this, _RedisSocket_isCorked, "f")) {
        return;
      }
      __classPrivateFieldGet(this, _RedisSocket_socket, "f").cork();
      __classPrivateFieldSet(this, _RedisSocket_isCorked, true, "f");
      setImmediate(function () {
        var _classPrivateFieldGe;
        (_classPrivateFieldGe = __classPrivateFieldGet(_this2, _RedisSocket_socket, "f")) === null || _classPrivateFieldGe === void 0 ? void 0 : _classPrivateFieldGe.uncork();
        __classPrivateFieldSet(_this2, _RedisSocket_isCorked, false, "f");
      });
    }
  }, {
    key: "ref",
    value: function ref() {
      var _classPrivateFieldGe2;
      __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, false, "f");
      (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _RedisSocket_socket, "f")) === null || _classPrivateFieldGe2 === void 0 ? void 0 : _classPrivateFieldGe2.ref();
    }
  }, {
    key: "unref",
    value: function unref() {
      var _classPrivateFieldGe3;
      __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, true, "f");
      (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _RedisSocket_socket, "f")) === null || _classPrivateFieldGe3 === void 0 ? void 0 : _classPrivateFieldGe3.unref();
    }
  }]);
  return RedisSocket;
}(events_1.EventEmitter);
exports["default"] = RedisSocket;
_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isSocketUnrefed = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {
  var _options, _options$connectTimeo, _options$keepAlive, _options$noDelay;
  var _b, _c;
  (_options = options) !== null && _options !== void 0 ? _options : options = {};
  if (!options.path) {
    var _b$port, _c$host;
    (_b$port = (_b = options).port) !== null && _b$port !== void 0 ? _b$port : _b.port = 6379;
    (_c$host = (_c = options).host) !== null && _c$host !== void 0 ? _c$host : _c.host = 'localhost';
  }
  (_options$connectTimeo = options.connectTimeout) !== null && _options$connectTimeo !== void 0 ? _options$connectTimeo : options.connectTimeout = 5000;
  (_options$keepAlive = options.keepAlive) !== null && _options$keepAlive !== void 0 ? _options$keepAlive : options.keepAlive = 5000;
  (_options$noDelay = options.noDelay) !== null && _options$noDelay !== void 0 ? _options$noDelay : options.noDelay = true;
  return options;
}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {
  return options.tls === true;
}, _RedisSocket_reconnectStrategy = function _RedisSocket_reconnectStrategy(retries, cause) {
  if (__classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy === false) {
    return false;
  } else if (typeof __classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy === 'number') {
    return __classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy;
  } else if (__classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy) {
    try {
      var retryIn = __classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy(retries, cause);
      if (retryIn !== false && !(retryIn instanceof Error) && typeof retryIn !== 'number') {
        throw new TypeError("Reconnect strategy should return `false | Error | number`, got ".concat(retryIn, " instead"));
      }
      return retryIn;
    } catch (err) {
      this.emit('error', err);
    }
  }
  return Math.min(retries * 50, 500);
}, _RedisSocket_shouldReconnect = function _RedisSocket_shouldReconnect(retries, cause) {
  var retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_reconnectStrategy).call(this, retries, cause);
  if (retryIn === false) {
    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
    this.emit('error', cause);
    return cause;
  } else if (retryIn instanceof Error) {
    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
    this.emit('error', cause);
    return new errors_1.ReconnectStrategyError(retryIn, cause);
  }
  return retryIn;
}, _RedisSocket_connect = /*#__PURE__*/function () {
  var _RedisSocket_connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var retries, retryIn;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          retries = 0;
        case 1:
          _context3.prev = 1;
          _context3.t0 = __classPrivateFieldSet;
          _context3.t1 = this;
          _context3.t2 = _RedisSocket_socket;
          _context3.next = 7;
          return __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_createSocket).call(this);
        case 7:
          _context3.t3 = _context3.sent;
          (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t3, "f");
          __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, "f");
          this.emit('connect');
          _context3.prev = 11;
          _context3.next = 14;
          return __classPrivateFieldGet(this, _RedisSocket_initiator, "f").call(this);
        case 14:
          _context3.next = 21;
          break;
        case 16:
          _context3.prev = 16;
          _context3.t4 = _context3["catch"](11);
          __classPrivateFieldGet(this, _RedisSocket_socket, "f").destroy();
          __classPrivateFieldSet(this, _RedisSocket_socket, undefined, "f");
          throw _context3.t4;
        case 21:
          __classPrivateFieldSet(this, _RedisSocket_isReady, true, "f");
          this.emit('ready');
          _context3.next = 34;
          break;
        case 25:
          _context3.prev = 25;
          _context3.t5 = _context3["catch"](1);
          retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_shouldReconnect).call(this, retries++, _context3.t5);
          if (!(typeof retryIn !== 'number')) {
            _context3.next = 30;
            break;
          }
          throw retryIn;
        case 30:
          this.emit('error', _context3.t5);
          _context3.next = 33;
          return (0, utils_1.promiseTimeout)(retryIn);
        case 33:
          this.emit('reconnecting');
        case 34:
          if (__classPrivateFieldGet(this, _RedisSocket_isOpen, "f") && !__classPrivateFieldGet(this, _RedisSocket_isReady, "f")) {
            _context3.next = 1;
            break;
          }
        case 35:
        case "end":
          return _context3.stop();
      }
    }, _callee3, this, [[1, 25], [11, 16]]);
  }));
  function _RedisSocket_connect() {
    return _RedisSocket_connect2.apply(this, arguments);
  }
  return _RedisSocket_connect;
}(), _RedisSocket_createSocket = function _RedisSocket_createSocket() {
  var _this3 = this;
  return new Promise(function (resolve, reject) {
    var _ref = __classPrivateFieldGet(RedisSocket, _a, "m", _RedisSocket_isTlsSocket).call(RedisSocket, __classPrivateFieldGet(_this3, _RedisSocket_options, "f")) ? __classPrivateFieldGet(_this3, _RedisSocket_instances, "m", _RedisSocket_createTlsSocket).call(_this3) : __classPrivateFieldGet(_this3, _RedisSocket_instances, "m", _RedisSocket_createNetSocket).call(_this3),
      connectEvent = _ref.connectEvent,
      socket = _ref.socket;
    if (__classPrivateFieldGet(_this3, _RedisSocket_options, "f").connectTimeout) {
      socket.setTimeout(__classPrivateFieldGet(_this3, _RedisSocket_options, "f").connectTimeout, function () {
        return socket.destroy(new errors_1.ConnectionTimeoutError());
      });
    }
    if (__classPrivateFieldGet(_this3, _RedisSocket_isSocketUnrefed, "f")) {
      socket.unref();
    }
    socket.setNoDelay(__classPrivateFieldGet(_this3, _RedisSocket_options, "f").noDelay).once('error', reject).once(connectEvent, function () {
      socket.setTimeout(0)
      // https://github.com/nodejs/node/issues/31663
      .setKeepAlive(__classPrivateFieldGet(_this3, _RedisSocket_options, "f").keepAlive !== false, __classPrivateFieldGet(_this3, _RedisSocket_options, "f").keepAlive || 0).off('error', reject).once('error', function (err) {
        return __classPrivateFieldGet(_this3, _RedisSocket_instances, "m", _RedisSocket_onSocketError).call(_this3, err);
      }).once('close', function (hadError) {
        if (!hadError && __classPrivateFieldGet(_this3, _RedisSocket_isReady, "f") && __classPrivateFieldGet(_this3, _RedisSocket_socket, "f") === socket) {
          __classPrivateFieldGet(_this3, _RedisSocket_instances, "m", _RedisSocket_onSocketError).call(_this3, new errors_1.SocketClosedUnexpectedlyError());
        }
      }).on('drain', function () {
        __classPrivateFieldSet(_this3, _RedisSocket_writableNeedDrain, false, "f");
        _this3.emit('drain');
      }).on('data', function (data) {
        return _this3.emit('data', data);
      });
      resolve(socket);
    });
  });
}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {
  return {
    connectEvent: 'connect',
    socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, "f")) // TODO
  };
}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {
  return {
    connectEvent: 'secureConnect',
    socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, "f")) // TODO
  };
}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {
  __classPrivateFieldSet(this, _RedisSocket_isReady, false, "f");
  this.emit('error', err);
  if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, "f") || typeof __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_shouldReconnect).call(this, 0, err) !== 'number') return;
  this.emit('reconnecting');
  __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_connect).call(this)["catch"](function () {
    // the error was already emitted, silently ignore it
  });
}, _RedisSocket_disconnect = function _RedisSocket_disconnect() {
  __classPrivateFieldSet(this, _RedisSocket_isReady, false, "f");
  if (__classPrivateFieldGet(this, _RedisSocket_socket, "f")) {
    __classPrivateFieldGet(this, _RedisSocket_socket, "f").destroy();
    __classPrivateFieldSet(this, _RedisSocket_socket, undefined, "f");
  }
  this.emit('end');
};